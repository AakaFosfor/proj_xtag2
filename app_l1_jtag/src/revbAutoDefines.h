/*
 *
 * Copyright XMOS Limited - (c) 2005-2009
 *
 * AUTOGENERATED - DO NOT EDIT
 *
 */

#ifndef _REVB_AUTODEFINES_H_
#define _REVB_AUTODEFINES_H_

#define REVB_NUM_PIPE_STAGES 0x5
/* PS_RAM_BASE*/
#define REVB_PS_RAM_BASE_NUM 0x0
#define REVB_PS_RAM_BASE 0xb
#define REVB_PS_RAM_BASE_WRITE_MASK 0xfffffffc
#define REVB_PS_RAM_BASE_READ_MASK 0xffffffff
#define REVB_PS_RAM_BASE_DBG_WRITE_MASK 0xfffffffc
#define REVB_PS_RAM_BASE_EXISTING_BITS 0xfffffffc
#define REVB_PS_RAM_BASE_WE true
#define REVB_PS_RAM_BASE_DBG_WE true
/* PS_VECTOR_BASE*/
#define REVB_PS_VECTOR_BASE_NUM 0x1
#define REVB_PS_VECTOR_BASE 0x10b
#define REVB_PS_VECTOR_BASE_WRITE_MASK 0xffff0000
#define REVB_PS_VECTOR_BASE_READ_MASK 0xffffffff
#define REVB_PS_VECTOR_BASE_DBG_WRITE_MASK 0xffff0000
#define REVB_PS_VECTOR_BASE_EXISTING_BITS 0xffff0000
#define REVB_PS_VECTOR_BASE_WE true
#define REVB_PS_VECTOR_BASE_DBG_WE true
/* PS_XCORE_CTRL0*/
#define REVB_PS_XCORE_CTRL0_NUM 0x2
#define REVB_PS_XCORE_CTRL0 0x20b
#define REVB_PS_XCORE_CTRL0_WRITE_MASK 0x1
#define REVB_PS_XCORE_CTRL0_READ_MASK 0xffffffff
#define REVB_PS_XCORE_CTRL0_DBG_WRITE_MASK 0x1
#define REVB_PS_XCORE_CTRL0_EXISTING_BITS 0x1
#define REVB_PS_XCORE_CTRL0_WE true
#define REVB_PS_XCORE_CTRL0_DBG_WE true
/* PS_BOOT_CONFIG*/
#define REVB_PS_BOOT_CONFIG_NUM 0x3
#define REVB_PS_BOOT_CONFIG 0x30b
#define REVB_PS_BOOT_CONFIG_WRITE_MASK 0x0
#define REVB_PS_BOOT_CONFIG_READ_MASK 0xffffffff
#define REVB_PS_BOOT_CONFIG_DBG_WRITE_MASK 0x0
#define REVB_PS_BOOT_CONFIG_EXISTING_BITS 0xff01ff
#define REVB_PS_BOOT_CONFIG_WE false
#define REVB_PS_BOOT_CONFIG_DBG_WE false
/* PS_BOOT_STATUS*/
#define REVB_PS_BOOT_STATUS_NUM 0x4
#define REVB_PS_BOOT_STATUS 0x40b
#define REVB_PS_BOOT_STATUS_WRITE_MASK 0xffffffff
#define REVB_PS_BOOT_STATUS_READ_MASK 0xffffffff
#define REVB_PS_BOOT_STATUS_DBG_WRITE_MASK 0xffffffff
#define REVB_PS_BOOT_STATUS_EXISTING_BITS 0xffffffff
#define REVB_PS_BOOT_STATUS_WE true
#define REVB_PS_BOOT_STATUS_DBG_WE true
/* PS_SECURITY_CONFIG*/
#define REVB_PS_SECURITY_CONFIG_NUM 0x5
#define REVB_PS_SECURITY_CONFIG 0x50b
#define REVB_PS_SECURITY_CONFIG_WRITE_MASK 0x0
#define REVB_PS_SECURITY_CONFIG_READ_MASK 0xffffffff
#define REVB_PS_SECURITY_CONFIG_DBG_WRITE_MASK 0x0
#define REVB_PS_SECURITY_CONFIG_EXISTING_BITS 0xffffffff
#define REVB_PS_SECURITY_CONFIG_WE false
#define REVB_PS_SECURITY_CONFIG_DBG_WE false
/* PS_DBG_SSR*/
#define REVB_PS_DBG_SSR_NUM 0x10
#define REVB_PS_DBG_SSR 0x100b
#define REVB_PS_DBG_SSR_WRITE_MASK 0x0
#define REVB_PS_DBG_SSR_READ_MASK 0xffffffff
#define REVB_PS_DBG_SSR_DBG_WRITE_MASK 0xdf
#define REVB_PS_DBG_SSR_EXISTING_BITS 0xdf
#define REVB_PS_DBG_SSR_WE false
#define REVB_PS_DBG_SSR_DBG_WE true
/* PS_DBG_SPC*/
#define REVB_PS_DBG_SPC_NUM 0x11
#define REVB_PS_DBG_SPC 0x110b
#define REVB_PS_DBG_SPC_WRITE_MASK 0x0
#define REVB_PS_DBG_SPC_READ_MASK 0xffffffff
#define REVB_PS_DBG_SPC_DBG_WRITE_MASK 0xffffffff
#define REVB_PS_DBG_SPC_EXISTING_BITS 0xffffffff
#define REVB_PS_DBG_SPC_WE false
#define REVB_PS_DBG_SPC_DBG_WE true
/* PS_DBG_SSP*/
#define REVB_PS_DBG_SSP_NUM 0x12
#define REVB_PS_DBG_SSP 0x120b
#define REVB_PS_DBG_SSP_WRITE_MASK 0x0
#define REVB_PS_DBG_SSP_READ_MASK 0xffffffff
#define REVB_PS_DBG_SSP_DBG_WRITE_MASK 0xffffffff
#define REVB_PS_DBG_SSP_EXISTING_BITS 0xffffffff
#define REVB_PS_DBG_SSP_WE false
#define REVB_PS_DBG_SSP_DBG_WE true
/* PS_DBG_T_NUM*/
#define REVB_PS_DBG_T_NUM_NUM 0x13
#define REVB_PS_DBG_T_NUM 0x130b
#define REVB_PS_DBG_T_NUM_WRITE_MASK 0x0
#define REVB_PS_DBG_T_NUM_READ_MASK 0xffffffff
#define REVB_PS_DBG_T_NUM_DBG_WRITE_MASK 0xff
#define REVB_PS_DBG_T_NUM_EXISTING_BITS 0xff
#define REVB_PS_DBG_T_NUM_WE false
#define REVB_PS_DBG_T_NUM_DBG_WE true
/* PS_DBG_T_REG*/
#define REVB_PS_DBG_T_REG_NUM 0x14
#define REVB_PS_DBG_T_REG 0x140b
#define REVB_PS_DBG_T_REG_WRITE_MASK 0x0
#define REVB_PS_DBG_T_REG_READ_MASK 0xffffffff
#define REVB_PS_DBG_T_REG_DBG_WRITE_MASK 0x1f
#define REVB_PS_DBG_T_REG_EXISTING_BITS 0x1f
#define REVB_PS_DBG_T_REG_WE false
#define REVB_PS_DBG_T_REG_DBG_WE true
/* PS_DBG_TYPE*/
#define REVB_PS_DBG_TYPE_NUM 0x15
#define REVB_PS_DBG_TYPE 0x150b
#define REVB_PS_DBG_TYPE_WRITE_MASK 0x0
#define REVB_PS_DBG_TYPE_READ_MASK 0xffffffff
#define REVB_PS_DBG_TYPE_DBG_WRITE_MASK 0x3ff07
#define REVB_PS_DBG_TYPE_EXISTING_BITS 0x3ff07
#define REVB_PS_DBG_TYPE_WE false
#define REVB_PS_DBG_TYPE_DBG_WE true
/* PS_DBG_DATA*/
#define REVB_PS_DBG_DATA_NUM 0x16
#define REVB_PS_DBG_DATA 0x160b
#define REVB_PS_DBG_DATA_WRITE_MASK 0x0
#define REVB_PS_DBG_DATA_READ_MASK 0xffffffff
#define REVB_PS_DBG_DATA_DBG_WRITE_MASK 0xffffffff
#define REVB_PS_DBG_DATA_EXISTING_BITS 0xffffffff
#define REVB_PS_DBG_DATA_WE false
#define REVB_PS_DBG_DATA_DBG_WE true
/* PS_DBG_RUN_CTRL*/
#define REVB_PS_DBG_RUN_CTRL_NUM 0x18
#define REVB_PS_DBG_RUN_CTRL 0x180b
#define REVB_PS_DBG_RUN_CTRL_WRITE_MASK 0x0
#define REVB_PS_DBG_RUN_CTRL_READ_MASK 0xffffffff
#define REVB_PS_DBG_RUN_CTRL_DBG_WRITE_MASK 0xff
#define REVB_PS_DBG_RUN_CTRL_EXISTING_BITS 0xff
#define REVB_PS_DBG_RUN_CTRL_WE false
#define REVB_PS_DBG_RUN_CTRL_DBG_WE true
/* PS_DBG_SCRATCH_0*/
#define REVB_PS_DBG_SCRATCH_0_NUM 0x20
#define REVB_PS_DBG_SCRATCH_0 0x200b
#define REVB_NUM_PS_DBG_SCRATCH 0x8
#define REVB_PS_DBG_SCRATCH_WRITE_MASK 0x0
#define REVB_PS_DBG_SCRATCH_READ_MASK 0xffffffff
#define REVB_PS_DBG_SCRATCH_DBG_WRITE_MASK 0xffffffff
#define REVB_PS_DBG_SCRATCH_EXISTING_BITS 0xffffffff
#define REVB_PS_DBG_SCRATCH_WE false
#define REVB_PS_DBG_SCRATCH_DBG_WE true
/* PS_DBG_SCRATCH_1*/
#define REVB_PS_DBG_SCRATCH_1_NUM 0x21
#define REVB_PS_DBG_SCRATCH_1 0x210b
/* PS_DBG_SCRATCH_2*/
#define REVB_PS_DBG_SCRATCH_2_NUM 0x22
#define REVB_PS_DBG_SCRATCH_2 0x220b
/* PS_DBG_SCRATCH_3*/
#define REVB_PS_DBG_SCRATCH_3_NUM 0x23
#define REVB_PS_DBG_SCRATCH_3 0x230b
/* PS_DBG_SCRATCH_4*/
#define REVB_PS_DBG_SCRATCH_4_NUM 0x24
#define REVB_PS_DBG_SCRATCH_4 0x240b
/* PS_DBG_SCRATCH_5*/
#define REVB_PS_DBG_SCRATCH_5_NUM 0x25
#define REVB_PS_DBG_SCRATCH_5 0x250b
/* PS_DBG_SCRATCH_6*/
#define REVB_PS_DBG_SCRATCH_6_NUM 0x26
#define REVB_PS_DBG_SCRATCH_6 0x260b
/* PS_DBG_SCRATCH_7*/
#define REVB_PS_DBG_SCRATCH_7_NUM 0x27
#define REVB_PS_DBG_SCRATCH_7 0x270b
/* PS_DBG_IBREAK_ADDR_0*/
#define REVB_PS_DBG_IBREAK_ADDR_0_NUM 0x30
#define REVB_PS_DBG_IBREAK_ADDR_0 0x300b
#define REVB_NUM_PS_DBG_IBREAK_ADDR 0x4
#define REVB_PS_DBG_IBREAK_ADDR_WRITE_MASK 0x0
#define REVB_PS_DBG_IBREAK_ADDR_READ_MASK 0xffffffff
#define REVB_PS_DBG_IBREAK_ADDR_DBG_WRITE_MASK 0xffffffff
#define REVB_PS_DBG_IBREAK_ADDR_EXISTING_BITS 0xffffffff
#define REVB_PS_DBG_IBREAK_ADDR_WE false
#define REVB_PS_DBG_IBREAK_ADDR_DBG_WE true
/* PS_DBG_IBREAK_ADDR_1*/
#define REVB_PS_DBG_IBREAK_ADDR_1_NUM 0x31
#define REVB_PS_DBG_IBREAK_ADDR_1 0x310b
/* PS_DBG_IBREAK_ADDR_2*/
#define REVB_PS_DBG_IBREAK_ADDR_2_NUM 0x32
#define REVB_PS_DBG_IBREAK_ADDR_2 0x320b
/* PS_DBG_IBREAK_ADDR_3*/
#define REVB_PS_DBG_IBREAK_ADDR_3_NUM 0x33
#define REVB_PS_DBG_IBREAK_ADDR_3 0x330b
/* PS_DBG_IBREAK_CTRL_0*/
#define REVB_PS_DBG_IBREAK_CTRL_0_NUM 0x40
#define REVB_PS_DBG_IBREAK_CTRL_0 0x400b
#define REVB_NUM_PS_DBG_IBREAK_CTRL 0x4
#define REVB_PS_DBG_IBREAK_CTRL_WRITE_MASK 0x0
#define REVB_PS_DBG_IBREAK_CTRL_READ_MASK 0xffffffff
#define REVB_PS_DBG_IBREAK_CTRL_DBG_WRITE_MASK 0xff0003
#define REVB_PS_DBG_IBREAK_CTRL_EXISTING_BITS 0xff0003
#define REVB_PS_DBG_IBREAK_CTRL_WE false
#define REVB_PS_DBG_IBREAK_CTRL_DBG_WE true
/* PS_DBG_IBREAK_CTRL_1*/
#define REVB_PS_DBG_IBREAK_CTRL_1_NUM 0x41
#define REVB_PS_DBG_IBREAK_CTRL_1 0x410b
/* PS_DBG_IBREAK_CTRL_2*/
#define REVB_PS_DBG_IBREAK_CTRL_2_NUM 0x42
#define REVB_PS_DBG_IBREAK_CTRL_2 0x420b
/* PS_DBG_IBREAK_CTRL_3*/
#define REVB_PS_DBG_IBREAK_CTRL_3_NUM 0x43
#define REVB_PS_DBG_IBREAK_CTRL_3 0x430b
/* PS_DBG_DWATCH_ADDR1_0*/
#define REVB_PS_DBG_DWATCH_ADDR1_0_NUM 0x50
#define REVB_PS_DBG_DWATCH_ADDR1_0 0x500b
#define REVB_NUM_PS_DBG_DWATCH_ADDR1 0x4
#define REVB_PS_DBG_DWATCH_ADDR1_WRITE_MASK 0x0
#define REVB_PS_DBG_DWATCH_ADDR1_READ_MASK 0xffffffff
#define REVB_PS_DBG_DWATCH_ADDR1_DBG_WRITE_MASK 0xffffffff
#define REVB_PS_DBG_DWATCH_ADDR1_EXISTING_BITS 0xffffffff
#define REVB_PS_DBG_DWATCH_ADDR1_WE false
#define REVB_PS_DBG_DWATCH_ADDR1_DBG_WE true
/* PS_DBG_DWATCH_ADDR1_1*/
#define REVB_PS_DBG_DWATCH_ADDR1_1_NUM 0x51
#define REVB_PS_DBG_DWATCH_ADDR1_1 0x510b
/* PS_DBG_DWATCH_ADDR1_2*/
#define REVB_PS_DBG_DWATCH_ADDR1_2_NUM 0x52
#define REVB_PS_DBG_DWATCH_ADDR1_2 0x520b
/* PS_DBG_DWATCH_ADDR1_3*/
#define REVB_PS_DBG_DWATCH_ADDR1_3_NUM 0x53
#define REVB_PS_DBG_DWATCH_ADDR1_3 0x530b
/* PS_DBG_DWATCH_ADDR2_0*/
#define REVB_PS_DBG_DWATCH_ADDR2_0_NUM 0x60
#define REVB_PS_DBG_DWATCH_ADDR2_0 0x600b
#define REVB_NUM_PS_DBG_DWATCH_ADDR2 0x4
#define REVB_PS_DBG_DWATCH_ADDR2_WRITE_MASK 0x0
#define REVB_PS_DBG_DWATCH_ADDR2_READ_MASK 0xffffffff
#define REVB_PS_DBG_DWATCH_ADDR2_DBG_WRITE_MASK 0xffffffff
#define REVB_PS_DBG_DWATCH_ADDR2_EXISTING_BITS 0xffffffff
#define REVB_PS_DBG_DWATCH_ADDR2_WE false
#define REVB_PS_DBG_DWATCH_ADDR2_DBG_WE true
/* PS_DBG_DWATCH_ADDR2_1*/
#define REVB_PS_DBG_DWATCH_ADDR2_1_NUM 0x61
#define REVB_PS_DBG_DWATCH_ADDR2_1 0x610b
/* PS_DBG_DWATCH_ADDR2_2*/
#define REVB_PS_DBG_DWATCH_ADDR2_2_NUM 0x62
#define REVB_PS_DBG_DWATCH_ADDR2_2 0x620b
/* PS_DBG_DWATCH_ADDR2_3*/
#define REVB_PS_DBG_DWATCH_ADDR2_3_NUM 0x63
#define REVB_PS_DBG_DWATCH_ADDR2_3 0x630b
/* PS_DBG_DWATCH_CTRL_0*/
#define REVB_PS_DBG_DWATCH_CTRL_0_NUM 0x70
#define REVB_PS_DBG_DWATCH_CTRL_0 0x700b
#define REVB_NUM_PS_DBG_DWATCH_CTRL 0x4
#define REVB_PS_DBG_DWATCH_CTRL_WRITE_MASK 0x0
#define REVB_PS_DBG_DWATCH_CTRL_READ_MASK 0xffffffff
#define REVB_PS_DBG_DWATCH_CTRL_DBG_WRITE_MASK 0xff0007
#define REVB_PS_DBG_DWATCH_CTRL_EXISTING_BITS 0xff0007
#define REVB_PS_DBG_DWATCH_CTRL_WE false
#define REVB_PS_DBG_DWATCH_CTRL_DBG_WE true
/* PS_DBG_DWATCH_CTRL_1*/
#define REVB_PS_DBG_DWATCH_CTRL_1_NUM 0x71
#define REVB_PS_DBG_DWATCH_CTRL_1 0x710b
/* PS_DBG_DWATCH_CTRL_2*/
#define REVB_PS_DBG_DWATCH_CTRL_2_NUM 0x72
#define REVB_PS_DBG_DWATCH_CTRL_2 0x720b
/* PS_DBG_DWATCH_CTRL_3*/
#define REVB_PS_DBG_DWATCH_CTRL_3_NUM 0x73
#define REVB_PS_DBG_DWATCH_CTRL_3 0x730b
/* PS_DBG_RWATCH_ADDR1_0*/
#define REVB_PS_DBG_RWATCH_ADDR1_0_NUM 0x80
#define REVB_PS_DBG_RWATCH_ADDR1_0 0x800b
#define REVB_NUM_PS_DBG_RWATCH_ADDR1 0x4
#define REVB_PS_DBG_RWATCH_ADDR1_WRITE_MASK 0x0
#define REVB_PS_DBG_RWATCH_ADDR1_READ_MASK 0xffffffff
#define REVB_PS_DBG_RWATCH_ADDR1_DBG_WRITE_MASK 0xffffffff
#define REVB_PS_DBG_RWATCH_ADDR1_EXISTING_BITS 0xffffffff
#define REVB_PS_DBG_RWATCH_ADDR1_WE false
#define REVB_PS_DBG_RWATCH_ADDR1_DBG_WE true
/* PS_DBG_RWATCH_ADDR1_1*/
#define REVB_PS_DBG_RWATCH_ADDR1_1_NUM 0x81
#define REVB_PS_DBG_RWATCH_ADDR1_1 0x810b
/* PS_DBG_RWATCH_ADDR1_2*/
#define REVB_PS_DBG_RWATCH_ADDR1_2_NUM 0x82
#define REVB_PS_DBG_RWATCH_ADDR1_2 0x820b
/* PS_DBG_RWATCH_ADDR1_3*/
#define REVB_PS_DBG_RWATCH_ADDR1_3_NUM 0x83
#define REVB_PS_DBG_RWATCH_ADDR1_3 0x830b
/* PS_DBG_RWATCH_ADDR2_0*/
#define REVB_PS_DBG_RWATCH_ADDR2_0_NUM 0x90
#define REVB_PS_DBG_RWATCH_ADDR2_0 0x900b
#define REVB_NUM_PS_DBG_RWATCH_ADDR2 0x4
#define REVB_PS_DBG_RWATCH_ADDR2_WRITE_MASK 0x0
#define REVB_PS_DBG_RWATCH_ADDR2_READ_MASK 0xffffffff
#define REVB_PS_DBG_RWATCH_ADDR2_DBG_WRITE_MASK 0xffffffff
#define REVB_PS_DBG_RWATCH_ADDR2_EXISTING_BITS 0xffffffff
#define REVB_PS_DBG_RWATCH_ADDR2_WE false
#define REVB_PS_DBG_RWATCH_ADDR2_DBG_WE true
/* PS_DBG_RWATCH_ADDR2_1*/
#define REVB_PS_DBG_RWATCH_ADDR2_1_NUM 0x91
#define REVB_PS_DBG_RWATCH_ADDR2_1 0x910b
/* PS_DBG_RWATCH_ADDR2_2*/
#define REVB_PS_DBG_RWATCH_ADDR2_2_NUM 0x92
#define REVB_PS_DBG_RWATCH_ADDR2_2 0x920b
/* PS_DBG_RWATCH_ADDR2_3*/
#define REVB_PS_DBG_RWATCH_ADDR2_3_NUM 0x93
#define REVB_PS_DBG_RWATCH_ADDR2_3 0x930b
/* PS_DBG_RWATCH_CTRL_0*/
#define REVB_PS_DBG_RWATCH_CTRL_0_NUM 0x9c
#define REVB_PS_DBG_RWATCH_CTRL_0 0x9c0b
#define REVB_NUM_PS_DBG_RWATCH_CTRL 0x4
#define REVB_PS_DBG_RWATCH_CTRL_WRITE_MASK 0x0
#define REVB_PS_DBG_RWATCH_CTRL_READ_MASK 0xffffffff
#define REVB_PS_DBG_RWATCH_CTRL_DBG_WRITE_MASK 0xff0003
#define REVB_PS_DBG_RWATCH_CTRL_EXISTING_BITS 0xff0003
#define REVB_PS_DBG_RWATCH_CTRL_WE false
#define REVB_PS_DBG_RWATCH_CTRL_DBG_WE true
/* PS_DBG_RWATCH_CTRL_1*/
#define REVB_PS_DBG_RWATCH_CTRL_1_NUM 0x9d
#define REVB_PS_DBG_RWATCH_CTRL_1 0x9d0b
/* PS_DBG_RWATCH_CTRL_2*/
#define REVB_PS_DBG_RWATCH_CTRL_2_NUM 0x9e
#define REVB_PS_DBG_RWATCH_CTRL_2 0x9e0b
/* PS_DBG_RWATCH_CTRL_3*/
#define REVB_PS_DBG_RWATCH_CTRL_3_NUM 0x9f
#define REVB_PS_DBG_RWATCH_CTRL_3 0x9f0b
/* PSWITCH_DEVICE_ID0*/
#define REVB_PSWITCH_DEVICE_ID0_NUM 0x0
#define REVB_PSWITCH_DEVICE_ID0 0xb
#define REVB_PSWITCH_DEVICE_ID0_WRITE_MASK 0x0
#define REVB_PSWITCH_DEVICE_ID0_READ_MASK 0xffffffff
#define REVB_PSWITCH_DEVICE_ID0_DBG_WRITE_MASK 0x0
#define REVB_PSWITCH_DEVICE_ID0_EXISTING_BITS 0xffffffff
#define REVB_PSWITCH_DEVICE_ID0_WE false
#define REVB_PSWITCH_DEVICE_ID0_DBG_WE false
/* PSWITCH_DEVICE_ID1*/
#define REVB_PSWITCH_DEVICE_ID1_NUM 0x1
#define REVB_PSWITCH_DEVICE_ID1 0x10b
#define REVB_PSWITCH_DEVICE_ID1_WRITE_MASK 0x0
#define REVB_PSWITCH_DEVICE_ID1_READ_MASK 0xffffffff
#define REVB_PSWITCH_DEVICE_ID1_DBG_WRITE_MASK 0x0
#define REVB_PSWITCH_DEVICE_ID1_EXISTING_BITS 0xffffffff
#define REVB_PSWITCH_DEVICE_ID1_WE false
#define REVB_PSWITCH_DEVICE_ID1_DBG_WE false
/* PSWITCH_DEVICE_ID2*/
#define REVB_PSWITCH_DEVICE_ID2_NUM 0x2
#define REVB_PSWITCH_DEVICE_ID2 0x20b
#define REVB_PSWITCH_DEVICE_ID2_WRITE_MASK 0x0
#define REVB_PSWITCH_DEVICE_ID2_READ_MASK 0xffffffff
#define REVB_PSWITCH_DEVICE_ID2_DBG_WRITE_MASK 0x0
#define REVB_PSWITCH_DEVICE_ID2_EXISTING_BITS 0xffff
#define REVB_PSWITCH_DEVICE_ID2_WE false
#define REVB_PSWITCH_DEVICE_ID2_DBG_WE false
/* PSWITCH_DEVICE_ID3*/
#define REVB_PSWITCH_DEVICE_ID3_NUM 0x3
#define REVB_PSWITCH_DEVICE_ID3 0x30b
#define REVB_PSWITCH_DEVICE_ID3_WRITE_MASK 0x0
#define REVB_PSWITCH_DEVICE_ID3_READ_MASK 0xffffffff
#define REVB_PSWITCH_DEVICE_ID3_DBG_WRITE_MASK 0x0
#define REVB_PSWITCH_DEVICE_ID3_EXISTING_BITS 0x0
#define REVB_PSWITCH_DEVICE_ID3_WE false
#define REVB_PSWITCH_DEVICE_ID3_DBG_WE false
/* PSWITCH_DBG_CTRL*/
#define REVB_PSWITCH_DBG_CTRL_NUM 0x4
#define REVB_PSWITCH_DBG_CTRL 0x40b
#define REVB_PSWITCH_DBG_CTRL_WRITE_MASK 0x0
#define REVB_PSWITCH_DBG_CTRL_READ_MASK 0xffffffff
#define REVB_PSWITCH_DBG_CTRL_DBG_WRITE_MASK 0x0
#define REVB_PSWITCH_DBG_CTRL_EXISTING_BITS 0x1
#define REVB_PSWITCH_DBG_CTRL_WE false
#define REVB_PSWITCH_DBG_CTRL_DBG_WE false
/* PSWITCH_DBG_INT*/
#define REVB_PSWITCH_DBG_INT_NUM 0x5
#define REVB_PSWITCH_DBG_INT 0x50b
#define REVB_PSWITCH_DBG_INT_WRITE_MASK 0x0
#define REVB_PSWITCH_DBG_INT_READ_MASK 0xffffffff
#define REVB_PSWITCH_DBG_INT_DBG_WRITE_MASK 0x0
#define REVB_PSWITCH_DBG_INT_EXISTING_BITS 0x3
#define REVB_PSWITCH_DBG_INT_WE false
#define REVB_PSWITCH_DBG_INT_DBG_WE false
/* PSWITCH_PLL_CLK_DIVIDER*/
#define REVB_PSWITCH_PLL_CLK_DIVIDER_NUM 0x6
#define REVB_PSWITCH_PLL_CLK_DIVIDER 0x60b
#define REVB_PSWITCH_PLL_CLK_DIVIDER_WRITE_MASK 0xff
#define REVB_PSWITCH_PLL_CLK_DIVIDER_READ_MASK 0xffffffff
#define REVB_PSWITCH_PLL_CLK_DIVIDER_DBG_WRITE_MASK 0xff
#define REVB_PSWITCH_PLL_CLK_DIVIDER_EXISTING_BITS 0xff
#define REVB_PSWITCH_PLL_CLK_DIVIDER_WE true
#define REVB_PSWITCH_PLL_CLK_DIVIDER_DBG_WE true
/* PSWITCH_SECU_CONFIG*/
#define REVB_PSWITCH_SECU_CONFIG_NUM 0x7
#define REVB_PSWITCH_SECU_CONFIG 0x70b
#define REVB_PSWITCH_SECU_CONFIG_WRITE_MASK 0x0
#define REVB_PSWITCH_SECU_CONFIG_READ_MASK 0xffffffff
#define REVB_PSWITCH_SECU_CONFIG_DBG_WRITE_MASK 0x0
#define REVB_PSWITCH_SECU_CONFIG_EXISTING_BITS 0xffffffff
#define REVB_PSWITCH_SECU_CONFIG_WE false
#define REVB_PSWITCH_SECU_CONFIG_DBG_WE false
/* PSWITCH_PLINK_0*/
#define REVB_PSWITCH_PLINK_0_NUM 0x10
#define REVB_PSWITCH_PLINK_0 0x100b
#define REVB_NUM_PSWITCH_PLINK 0x4
#define REVB_PSWITCH_PLINK_WRITE_MASK 0x0
#define REVB_PSWITCH_PLINK_READ_MASK 0xffffffff
#define REVB_PSWITCH_PLINK_DBG_WRITE_MASK 0x0
#define REVB_PSWITCH_PLINK_EXISTING_BITS 0x3ff0037
#define REVB_PSWITCH_PLINK_WE false
#define REVB_PSWITCH_PLINK_DBG_WE false
/* PSWITCH_PLINK_1*/
#define REVB_PSWITCH_PLINK_1_NUM 0x11
#define REVB_PSWITCH_PLINK_1 0x110b
/* PSWITCH_PLINK_2*/
#define REVB_PSWITCH_PLINK_2_NUM 0x12
#define REVB_PSWITCH_PLINK_2 0x120b
/* PSWITCH_PLINK_3*/
#define REVB_PSWITCH_PLINK_3_NUM 0x13
#define REVB_PSWITCH_PLINK_3 0x130b
/* PSWITCH_LLINK_0*/
#define REVB_PSWITCH_LLINK_0_NUM 0x80
#define REVB_PSWITCH_LLINK_0 0x800b
#define REVB_NUM_PSWITCH_LLINK 0x20
#define REVB_PSWITCH_LLINK_WRITE_MASK 0x0
#define REVB_PSWITCH_LLINK_READ_MASK 0xffffffff
#define REVB_PSWITCH_LLINK_DBG_WRITE_MASK 0x0
#define REVB_PSWITCH_LLINK_EXISTING_BITS 0x3ff0037
#define REVB_PSWITCH_LLINK_WE false
#define REVB_PSWITCH_LLINK_DBG_WE false
/* PSWITCH_LLINK_1*/
#define REVB_PSWITCH_LLINK_1_NUM 0x81
#define REVB_PSWITCH_LLINK_1 0x810b
/* PSWITCH_LLINK_2*/
#define REVB_PSWITCH_LLINK_2_NUM 0x82
#define REVB_PSWITCH_LLINK_2 0x820b
/* PSWITCH_LLINK_3*/
#define REVB_PSWITCH_LLINK_3_NUM 0x83
#define REVB_PSWITCH_LLINK_3 0x830b
/* PSWITCH_LLINK_4*/
#define REVB_PSWITCH_LLINK_4_NUM 0x84
#define REVB_PSWITCH_LLINK_4 0x840b
/* PSWITCH_LLINK_5*/
#define REVB_PSWITCH_LLINK_5_NUM 0x85
#define REVB_PSWITCH_LLINK_5 0x850b
/* PSWITCH_LLINK_6*/
#define REVB_PSWITCH_LLINK_6_NUM 0x86
#define REVB_PSWITCH_LLINK_6 0x860b
/* PSWITCH_LLINK_7*/
#define REVB_PSWITCH_LLINK_7_NUM 0x87
#define REVB_PSWITCH_LLINK_7 0x870b
/* PSWITCH_LLINK_8*/
#define REVB_PSWITCH_LLINK_8_NUM 0x88
#define REVB_PSWITCH_LLINK_8 0x880b
/* PSWITCH_LLINK_9*/
#define REVB_PSWITCH_LLINK_9_NUM 0x89
#define REVB_PSWITCH_LLINK_9 0x890b
/* PSWITCH_LLINK_10*/
#define REVB_PSWITCH_LLINK_10_NUM 0x8a
#define REVB_PSWITCH_LLINK_10 0x8a0b
/* PSWITCH_LLINK_11*/
#define REVB_PSWITCH_LLINK_11_NUM 0x8b
#define REVB_PSWITCH_LLINK_11 0x8b0b
/* PSWITCH_LLINK_12*/
#define REVB_PSWITCH_LLINK_12_NUM 0x8c
#define REVB_PSWITCH_LLINK_12 0x8c0b
/* PSWITCH_LLINK_13*/
#define REVB_PSWITCH_LLINK_13_NUM 0x8d
#define REVB_PSWITCH_LLINK_13 0x8d0b
/* PSWITCH_LLINK_14*/
#define REVB_PSWITCH_LLINK_14_NUM 0x8e
#define REVB_PSWITCH_LLINK_14 0x8e0b
/* PSWITCH_LLINK_15*/
#define REVB_PSWITCH_LLINK_15_NUM 0x8f
#define REVB_PSWITCH_LLINK_15 0x8f0b
/* PSWITCH_LLINK_16*/
#define REVB_PSWITCH_LLINK_16_NUM 0x90
#define REVB_PSWITCH_LLINK_16 0x900b
/* PSWITCH_LLINK_17*/
#define REVB_PSWITCH_LLINK_17_NUM 0x91
#define REVB_PSWITCH_LLINK_17 0x910b
/* PSWITCH_LLINK_18*/
#define REVB_PSWITCH_LLINK_18_NUM 0x92
#define REVB_PSWITCH_LLINK_18 0x920b
/* PSWITCH_LLINK_19*/
#define REVB_PSWITCH_LLINK_19_NUM 0x93
#define REVB_PSWITCH_LLINK_19 0x930b
/* PSWITCH_LLINK_20*/
#define REVB_PSWITCH_LLINK_20_NUM 0x94
#define REVB_PSWITCH_LLINK_20 0x940b
/* PSWITCH_LLINK_21*/
#define REVB_PSWITCH_LLINK_21_NUM 0x95
#define REVB_PSWITCH_LLINK_21 0x950b
/* PSWITCH_LLINK_22*/
#define REVB_PSWITCH_LLINK_22_NUM 0x96
#define REVB_PSWITCH_LLINK_22 0x960b
/* PSWITCH_LLINK_23*/
#define REVB_PSWITCH_LLINK_23_NUM 0x97
#define REVB_PSWITCH_LLINK_23 0x970b
/* PSWITCH_LLINK_24*/
#define REVB_PSWITCH_LLINK_24_NUM 0x98
#define REVB_PSWITCH_LLINK_24 0x980b
/* PSWITCH_LLINK_25*/
#define REVB_PSWITCH_LLINK_25_NUM 0x99
#define REVB_PSWITCH_LLINK_25 0x990b
/* PSWITCH_LLINK_26*/
#define REVB_PSWITCH_LLINK_26_NUM 0x9a
#define REVB_PSWITCH_LLINK_26 0x9a0b
/* PSWITCH_LLINK_27*/
#define REVB_PSWITCH_LLINK_27_NUM 0x9b
#define REVB_PSWITCH_LLINK_27 0x9b0b
/* PSWITCH_LLINK_28*/
#define REVB_PSWITCH_LLINK_28_NUM 0x9c
#define REVB_PSWITCH_LLINK_28 0x9c0b
/* PSWITCH_LLINK_29*/
#define REVB_PSWITCH_LLINK_29_NUM 0x9d
#define REVB_PSWITCH_LLINK_29 0x9d0b
/* PSWITCH_LLINK_30*/
#define REVB_PSWITCH_LLINK_30_NUM 0x9e
#define REVB_PSWITCH_LLINK_30 0x9e0b
/* PSWITCH_LLINK_31*/
#define REVB_PSWITCH_LLINK_31_NUM 0x9f
#define REVB_PSWITCH_LLINK_31 0x9f0b
/* SSWITCH_DEVICE_ID0*/
#define REVB_SSWITCH_DEVICE_ID0_NUM 0x0
#define REVB_SSWITCH_DEVICE_ID0 0xb
#define REVB_SSWITCH_DEVICE_ID0_WRITE_MASK 0x0
#define REVB_SSWITCH_DEVICE_ID0_READ_MASK 0xffffffff
#define REVB_SSWITCH_DEVICE_ID0_DBG_WRITE_MASK 0x0
#define REVB_SSWITCH_DEVICE_ID0_EXISTING_BITS 0xffffff
#define REVB_SSWITCH_DEVICE_ID0_WE false
#define REVB_SSWITCH_DEVICE_ID0_DBG_WE false
/* SSWITCH_DEVICE_ID1*/
#define REVB_SSWITCH_DEVICE_ID1_NUM 0x1
#define REVB_SSWITCH_DEVICE_ID1 0x10b
#define REVB_SSWITCH_DEVICE_ID1_WRITE_MASK 0x0
#define REVB_SSWITCH_DEVICE_ID1_READ_MASK 0xffffffff
#define REVB_SSWITCH_DEVICE_ID1_DBG_WRITE_MASK 0x0
#define REVB_SSWITCH_DEVICE_ID1_EXISTING_BITS 0xffffff
#define REVB_SSWITCH_DEVICE_ID1_WE false
#define REVB_SSWITCH_DEVICE_ID1_DBG_WE false
/* SSWITCH_DEVICE_ID2*/
#define REVB_SSWITCH_DEVICE_ID2_NUM 0x2
#define REVB_SSWITCH_DEVICE_ID2 0x20b
#define REVB_SSWITCH_DEVICE_ID2_WRITE_MASK 0x0
#define REVB_SSWITCH_DEVICE_ID2_READ_MASK 0xffffffff
#define REVB_SSWITCH_DEVICE_ID2_DBG_WRITE_MASK 0x0
#define REVB_SSWITCH_DEVICE_ID2_EXISTING_BITS 0x0
#define REVB_SSWITCH_DEVICE_ID2_WE false
#define REVB_SSWITCH_DEVICE_ID2_DBG_WE false
/* SSWITCH_DEVICE_ID3*/
#define REVB_SSWITCH_DEVICE_ID3_NUM 0x3
#define REVB_SSWITCH_DEVICE_ID3 0x30b
#define REVB_SSWITCH_DEVICE_ID3_WRITE_MASK 0x0
#define REVB_SSWITCH_DEVICE_ID3_READ_MASK 0xffffffff
#define REVB_SSWITCH_DEVICE_ID3_DBG_WRITE_MASK 0x0
#define REVB_SSWITCH_DEVICE_ID3_EXISTING_BITS 0x0
#define REVB_SSWITCH_DEVICE_ID3_WE false
#define REVB_SSWITCH_DEVICE_ID3_DBG_WE false
/* SSWITCH_NODE_CONFIG*/
#define REVB_SSWITCH_NODE_CONFIG_NUM 0x4
#define REVB_SSWITCH_NODE_CONFIG 0x40b
#define REVB_SSWITCH_NODE_CONFIG_WRITE_MASK 0x3
#define REVB_SSWITCH_NODE_CONFIG_READ_MASK 0xffffffff
#define REVB_SSWITCH_NODE_CONFIG_DBG_WRITE_MASK 0x3
#define REVB_SSWITCH_NODE_CONFIG_EXISTING_BITS 0x3
#define REVB_SSWITCH_NODE_CONFIG_WE true
#define REVB_SSWITCH_NODE_CONFIG_DBG_WE true
/* SSWITCH_NODE_ID*/
#define REVB_SSWITCH_NODE_ID_NUM 0x5
#define REVB_SSWITCH_NODE_ID 0x50b
#define REVB_SSWITCH_NODE_ID_WRITE_MASK 0xff
#define REVB_SSWITCH_NODE_ID_READ_MASK 0xffffffff
#define REVB_SSWITCH_NODE_ID_DBG_WRITE_MASK 0xff
#define REVB_SSWITCH_NODE_ID_EXISTING_BITS 0xff
#define REVB_SSWITCH_NODE_ID_WE true
#define REVB_SSWITCH_NODE_ID_DBG_WE true
/* SSWITCH_PLL_CTL*/
#define REVB_SSWITCH_PLL_CTL_NUM 0x6
#define REVB_SSWITCH_PLL_CTL 0x60b
#define REVB_SSWITCH_PLL_CTL_WRITE_MASK 0x1ffff1f
#define REVB_SSWITCH_PLL_CTL_READ_MASK 0xffffffff
#define REVB_SSWITCH_PLL_CTL_DBG_WRITE_MASK 0x1ffff1f
#define REVB_SSWITCH_PLL_CTL_EXISTING_BITS 0x1ffff1f
#define REVB_SSWITCH_PLL_CTL_WE true
#define REVB_SSWITCH_PLL_CTL_DBG_WE true
/* SSWITCH_CLK_DIVIDER*/
#define REVB_SSWITCH_CLK_DIVIDER_NUM 0x7
#define REVB_SSWITCH_CLK_DIVIDER 0x70b
#define REVB_SSWITCH_CLK_DIVIDER_WRITE_MASK 0xff
#define REVB_SSWITCH_CLK_DIVIDER_READ_MASK 0xffffffff
#define REVB_SSWITCH_CLK_DIVIDER_DBG_WRITE_MASK 0xff
#define REVB_SSWITCH_CLK_DIVIDER_EXISTING_BITS 0xff
#define REVB_SSWITCH_CLK_DIVIDER_WE true
#define REVB_SSWITCH_CLK_DIVIDER_DBG_WE true
/* SSWITCH_REF_CLK_DIVIDER*/
#define REVB_SSWITCH_REF_CLK_DIVIDER_NUM 0x8
#define REVB_SSWITCH_REF_CLK_DIVIDER 0x80b
#define REVB_SSWITCH_REF_CLK_DIVIDER_WRITE_MASK 0xff
#define REVB_SSWITCH_REF_CLK_DIVIDER_READ_MASK 0xffffffff
#define REVB_SSWITCH_REF_CLK_DIVIDER_DBG_WRITE_MASK 0xff
#define REVB_SSWITCH_REF_CLK_DIVIDER_EXISTING_BITS 0xff
#define REVB_SSWITCH_REF_CLK_DIVIDER_WE true
#define REVB_SSWITCH_REF_CLK_DIVIDER_DBG_WE true
/* SSWITCH_XCORE0_GLOBAL_DEBUG_CONFIG*/
#define REVB_SSWITCH_XCORE0_GLOBAL_DEBUG_CONFIG_NUM 0x10
#define REVB_SSWITCH_XCORE0_GLOBAL_DEBUG_CONFIG 0x100b
#define REVB_SSWITCH_XCORE0_GLOBAL_DEBUG_CONFIG_WRITE_MASK 0x3
#define REVB_SSWITCH_XCORE0_GLOBAL_DEBUG_CONFIG_READ_MASK 0xffffffff
#define REVB_SSWITCH_XCORE0_GLOBAL_DEBUG_CONFIG_DBG_WRITE_MASK 0x3
#define REVB_SSWITCH_XCORE0_GLOBAL_DEBUG_CONFIG_EXISTING_BITS 0x3
#define REVB_SSWITCH_XCORE0_GLOBAL_DEBUG_CONFIG_WE true
#define REVB_SSWITCH_XCORE0_GLOBAL_DEBUG_CONFIG_DBG_WE true
/* SSWITCH_XCORE1_GLOBAL_DEBUG_CONFIG*/
#define REVB_SSWITCH_XCORE1_GLOBAL_DEBUG_CONFIG_NUM 0x11
#define REVB_SSWITCH_XCORE1_GLOBAL_DEBUG_CONFIG 0x110b
#define REVB_SSWITCH_XCORE1_GLOBAL_DEBUG_CONFIG_WRITE_MASK 0x3
#define REVB_SSWITCH_XCORE1_GLOBAL_DEBUG_CONFIG_READ_MASK 0xffffffff
#define REVB_SSWITCH_XCORE1_GLOBAL_DEBUG_CONFIG_DBG_WRITE_MASK 0x3
#define REVB_SSWITCH_XCORE1_GLOBAL_DEBUG_CONFIG_EXISTING_BITS 0x3
#define REVB_SSWITCH_XCORE1_GLOBAL_DEBUG_CONFIG_WE true
#define REVB_SSWITCH_XCORE1_GLOBAL_DEBUG_CONFIG_DBG_WE true
/* SSWITCH_XCORE2_GLOBAL_DEBUG_CONFIG*/
#define REVB_SSWITCH_XCORE2_GLOBAL_DEBUG_CONFIG_NUM 0x12
#define REVB_SSWITCH_XCORE2_GLOBAL_DEBUG_CONFIG 0x120b
#define REVB_SSWITCH_XCORE2_GLOBAL_DEBUG_CONFIG_WRITE_MASK 0x3
#define REVB_SSWITCH_XCORE2_GLOBAL_DEBUG_CONFIG_READ_MASK 0xffffffff
#define REVB_SSWITCH_XCORE2_GLOBAL_DEBUG_CONFIG_DBG_WRITE_MASK 0x3
#define REVB_SSWITCH_XCORE2_GLOBAL_DEBUG_CONFIG_EXISTING_BITS 0x3
#define REVB_SSWITCH_XCORE2_GLOBAL_DEBUG_CONFIG_WE true
#define REVB_SSWITCH_XCORE2_GLOBAL_DEBUG_CONFIG_DBG_WE true
/* SSWITCH_XCORE3_GLOBAL_DEBUG_CONFIG*/
#define REVB_SSWITCH_XCORE3_GLOBAL_DEBUG_CONFIG_NUM 0x13
#define REVB_SSWITCH_XCORE3_GLOBAL_DEBUG_CONFIG 0x130b
#define REVB_SSWITCH_XCORE3_GLOBAL_DEBUG_CONFIG_WRITE_MASK 0x3
#define REVB_SSWITCH_XCORE3_GLOBAL_DEBUG_CONFIG_READ_MASK 0xffffffff
#define REVB_SSWITCH_XCORE3_GLOBAL_DEBUG_CONFIG_DBG_WRITE_MASK 0x3
#define REVB_SSWITCH_XCORE3_GLOBAL_DEBUG_CONFIG_EXISTING_BITS 0x3
#define REVB_SSWITCH_XCORE3_GLOBAL_DEBUG_CONFIG_WE true
#define REVB_SSWITCH_XCORE3_GLOBAL_DEBUG_CONFIG_DBG_WE true
/* SSWITCH_GLOBAL_DEBUG_SOURCE*/
#define REVB_SSWITCH_GLOBAL_DEBUG_SOURCE_NUM 0x1f
#define REVB_SSWITCH_GLOBAL_DEBUG_SOURCE 0x1f0b
#define REVB_SSWITCH_GLOBAL_DEBUG_SOURCE_WRITE_MASK 0x1f
#define REVB_SSWITCH_GLOBAL_DEBUG_SOURCE_READ_MASK 0xffffffff
#define REVB_SSWITCH_GLOBAL_DEBUG_SOURCE_DBG_WRITE_MASK 0x1f
#define REVB_SSWITCH_GLOBAL_DEBUG_SOURCE_EXISTING_BITS 0x1f
#define REVB_SSWITCH_GLOBAL_DEBUG_SOURCE_WE false
#define REVB_SSWITCH_GLOBAL_DEBUG_SOURCE_DBG_WE false
/* SSWITCH_SLINK_0*/
#define REVB_SSWITCH_SLINK_0_NUM 0x20
#define REVB_SSWITCH_SLINK_0 0x200b
#define REVB_NUM_SSWITCH_SLINK 0x10
#define REVB_SSWITCH_SLINK_WRITE_MASK 0x730
#define REVB_SSWITCH_SLINK_READ_MASK 0xffffffff
#define REVB_SSWITCH_SLINK_DBG_WRITE_MASK 0x730
#define REVB_SSWITCH_SLINK_EXISTING_BITS 0x3ff0737
#define REVB_SSWITCH_SLINK_WE true
#define REVB_SSWITCH_SLINK_DBG_WE true
/* SSWITCH_SLINK_1*/
#define REVB_SSWITCH_SLINK_1_NUM 0x21
#define REVB_SSWITCH_SLINK_1 0x210b
/* SSWITCH_SLINK_2*/
#define REVB_SSWITCH_SLINK_2_NUM 0x22
#define REVB_SSWITCH_SLINK_2 0x220b
/* SSWITCH_SLINK_3*/
#define REVB_SSWITCH_SLINK_3_NUM 0x23
#define REVB_SSWITCH_SLINK_3 0x230b
/* SSWITCH_SLINK_4*/
#define REVB_SSWITCH_SLINK_4_NUM 0x24
#define REVB_SSWITCH_SLINK_4 0x240b
/* SSWITCH_SLINK_5*/
#define REVB_SSWITCH_SLINK_5_NUM 0x25
#define REVB_SSWITCH_SLINK_5 0x250b
/* SSWITCH_SLINK_6*/
#define REVB_SSWITCH_SLINK_6_NUM 0x26
#define REVB_SSWITCH_SLINK_6 0x260b
/* SSWITCH_SLINK_7*/
#define REVB_SSWITCH_SLINK_7_NUM 0x27
#define REVB_SSWITCH_SLINK_7 0x270b
/* SSWITCH_SLINK_8*/
#define REVB_SSWITCH_SLINK_8_NUM 0x28
#define REVB_SSWITCH_SLINK_8 0x280b
/* SSWITCH_SLINK_9*/
#define REVB_SSWITCH_SLINK_9_NUM 0x29
#define REVB_SSWITCH_SLINK_9 0x290b
/* SSWITCH_SLINK_10*/
#define REVB_SSWITCH_SLINK_10_NUM 0x2a
#define REVB_SSWITCH_SLINK_10 0x2a0b
/* SSWITCH_SLINK_11*/
#define REVB_SSWITCH_SLINK_11_NUM 0x2b
#define REVB_SSWITCH_SLINK_11 0x2b0b
/* SSWITCH_SLINK_12*/
#define REVB_SSWITCH_SLINK_12_NUM 0x2c
#define REVB_SSWITCH_SLINK_12 0x2c0b
/* SSWITCH_SLINK_13*/
#define REVB_SSWITCH_SLINK_13_NUM 0x2d
#define REVB_SSWITCH_SLINK_13 0x2d0b
/* SSWITCH_SLINK_14*/
#define REVB_SSWITCH_SLINK_14_NUM 0x2e
#define REVB_SSWITCH_SLINK_14 0x2e0b
/* SSWITCH_SLINK_15*/
#define REVB_SSWITCH_SLINK_15_NUM 0x2f
#define REVB_SSWITCH_SLINK_15 0x2f0b
/* SSWITCH_PLINK_0*/
#define REVB_SSWITCH_PLINK_0_NUM 0x40
#define REVB_SSWITCH_PLINK_0 0x400b
#define REVB_NUM_SSWITCH_PLINK 0x10
#define REVB_SSWITCH_PLINK_WRITE_MASK 0x0
#define REVB_SSWITCH_PLINK_READ_MASK 0xffffffff
#define REVB_SSWITCH_PLINK_DBG_WRITE_MASK 0x0
#define REVB_SSWITCH_PLINK_EXISTING_BITS 0x3ff0037
#define REVB_SSWITCH_PLINK_WE false
#define REVB_SSWITCH_PLINK_DBG_WE false
/* SSWITCH_PLINK_1*/
#define REVB_SSWITCH_PLINK_1_NUM 0x41
#define REVB_SSWITCH_PLINK_1 0x410b
/* SSWITCH_PLINK_2*/
#define REVB_SSWITCH_PLINK_2_NUM 0x42
#define REVB_SSWITCH_PLINK_2 0x420b
/* SSWITCH_PLINK_3*/
#define REVB_SSWITCH_PLINK_3_NUM 0x43
#define REVB_SSWITCH_PLINK_3 0x430b
/* SSWITCH_PLINK_4*/
#define REVB_SSWITCH_PLINK_4_NUM 0x44
#define REVB_SSWITCH_PLINK_4 0x440b
/* SSWITCH_PLINK_5*/
#define REVB_SSWITCH_PLINK_5_NUM 0x45
#define REVB_SSWITCH_PLINK_5 0x450b
/* SSWITCH_PLINK_6*/
#define REVB_SSWITCH_PLINK_6_NUM 0x46
#define REVB_SSWITCH_PLINK_6 0x460b
/* SSWITCH_PLINK_7*/
#define REVB_SSWITCH_PLINK_7_NUM 0x47
#define REVB_SSWITCH_PLINK_7 0x470b
/* SSWITCH_PLINK_8*/
#define REVB_SSWITCH_PLINK_8_NUM 0x48
#define REVB_SSWITCH_PLINK_8 0x480b
/* SSWITCH_PLINK_9*/
#define REVB_SSWITCH_PLINK_9_NUM 0x49
#define REVB_SSWITCH_PLINK_9 0x490b
/* SSWITCH_PLINK_10*/
#define REVB_SSWITCH_PLINK_10_NUM 0x4a
#define REVB_SSWITCH_PLINK_10 0x4a0b
/* SSWITCH_PLINK_11*/
#define REVB_SSWITCH_PLINK_11_NUM 0x4b
#define REVB_SSWITCH_PLINK_11 0x4b0b
/* SSWITCH_PLINK_12*/
#define REVB_SSWITCH_PLINK_12_NUM 0x4c
#define REVB_SSWITCH_PLINK_12 0x4c0b
/* SSWITCH_PLINK_13*/
#define REVB_SSWITCH_PLINK_13_NUM 0x4d
#define REVB_SSWITCH_PLINK_13 0x4d0b
/* SSWITCH_PLINK_14*/
#define REVB_SSWITCH_PLINK_14_NUM 0x4e
#define REVB_SSWITCH_PLINK_14 0x4e0b
/* SSWITCH_PLINK_15*/
#define REVB_SSWITCH_PLINK_15_NUM 0x4f
#define REVB_SSWITCH_PLINK_15 0x4f0b
/* SSWITCH_XLINK_0*/
#define REVB_SSWITCH_XLINK_0_NUM 0x80
#define REVB_SSWITCH_XLINK_0 0x800b
#define REVB_NUM_SSWITCH_XLINK 0x10
#define REVB_SSWITCH_XLINK_WRITE_MASK 0xc0010f0f
#define REVB_SSWITCH_XLINK_READ_MASK 0xffffffff
#define REVB_SSWITCH_XLINK_DBG_WRITE_MASK 0xc0010f0f
#define REVB_SSWITCH_XLINK_EXISTING_BITS 0xc1010f0f
#define REVB_SSWITCH_XLINK_WE true
#define REVB_SSWITCH_XLINK_DBG_WE true
/* SSWITCH_XLINK_1*/
#define REVB_SSWITCH_XLINK_1_NUM 0x81
#define REVB_SSWITCH_XLINK_1 0x810b
/* SSWITCH_XLINK_2*/
#define REVB_SSWITCH_XLINK_2_NUM 0x82
#define REVB_SSWITCH_XLINK_2 0x820b
/* SSWITCH_XLINK_3*/
#define REVB_SSWITCH_XLINK_3_NUM 0x83
#define REVB_SSWITCH_XLINK_3 0x830b
/* SSWITCH_XLINK_4*/
#define REVB_SSWITCH_XLINK_4_NUM 0x84
#define REVB_SSWITCH_XLINK_4 0x840b
/* SSWITCH_XLINK_5*/
#define REVB_SSWITCH_XLINK_5_NUM 0x85
#define REVB_SSWITCH_XLINK_5 0x850b
/* SSWITCH_XLINK_6*/
#define REVB_SSWITCH_XLINK_6_NUM 0x86
#define REVB_SSWITCH_XLINK_6 0x860b
/* SSWITCH_XLINK_7*/
#define REVB_SSWITCH_XLINK_7_NUM 0x87
#define REVB_SSWITCH_XLINK_7 0x870b
/* SSWITCH_XLINK_8*/
#define REVB_SSWITCH_XLINK_8_NUM 0x88
#define REVB_SSWITCH_XLINK_8 0x880b
/* SSWITCH_XLINK_9*/
#define REVB_SSWITCH_XLINK_9_NUM 0x89
#define REVB_SSWITCH_XLINK_9 0x890b
/* SSWITCH_XLINK_10*/
#define REVB_SSWITCH_XLINK_10_NUM 0x8a
#define REVB_SSWITCH_XLINK_10 0x8a0b
/* SSWITCH_XLINK_11*/
#define REVB_SSWITCH_XLINK_11_NUM 0x8b
#define REVB_SSWITCH_XLINK_11 0x8b0b
/* SSWITCH_XLINK_12*/
#define REVB_SSWITCH_XLINK_12_NUM 0x8c
#define REVB_SSWITCH_XLINK_12 0x8c0b
/* SSWITCH_XLINK_13*/
#define REVB_SSWITCH_XLINK_13_NUM 0x8d
#define REVB_SSWITCH_XLINK_13 0x8d0b
/* SSWITCH_XLINK_14*/
#define REVB_SSWITCH_XLINK_14_NUM 0x8e
#define REVB_SSWITCH_XLINK_14 0x8e0b
/* SSWITCH_XLINK_15*/
#define REVB_SSWITCH_XLINK_15_NUM 0x8f
#define REVB_SSWITCH_XLINK_15 0x8f0b
/* SR_EEBLE - When 1 events are enabled for the thread.*/
#define REVB_SR_EEBLE_SHIFT 0x0
#define REVB_SR_EEBLE_SIZE 0x1
#define REVB_SR_EEBLE_MASK (((1 << REVB_SR_EEBLE_SIZE) - 1) << REVB_SR_EEBLE_SHIFT)
#define REVB_SR_EEBLE(x) (((x) & REVB_SR_EEBLE_MASK) >> REVB_SR_EEBLE_SHIFT)
#define REVB_SR_EEBLE_SET(x, v) (((x) & ~REVB_SR_EEBLE_MASK) | (((v) << REVB_SR_EEBLE_SHIFT) & REVB_SR_EEBLE_MASK))
/* SR_IEBLE - When 1 interrupts are enabled for the thread.*/
#define REVB_SR_IEBLE_SHIFT 0x1
#define REVB_SR_IEBLE_SIZE 0x1
#define REVB_SR_IEBLE_MASK (((1 << REVB_SR_IEBLE_SIZE) - 1) << REVB_SR_IEBLE_SHIFT)
#define REVB_SR_IEBLE(x) (((x) & REVB_SR_IEBLE_MASK) >> REVB_SR_IEBLE_SHIFT)
#define REVB_SR_IEBLE_SET(x, v) (((x) & ~REVB_SR_IEBLE_MASK) | (((v) << REVB_SR_IEBLE_SHIFT) & REVB_SR_IEBLE_MASK))
/* SR_INENB - 1 when in an event enabling sequence.*/
#define REVB_SR_INENB_SHIFT 0x2
#define REVB_SR_INENB_SIZE 0x1
#define REVB_SR_INENB_MASK (((1 << REVB_SR_INENB_SIZE) - 1) << REVB_SR_INENB_SHIFT)
#define REVB_SR_INENB(x) (((x) & REVB_SR_INENB_MASK) >> REVB_SR_INENB_SHIFT)
#define REVB_SR_INENB_SET(x, v) (((x) & ~REVB_SR_INENB_MASK) | (((v) << REVB_SR_INENB_SHIFT) & REVB_SR_INENB_MASK))
/* SR_ININT - 1 when in an interrupt handler.*/
#define REVB_SR_ININT_SHIFT 0x3
#define REVB_SR_ININT_SIZE 0x1
#define REVB_SR_ININT_MASK (((1 << REVB_SR_ININT_SIZE) - 1) << REVB_SR_ININT_SHIFT)
#define REVB_SR_ININT(x) (((x) & REVB_SR_ININT_MASK) >> REVB_SR_ININT_SHIFT)
#define REVB_SR_ININT_SET(x, v) (((x) & ~REVB_SR_ININT_MASK) | (((v) << REVB_SR_ININT_SHIFT) & REVB_SR_ININT_MASK))
/* SR_INK - 1 when in kernel mode.*/
#define REVB_SR_INK_SHIFT 0x4
#define REVB_SR_INK_SIZE 0x1
#define REVB_SR_INK_MASK (((1 << REVB_SR_INK_SIZE) - 1) << REVB_SR_INK_SHIFT)
#define REVB_SR_INK(x) (((x) & REVB_SR_INK_MASK) >> REVB_SR_INK_SHIFT)
#define REVB_SR_INK_SET(x, v) (((x) & ~REVB_SR_INK_MASK) | (((v) << REVB_SR_INK_SHIFT) & REVB_SR_INK_MASK))
/* SR_SINK - Copy of the SSR INK bit.*/
#define REVB_SR_SINK_SHIFT 0x5
#define REVB_SR_SINK_SIZE 0x1
#define REVB_SR_SINK_MASK (((1 << REVB_SR_SINK_SIZE) - 1) << REVB_SR_SINK_SHIFT)
#define REVB_SR_SINK(x) (((x) & REVB_SR_SINK_MASK) >> REVB_SR_SINK_SHIFT)
#define REVB_SR_SINK_SET(x, v) (((x) & ~REVB_SR_SINK_MASK) | (((v) << REVB_SR_SINK_SHIFT) & REVB_SR_SINK_MASK))
/* SR_WAITING - When 1 the thread is paused waiting for events, a lock or another resource.*/
#define REVB_SR_WAITING_SHIFT 0x6
#define REVB_SR_WAITING_SIZE 0x1
#define REVB_SR_WAITING_MASK (((1 << REVB_SR_WAITING_SIZE) - 1) << REVB_SR_WAITING_SHIFT)
#define REVB_SR_WAITING(x) (((x) & REVB_SR_WAITING_MASK) >> REVB_SR_WAITING_SHIFT)
#define REVB_SR_WAITING_SET(x, v) (((x) & ~REVB_SR_WAITING_MASK) | (((v) << REVB_SR_WAITING_SHIFT) & REVB_SR_WAITING_MASK))
/* SR_FAST - When 1 the thread is in fast mode and will continually issue.*/
#define REVB_SR_FAST_SHIFT 0x7
#define REVB_SR_FAST_SIZE 0x1
#define REVB_SR_FAST_MASK (((1 << REVB_SR_FAST_SIZE) - 1) << REVB_SR_FAST_SHIFT)
#define REVB_SR_FAST(x) (((x) & REVB_SR_FAST_MASK) >> REVB_SR_FAST_SHIFT)
#define REVB_SR_FAST_SET(x, v) (((x) & ~REVB_SR_FAST_MASK) | (((v) << REVB_SR_FAST_SHIFT) & REVB_SR_FAST_MASK))
/* ID_ID - Number of the thread.*/
#define REVB_ID_ID_SHIFT 0x0
#define REVB_ID_ID_SIZE 0x6
#define REVB_ID_ID_MASK (((1 << REVB_ID_ID_SIZE) - 1) << REVB_ID_ID_SHIFT)
#define REVB_ID_ID(x) (((x) & REVB_ID_ID_MASK) >> REVB_ID_ID_SHIFT)
#define REVB_ID_ID_SET(x, v) (((x) & ~REVB_ID_ID_MASK) | (((v) << REVB_ID_ID_SHIFT) & REVB_ID_ID_MASK))
/* EXCEPTION_TYPE - The exception type.*/
#define REVB_EXCEPTION_TYPE_SHIFT 0x0
#define REVB_EXCEPTION_TYPE_SIZE 0x4
#define REVB_EXCEPTION_TYPE_MASK (((1 << REVB_EXCEPTION_TYPE_SIZE) - 1) << REVB_EXCEPTION_TYPE_SHIFT)
#define REVB_EXCEPTION_TYPE(x) (((x) & REVB_EXCEPTION_TYPE_MASK) >> REVB_EXCEPTION_TYPE_SHIFT)
#define REVB_EXCEPTION_TYPE_SET(x, v) (((x) & ~REVB_EXCEPTION_TYPE_MASK) | (((v) << REVB_EXCEPTION_TYPE_SHIFT) & REVB_EXCEPTION_TYPE_MASK))
/* DBG_T_NUM_NUM - */
#define REVB_DBG_T_NUM_NUM_SHIFT 0x0
#define REVB_DBG_T_NUM_NUM_SIZE 0x8
#define REVB_DBG_T_NUM_NUM_MASK (((1 << REVB_DBG_T_NUM_NUM_SIZE) - 1) << REVB_DBG_T_NUM_NUM_SHIFT)
#define REVB_DBG_T_NUM_NUM(x) (((x) & REVB_DBG_T_NUM_NUM_MASK) >> REVB_DBG_T_NUM_NUM_SHIFT)
#define REVB_DBG_T_NUM_NUM_SET(x, v) (((x) & ~REVB_DBG_T_NUM_NUM_MASK) | (((v) << REVB_DBG_T_NUM_NUM_SHIFT) & REVB_DBG_T_NUM_NUM_MASK))
/* DBG_T_REG_REG - */
#define REVB_DBG_T_REG_REG_SHIFT 0x0
#define REVB_DBG_T_REG_REG_SIZE 0x5
#define REVB_DBG_T_REG_REG_MASK (((1 << REVB_DBG_T_REG_REG_SIZE) - 1) << REVB_DBG_T_REG_REG_SHIFT)
#define REVB_DBG_T_REG_REG(x) (((x) & REVB_DBG_T_REG_REG_MASK) >> REVB_DBG_T_REG_REG_SHIFT)
#define REVB_DBG_T_REG_REG_SET(x, v) (((x) & ~REVB_DBG_T_REG_REG_MASK) | (((v) << REVB_DBG_T_REG_REG_SHIFT) & REVB_DBG_T_REG_REG_MASK))
/* BRK_ENABLE - When 1 the instruction breakpoint is enabled.*/
#define REVB_BRK_ENABLE_SHIFT 0x0
#define REVB_BRK_ENABLE_SIZE 0x1
#define REVB_BRK_ENABLE_MASK (((1 << REVB_BRK_ENABLE_SIZE) - 1) << REVB_BRK_ENABLE_SHIFT)
#define REVB_BRK_ENABLE(x) (((x) & REVB_BRK_ENABLE_MASK) >> REVB_BRK_ENABLE_SHIFT)
#define REVB_BRK_ENABLE_SET(x, v) (((x) & ~REVB_BRK_ENABLE_MASK) | (((v) << REVB_BRK_ENABLE_SHIFT) & REVB_BRK_ENABLE_MASK))
/* ALL_BITS - */
#define REVB_ALL_BITS_SHIFT 0x0
#define REVB_ALL_BITS_SIZE 0x20
#define REVB_ALL_BITS_MASK (((1 << REVB_ALL_BITS_SIZE) - 1) << REVB_ALL_BITS_SHIFT)
#define REVB_ALL_BITS(x) (((x) & REVB_ALL_BITS_MASK) >> REVB_ALL_BITS_SHIFT)
#define REVB_ALL_BITS_SET(x, v) (((x) & ~REVB_ALL_BITS_MASK) | (((v) << REVB_ALL_BITS_SHIFT) & REVB_ALL_BITS_MASK))
/* KEP_ADDRESS_BITS - */
#define REVB_KEP_ADDRESS_BITS_SHIFT 0x7
#define REVB_KEP_ADDRESS_BITS_SIZE 0x19
#define REVB_KEP_ADDRESS_BITS_MASK (((1 << REVB_KEP_ADDRESS_BITS_SIZE) - 1) << REVB_KEP_ADDRESS_BITS_SHIFT)
#define REVB_KEP_ADDRESS_BITS(x) (((x) & REVB_KEP_ADDRESS_BITS_MASK) >> REVB_KEP_ADDRESS_BITS_SHIFT)
#define REVB_KEP_ADDRESS_BITS_SET(x, v) (((x) & ~REVB_KEP_ADDRESS_BITS_MASK) | (((v) << REVB_KEP_ADDRESS_BITS_SHIFT) & REVB_KEP_ADDRESS_BITS_MASK))
/* WORD_ADDRESS_BITS - */
#define REVB_WORD_ADDRESS_BITS_SHIFT 0x2
#define REVB_WORD_ADDRESS_BITS_SIZE 0x1e
#define REVB_WORD_ADDRESS_BITS_MASK (((1 << REVB_WORD_ADDRESS_BITS_SIZE) - 1) << REVB_WORD_ADDRESS_BITS_SHIFT)
#define REVB_WORD_ADDRESS_BITS(x) (((x) & REVB_WORD_ADDRESS_BITS_MASK) >> REVB_WORD_ADDRESS_BITS_SHIFT)
#define REVB_WORD_ADDRESS_BITS_SET(x, v) (((x) & ~REVB_WORD_ADDRESS_BITS_MASK) | (((v) << REVB_WORD_ADDRESS_BITS_SHIFT) & REVB_WORD_ADDRESS_BITS_MASK))
/* VECTOR_BASE - The most significant bits for all event and interrupt vectors.*/
#define REVB_VECTOR_BASE_SHIFT 0x10
#define REVB_VECTOR_BASE_SIZE 0x10
#define REVB_VECTOR_BASE_MASK (((1 << REVB_VECTOR_BASE_SIZE) - 1) << REVB_VECTOR_BASE_SHIFT)
#define REVB_VECTOR_BASE(x) (((x) & REVB_VECTOR_BASE_MASK) >> REVB_VECTOR_BASE_SHIFT)
#define REVB_VECTOR_BASE_SET(x, v) (((x) & ~REVB_VECTOR_BASE_MASK) | (((v) << REVB_VECTOR_BASE_SHIFT) & REVB_VECTOR_BASE_MASK))
/* IBRK_CONDITION - When 0 break when PC == IBREAK_ADDR. When 1 = break when PC != IBREAK_ADDR.*/
#define REVB_IBRK_CONDITION_SHIFT 0x1
#define REVB_IBRK_CONDITION_SIZE 0x1
#define REVB_IBRK_CONDITION_MASK (((1 << REVB_IBRK_CONDITION_SIZE) - 1) << REVB_IBRK_CONDITION_SHIFT)
#define REVB_IBRK_CONDITION(x) (((x) & REVB_IBRK_CONDITION_MASK) >> REVB_IBRK_CONDITION_SHIFT)
#define REVB_IBRK_CONDITION_SET(x, v) (((x) & ~REVB_IBRK_CONDITION_MASK) | (((v) << REVB_IBRK_CONDITION_SHIFT) & REVB_IBRK_CONDITION_MASK))
/* DBRK_CONDITION - Determines the break condition: 0 = A AND B, 1 = A OR B.*/
#define REVB_DBRK_CONDITION_SHIFT 0x1
#define REVB_DBRK_CONDITION_SIZE 0x1
#define REVB_DBRK_CONDITION_MASK (((1 << REVB_DBRK_CONDITION_SIZE) - 1) << REVB_DBRK_CONDITION_SHIFT)
#define REVB_DBRK_CONDITION(x) (((x) & REVB_DBRK_CONDITION_MASK) >> REVB_DBRK_CONDITION_SHIFT)
#define REVB_DBRK_CONDITION_SET(x, v) (((x) & ~REVB_DBRK_CONDITION_MASK) | (((v) << REVB_DBRK_CONDITION_SHIFT) & REVB_DBRK_CONDITION_MASK))
/* RBRK_CONDITION - When 0 break when condition A is met. When 1 = break when condition B is met.*/
#define REVB_RBRK_CONDITION_SHIFT 0x1
#define REVB_RBRK_CONDITION_SIZE 0x1
#define REVB_RBRK_CONDITION_MASK (((1 << REVB_RBRK_CONDITION_SIZE) - 1) << REVB_RBRK_CONDITION_SHIFT)
#define REVB_RBRK_CONDITION(x) (((x) & REVB_RBRK_CONDITION_MASK) >> REVB_RBRK_CONDITION_SHIFT)
#define REVB_RBRK_CONDITION_SET(x, v) (((x) & ~REVB_RBRK_CONDITION_MASK) | (((v) << REVB_RBRK_CONDITION_SHIFT) & REVB_RBRK_CONDITION_MASK))
/* BRK_LOAD - When 1 the breakpoints will be be triggered on loads.*/
#define REVB_BRK_LOAD_SHIFT 0x2
#define REVB_BRK_LOAD_SIZE 0x1
#define REVB_BRK_LOAD_MASK (((1 << REVB_BRK_LOAD_SIZE) - 1) << REVB_BRK_LOAD_SHIFT)
#define REVB_BRK_LOAD(x) (((x) & REVB_BRK_LOAD_MASK) >> REVB_BRK_LOAD_SHIFT)
#define REVB_BRK_LOAD_SET(x, v) (((x) & ~REVB_BRK_LOAD_MASK) | (((v) << REVB_BRK_LOAD_SHIFT) & REVB_BRK_LOAD_MASK))
/* BRK_THREADS - A bit for each thread in the machine allowing the breakpoint to be enabled individually for each thread.*/
#define REVB_BRK_THREADS_SHIFT 0x10
#define REVB_BRK_THREADS_SIZE 0x8
#define REVB_BRK_THREADS_MASK (((1 << REVB_BRK_THREADS_SIZE) - 1) << REVB_BRK_THREADS_SHIFT)
#define REVB_BRK_THREADS(x) (((x) & REVB_BRK_THREADS_MASK) >> REVB_BRK_THREADS_SHIFT)
#define REVB_BRK_THREADS_SET(x, v) (((x) & ~REVB_BRK_THREADS_MASK) | (((v) << REVB_BRK_THREADS_SHIFT) & REVB_BRK_THREADS_MASK))
/* DBG_TYPE_CAUSE - Indicates whether the interrupt was caused by =HOST=, ==[[XcoreArchInstructions#DCALL][DCALL]]==, =IBREAK=, =DWATCH=, =RWATCH=.*/
#define REVB_DBG_TYPE_CAUSE_SHIFT 0x0
#define REVB_DBG_TYPE_CAUSE_SIZE 0x3
#define REVB_DBG_TYPE_CAUSE_MASK (((1 << REVB_DBG_TYPE_CAUSE_SIZE) - 1) << REVB_DBG_TYPE_CAUSE_SHIFT)
#define REVB_DBG_TYPE_CAUSE(x) (((x) & REVB_DBG_TYPE_CAUSE_MASK) >> REVB_DBG_TYPE_CAUSE_SHIFT)
#define REVB_DBG_TYPE_CAUSE_SET(x, v) (((x) & ~REVB_DBG_TYPE_CAUSE_MASK) | (((v) << REVB_DBG_TYPE_CAUSE_SHIFT) & REVB_DBG_TYPE_CAUSE_MASK))
/* DBG_TYPE_T_NUM - Number of thread which caused the debug interrupt (always 0 in the case of =HOST=).*/
#define REVB_DBG_TYPE_T_NUM_SHIFT 0x8
#define REVB_DBG_TYPE_T_NUM_SIZE 0x8
#define REVB_DBG_TYPE_T_NUM_MASK (((1 << REVB_DBG_TYPE_T_NUM_SIZE) - 1) << REVB_DBG_TYPE_T_NUM_SHIFT)
#define REVB_DBG_TYPE_T_NUM(x) (((x) & REVB_DBG_TYPE_T_NUM_MASK) >> REVB_DBG_TYPE_T_NUM_SHIFT)
#define REVB_DBG_TYPE_T_NUM_SET(x, v) (((x) & ~REVB_DBG_TYPE_T_NUM_MASK) | (((v) << REVB_DBG_TYPE_T_NUM_SHIFT) & REVB_DBG_TYPE_T_NUM_MASK))
/* DBG_TYPE_HW_NUM - Number of the hardware breakpoint/watchpoint which caused the interrupt (always 0 for =HOST= and =DCALL=). If multiple breakpoints/watchpoints trigger at once, the lowest number is taken.*/
#define REVB_DBG_TYPE_HW_NUM_SHIFT 0x10
#define REVB_DBG_TYPE_HW_NUM_SIZE 0x2
#define REVB_DBG_TYPE_HW_NUM_MASK (((1 << REVB_DBG_TYPE_HW_NUM_SIZE) - 1) << REVB_DBG_TYPE_HW_NUM_SHIFT)
#define REVB_DBG_TYPE_HW_NUM(x) (((x) & REVB_DBG_TYPE_HW_NUM_MASK) >> REVB_DBG_TYPE_HW_NUM_SHIFT)
#define REVB_DBG_TYPE_HW_NUM_SET(x, v) (((x) & ~REVB_DBG_TYPE_HW_NUM_MASK) | (((v) << REVB_DBG_TYPE_HW_NUM_SHIFT) & REVB_DBG_TYPE_HW_NUM_MASK))
/* DBG_RUN_CTRL_STOP - 1-hot vector defining which threads are stopped when not in debug mode. Every bit which is set prevents the respective thread from running.*/
#define REVB_DBG_RUN_CTRL_STOP_SHIFT 0x0
#define REVB_DBG_RUN_CTRL_STOP_SIZE 0x8
#define REVB_DBG_RUN_CTRL_STOP_MASK (((1 << REVB_DBG_RUN_CTRL_STOP_SIZE) - 1) << REVB_DBG_RUN_CTRL_STOP_SHIFT)
#define REVB_DBG_RUN_CTRL_STOP(x) (((x) & REVB_DBG_RUN_CTRL_STOP_MASK) >> REVB_DBG_RUN_CTRL_STOP_SHIFT)
#define REVB_DBG_RUN_CTRL_STOP_SET(x, v) (((x) & ~REVB_DBG_RUN_CTRL_STOP_MASK) | (((v) << REVB_DBG_RUN_CTRL_STOP_SHIFT) & REVB_DBG_RUN_CTRL_STOP_MASK))
/* XCORE_CTRL0_TIMER_CLK - When 0 the timers are clocked off the reference clock. When 1 they are clocked off the XCore clock.*/
#define REVB_XCORE_CTRL0_TIMER_CLK_SHIFT 0x0
#define REVB_XCORE_CTRL0_TIMER_CLK_SIZE 0x1
#define REVB_XCORE_CTRL0_TIMER_CLK_MASK (((1 << REVB_XCORE_CTRL0_TIMER_CLK_SIZE) - 1) << REVB_XCORE_CTRL0_TIMER_CLK_SHIFT)
#define REVB_XCORE_CTRL0_TIMER_CLK(x) (((x) & REVB_XCORE_CTRL0_TIMER_CLK_MASK) >> REVB_XCORE_CTRL0_TIMER_CLK_SHIFT)
#define REVB_XCORE_CTRL0_TIMER_CLK_SET(x, v) (((x) & ~REVB_XCORE_CTRL0_TIMER_CLK_MASK) | (((v) << REVB_XCORE_CTRL0_TIMER_CLK_SHIFT) & REVB_XCORE_CTRL0_TIMER_CLK_MASK))
/* XCORE_CTRL0_USB_ENABLE - Enable the ULPI Hardware support module*/
#define REVB_XCORE_CTRL0_USB_ENABLE_SHIFT 0x1
#define REVB_XCORE_CTRL0_USB_ENABLE_SIZE 0x1
#define REVB_XCORE_CTRL0_USB_ENABLE_MASK (((1 << REVB_XCORE_CTRL0_USB_ENABLE_SIZE) - 1) << REVB_XCORE_CTRL0_USB_ENABLE_SHIFT)
#define REVB_XCORE_CTRL0_USB_ENABLE(x) (((x) & REVB_XCORE_CTRL0_USB_ENABLE_MASK) >> REVB_XCORE_CTRL0_USB_ENABLE_SHIFT)
#define REVB_XCORE_CTRL0_USB_ENABLE_SET(x, v) (((x) & ~REVB_XCORE_CTRL0_USB_ENABLE_MASK) | (((v) << REVB_XCORE_CTRL0_USB_ENABLE_SHIFT) & REVB_XCORE_CTRL0_USB_ENABLE_MASK))
/* XCORE_CTRL0_USB_MODE - .*/
#define REVB_XCORE_CTRL0_USB_MODE_SHIFT 0x2
#define REVB_XCORE_CTRL0_USB_MODE_SIZE 0x1
#define REVB_XCORE_CTRL0_USB_MODE_MASK (((1 << REVB_XCORE_CTRL0_USB_MODE_SIZE) - 1) << REVB_XCORE_CTRL0_USB_MODE_SHIFT)
#define REVB_XCORE_CTRL0_USB_MODE(x) (((x) & REVB_XCORE_CTRL0_USB_MODE_MASK) >> REVB_XCORE_CTRL0_USB_MODE_SHIFT)
#define REVB_XCORE_CTRL0_USB_MODE_SET(x, v) (((x) & ~REVB_XCORE_CTRL0_USB_MODE_MASK) | (((v) << REVB_XCORE_CTRL0_USB_MODE_SHIFT) & REVB_XCORE_CTRL0_USB_MODE_MASK))
/* BOOT_CONFIG_BOOT_MODE - The boot mode.*/
#define REVB_BOOT_CONFIG_BOOT_MODE_SHIFT 0x0
#define REVB_BOOT_CONFIG_BOOT_MODE_SIZE 0x8
#define REVB_BOOT_CONFIG_BOOT_MODE_MASK (((1 << REVB_BOOT_CONFIG_BOOT_MODE_SIZE) - 1) << REVB_BOOT_CONFIG_BOOT_MODE_SHIFT)
#define REVB_BOOT_CONFIG_BOOT_MODE(x) (((x) & REVB_BOOT_CONFIG_BOOT_MODE_MASK) >> REVB_BOOT_CONFIG_BOOT_MODE_SHIFT)
#define REVB_BOOT_CONFIG_BOOT_MODE_SET(x, v) (((x) & ~REVB_BOOT_CONFIG_BOOT_MODE_MASK) | (((v) << REVB_BOOT_CONFIG_BOOT_MODE_SHIFT) & REVB_BOOT_CONFIG_BOOT_MODE_MASK))
/* BOOT_CONFIG_SECURE_BOOT - Overwrite BOOT_MODE.*/
#define REVB_BOOT_CONFIG_SECURE_BOOT_SHIFT 0x8
#define REVB_BOOT_CONFIG_SECURE_BOOT_SIZE 0x1
#define REVB_BOOT_CONFIG_SECURE_BOOT_MASK (((1 << REVB_BOOT_CONFIG_SECURE_BOOT_SIZE) - 1) << REVB_BOOT_CONFIG_SECURE_BOOT_SHIFT)
#define REVB_BOOT_CONFIG_SECURE_BOOT(x) (((x) & REVB_BOOT_CONFIG_SECURE_BOOT_MASK) >> REVB_BOOT_CONFIG_SECURE_BOOT_SHIFT)
#define REVB_BOOT_CONFIG_SECURE_BOOT_SET(x, v) (((x) & ~REVB_BOOT_CONFIG_SECURE_BOOT_MASK) | (((v) << REVB_BOOT_CONFIG_SECURE_BOOT_SHIFT) & REVB_BOOT_CONFIG_SECURE_BOOT_MASK))
/* BOOT_CONFIG_PROCESSOR - Processor number.*/
#define REVB_BOOT_CONFIG_PROCESSOR_SHIFT 0x10
#define REVB_BOOT_CONFIG_PROCESSOR_SIZE 0x8
#define REVB_BOOT_CONFIG_PROCESSOR_MASK (((1 << REVB_BOOT_CONFIG_PROCESSOR_SIZE) - 1) << REVB_BOOT_CONFIG_PROCESSOR_SHIFT)
#define REVB_BOOT_CONFIG_PROCESSOR(x) (((x) & REVB_BOOT_CONFIG_PROCESSOR_MASK) >> REVB_BOOT_CONFIG_PROCESSOR_SHIFT)
#define REVB_BOOT_CONFIG_PROCESSOR_SET(x, v) (((x) & ~REVB_BOOT_CONFIG_PROCESSOR_MASK) | (((v) << REVB_BOOT_CONFIG_PROCESSOR_SHIFT) & REVB_BOOT_CONFIG_PROCESSOR_MASK))
/* BOOT_STATUS_LEDS - Boot status LED value.*/
#define REVB_BOOT_STATUS_LEDS_SHIFT 0x0
#define REVB_BOOT_STATUS_LEDS_SIZE 0x4
#define REVB_BOOT_STATUS_LEDS_MASK (((1 << REVB_BOOT_STATUS_LEDS_SIZE) - 1) << REVB_BOOT_STATUS_LEDS_SHIFT)
#define REVB_BOOT_STATUS_LEDS(x) (((x) & REVB_BOOT_STATUS_LEDS_MASK) >> REVB_BOOT_STATUS_LEDS_SHIFT)
#define REVB_BOOT_STATUS_LEDS_SET(x, v) (((x) & ~REVB_BOOT_STATUS_LEDS_MASK) | (((v) << REVB_BOOT_STATUS_LEDS_SHIFT) & REVB_BOOT_STATUS_LEDS_MASK))
/* BOOT_STATUS_BITS - Other boot status LED bits.*/
#define REVB_BOOT_STATUS_BITS_SHIFT 0x4
#define REVB_BOOT_STATUS_BITS_SIZE 0x1c
#define REVB_BOOT_STATUS_BITS_MASK (((1 << REVB_BOOT_STATUS_BITS_SIZE) - 1) << REVB_BOOT_STATUS_BITS_SHIFT)
#define REVB_BOOT_STATUS_BITS(x) (((x) & REVB_BOOT_STATUS_BITS_MASK) >> REVB_BOOT_STATUS_BITS_SHIFT)
#define REVB_BOOT_STATUS_BITS_SET(x, v) (((x) & ~REVB_BOOT_STATUS_BITS_MASK) | (((v) << REVB_BOOT_STATUS_BITS_SHIFT) & REVB_BOOT_STATUS_BITS_MASK))
/* PLL_CLK_DIVIDER - Clock divider.*/
#define REVB_PLL_CLK_DIVIDER_SHIFT 0x0
#define REVB_PLL_CLK_DIVIDER_SIZE 0x8
#define REVB_PLL_CLK_DIVIDER_MASK (((1 << REVB_PLL_CLK_DIVIDER_SIZE) - 1) << REVB_PLL_CLK_DIVIDER_SHIFT)
#define REVB_PLL_CLK_DIVIDER(x) (((x) & REVB_PLL_CLK_DIVIDER_MASK) >> REVB_PLL_CLK_DIVIDER_SHIFT)
#define REVB_PLL_CLK_DIVIDER_SET(x, v) (((x) & ~REVB_PLL_CLK_DIVIDER_MASK) | (((v) << REVB_PLL_CLK_DIVIDER_SHIFT) & REVB_PLL_CLK_DIVIDER_MASK))
/* THREAD_CTRL0_INUSE - Returns 1 when the thread is in use, 0 otherwise.*/
#define REVB_THREAD_CTRL0_INUSE_SHIFT 0x0
#define REVB_THREAD_CTRL0_INUSE_SIZE 0x1
#define REVB_THREAD_CTRL0_INUSE_MASK (((1 << REVB_THREAD_CTRL0_INUSE_SIZE) - 1) << REVB_THREAD_CTRL0_INUSE_SHIFT)
#define REVB_THREAD_CTRL0_INUSE(x) (((x) & REVB_THREAD_CTRL0_INUSE_MASK) >> REVB_THREAD_CTRL0_INUSE_SHIFT)
#define REVB_THREAD_CTRL0_INUSE_SET(x, v) (((x) & ~REVB_THREAD_CTRL0_INUSE_MASK) | (((v) << REVB_THREAD_CTRL0_INUSE_SHIFT) & REVB_THREAD_CTRL0_INUSE_MASK))
/* THREAD_CTRL0_MSYNC - 1 when the thread is msyncing, 0 otherwise.*/
#define REVB_THREAD_CTRL0_MSYNC_SHIFT 0x1
#define REVB_THREAD_CTRL0_MSYNC_SIZE 0x1
#define REVB_THREAD_CTRL0_MSYNC_MASK (((1 << REVB_THREAD_CTRL0_MSYNC_SIZE) - 1) << REVB_THREAD_CTRL0_MSYNC_SHIFT)
#define REVB_THREAD_CTRL0_MSYNC(x) (((x) & REVB_THREAD_CTRL0_MSYNC_MASK) >> REVB_THREAD_CTRL0_MSYNC_SHIFT)
#define REVB_THREAD_CTRL0_MSYNC_SET(x, v) (((x) & ~REVB_THREAD_CTRL0_MSYNC_MASK) | (((v) << REVB_THREAD_CTRL0_MSYNC_SHIFT) & REVB_THREAD_CTRL0_MSYNC_MASK))
/* THREAD_CTRL0_SSYNC - 1 when the thread is ssyncing, 0 otherwise.*/
#define REVB_THREAD_CTRL0_SSYNC_SHIFT 0x2
#define REVB_THREAD_CTRL0_SSYNC_SIZE 0x1
#define REVB_THREAD_CTRL0_SSYNC_MASK (((1 << REVB_THREAD_CTRL0_SSYNC_SIZE) - 1) << REVB_THREAD_CTRL0_SSYNC_SHIFT)
#define REVB_THREAD_CTRL0_SSYNC(x) (((x) & REVB_THREAD_CTRL0_SSYNC_MASK) >> REVB_THREAD_CTRL0_SSYNC_SHIFT)
#define REVB_THREAD_CTRL0_SSYNC_SET(x, v) (((x) & ~REVB_THREAD_CTRL0_SSYNC_MASK) | (((v) << REVB_THREAD_CTRL0_SSYNC_SHIFT) & REVB_THREAD_CTRL0_SSYNC_MASK))
/* THREAD_CTRL0_MASTER - Returns the ID of this thread's master.*/
#define REVB_THREAD_CTRL0_MASTER_SHIFT 0x8
#define REVB_THREAD_CTRL0_MASTER_SIZE 0x8
#define REVB_THREAD_CTRL0_MASTER_MASK (((1 << REVB_THREAD_CTRL0_MASTER_SIZE) - 1) << REVB_THREAD_CTRL0_MASTER_SHIFT)
#define REVB_THREAD_CTRL0_MASTER(x) (((x) & REVB_THREAD_CTRL0_MASTER_MASK) >> REVB_THREAD_CTRL0_MASTER_SHIFT)
#define REVB_THREAD_CTRL0_MASTER_SET(x, v) (((x) & ~REVB_THREAD_CTRL0_MASTER_MASK) | (((v) << REVB_THREAD_CTRL0_MASTER_SHIFT) & REVB_THREAD_CTRL0_MASTER_MASK))
/* PORT_CTRL0_INUSE - Returns 1 when the port is in use, 0 otherwise.*/
#define REVB_PORT_CTRL0_INUSE_SHIFT 0x0
#define REVB_PORT_CTRL0_INUSE_SIZE 0x1
#define REVB_PORT_CTRL0_INUSE_MASK (((1 << REVB_PORT_CTRL0_INUSE_SIZE) - 1) << REVB_PORT_CTRL0_INUSE_SHIFT)
#define REVB_PORT_CTRL0_INUSE(x) (((x) & REVB_PORT_CTRL0_INUSE_MASK) >> REVB_PORT_CTRL0_INUSE_SHIFT)
#define REVB_PORT_CTRL0_INUSE_SET(x, v) (((x) & ~REVB_PORT_CTRL0_INUSE_MASK) | (((v) << REVB_PORT_CTRL0_INUSE_SHIFT) & REVB_PORT_CTRL0_INUSE_MASK))
/* PORT_CTRL0_IE_MODE - 0 when this port will cause events, 1 when it will raise interrupts. It is controlled using the ==[[XcoreArchInstructions#SETC][SETC]]== instruction.*/
#define REVB_PORT_CTRL0_IE_MODE_SHIFT 0x1
#define REVB_PORT_CTRL0_IE_MODE_SIZE 0x1
#define REVB_PORT_CTRL0_IE_MODE_MASK (((1 << REVB_PORT_CTRL0_IE_MODE_SIZE) - 1) << REVB_PORT_CTRL0_IE_MODE_SHIFT)
#define REVB_PORT_CTRL0_IE_MODE(x) (((x) & REVB_PORT_CTRL0_IE_MODE_MASK) >> REVB_PORT_CTRL0_IE_MODE_SHIFT)
#define REVB_PORT_CTRL0_IE_MODE_SET(x, v) (((x) & ~REVB_PORT_CTRL0_IE_MODE_MASK) | (((v) << REVB_PORT_CTRL0_IE_MODE_SHIFT) & REVB_PORT_CTRL0_IE_MODE_MASK))
/* PORT_CTRL0_IE_ENABLED - 1 when events or interrupts on this port are active. It is set when an  ==[[XcoreArchInstructions#EEU][EEU]]== is executed. It is cleared when a ==[[XcoreArchInstructions#EDU][EDU]]== or ==[[XcoreArchInstructions#CLRE][CLRE]]== is executed. The ==[[XcoreArchInstructions#EET][EET]]== and ==[[XcoreArchInstructions#EEF][EEF]]== will either set or clear the bit depending on the contents of the condition register.*/
#define REVB_PORT_CTRL0_IE_ENABLED_SHIFT 0x2
#define REVB_PORT_CTRL0_IE_ENABLED_SIZE 0x1
#define REVB_PORT_CTRL0_IE_ENABLED_MASK (((1 << REVB_PORT_CTRL0_IE_ENABLED_SIZE) - 1) << REVB_PORT_CTRL0_IE_ENABLED_SHIFT)
#define REVB_PORT_CTRL0_IE_ENABLED(x) (((x) & REVB_PORT_CTRL0_IE_ENABLED_MASK) >> REVB_PORT_CTRL0_IE_ENABLED_SHIFT)
#define REVB_PORT_CTRL0_IE_ENABLED_SET(x, v) (((x) & ~REVB_PORT_CTRL0_IE_ENABLED_MASK) | (((v) << REVB_PORT_CTRL0_IE_ENABLED_SHIFT) & REVB_PORT_CTRL0_IE_ENABLED_MASK))
/* PORT_CTRL0_DIRECTION - 0 when it is in input mode, 1 when this port is in output mode.*/
#define REVB_PORT_CTRL0_DIRECTION_SHIFT 0x3
#define REVB_PORT_CTRL0_DIRECTION_SIZE 0x1
#define REVB_PORT_CTRL0_DIRECTION_MASK (((1 << REVB_PORT_CTRL0_DIRECTION_SIZE) - 1) << REVB_PORT_CTRL0_DIRECTION_SHIFT)
#define REVB_PORT_CTRL0_DIRECTION(x) (((x) & REVB_PORT_CTRL0_DIRECTION_MASK) >> REVB_PORT_CTRL0_DIRECTION_SHIFT)
#define REVB_PORT_CTRL0_DIRECTION_SET(x, v) (((x) & ~REVB_PORT_CTRL0_DIRECTION_MASK) | (((v) << REVB_PORT_CTRL0_DIRECTION_SHIFT) & REVB_PORT_CTRL0_DIRECTION_MASK))
/* PORT_CTRL0_COND - Shows the current condition of the port. The condition is set using the ==[[XcoreArchInstructions#SETC][SETC]]== instruction.*/
#define REVB_PORT_CTRL0_COND_SHIFT 0x4
#define REVB_PORT_CTRL0_COND_SIZE 0x4
#define REVB_PORT_CTRL0_COND_MASK (((1 << REVB_PORT_CTRL0_COND_SIZE) - 1) << REVB_PORT_CTRL0_COND_SHIFT)
#define REVB_PORT_CTRL0_COND(x) (((x) & REVB_PORT_CTRL0_COND_MASK) >> REVB_PORT_CTRL0_COND_SHIFT)
#define REVB_PORT_CTRL0_COND_SET(x, v) (((x) & ~REVB_PORT_CTRL0_COND_MASK) | (((v) << REVB_PORT_CTRL0_COND_SHIFT) & REVB_PORT_CTRL0_COND_MASK))
/* PORT_CTRL0_MASTER_SLAVE - 0 when the port is a master, 1 when it is a slave.*/
#define REVB_PORT_CTRL0_MASTER_SLAVE_SHIFT 0x8
#define REVB_PORT_CTRL0_MASTER_SLAVE_SIZE 0x1
#define REVB_PORT_CTRL0_MASTER_SLAVE_MASK (((1 << REVB_PORT_CTRL0_MASTER_SLAVE_SIZE) - 1) << REVB_PORT_CTRL0_MASTER_SLAVE_SHIFT)
#define REVB_PORT_CTRL0_MASTER_SLAVE(x) (((x) & REVB_PORT_CTRL0_MASTER_SLAVE_MASK) >> REVB_PORT_CTRL0_MASTER_SLAVE_SHIFT)
#define REVB_PORT_CTRL0_MASTER_SLAVE_SET(x, v) (((x) & ~REVB_PORT_CTRL0_MASTER_SLAVE_MASK) | (((v) << REVB_PORT_CTRL0_MASTER_SLAVE_SHIFT) & REVB_PORT_CTRL0_MASTER_SLAVE_MASK))
/* PORT_CTRL0_BUFFERS - When 0 there is no buffering between the port and pins. When 1 there is buffering between the port and instructions.*/
#define REVB_PORT_CTRL0_BUFFERS_SHIFT 0x9
#define REVB_PORT_CTRL0_BUFFERS_SIZE 0x1
#define REVB_PORT_CTRL0_BUFFERS_MASK (((1 << REVB_PORT_CTRL0_BUFFERS_SIZE) - 1) << REVB_PORT_CTRL0_BUFFERS_SHIFT)
#define REVB_PORT_CTRL0_BUFFERS(x) (((x) & REVB_PORT_CTRL0_BUFFERS_MASK) >> REVB_PORT_CTRL0_BUFFERS_SHIFT)
#define REVB_PORT_CTRL0_BUFFERS_SET(x, v) (((x) & ~REVB_PORT_CTRL0_BUFFERS_MASK) | (((v) << REVB_PORT_CTRL0_BUFFERS_SHIFT) & REVB_PORT_CTRL0_BUFFERS_MASK))
/* PORT_CTRL0_READY_MODE - 0 - no ready signals used, 1 - strobed port, 2 - handshaken port*/
#define REVB_PORT_CTRL0_READY_MODE_SHIFT 0xa
#define REVB_PORT_CTRL0_READY_MODE_SIZE 0x2
#define REVB_PORT_CTRL0_READY_MODE_MASK (((1 << REVB_PORT_CTRL0_READY_MODE_SIZE) - 1) << REVB_PORT_CTRL0_READY_MODE_SHIFT)
#define REVB_PORT_CTRL0_READY_MODE(x) (((x) & REVB_PORT_CTRL0_READY_MODE_MASK) >> REVB_PORT_CTRL0_READY_MODE_SHIFT)
#define REVB_PORT_CTRL0_READY_MODE_SET(x, v) (((x) & ~REVB_PORT_CTRL0_READY_MODE_MASK) | (((v) << REVB_PORT_CTRL0_READY_MODE_SHIFT) & REVB_PORT_CTRL0_READY_MODE_MASK))
/* PORT_CTRL0_PORT_TYPE - 0 - data port, 1 - clock port (1-bit ports only), 2 - ready port (1-bit ports only)*/
#define REVB_PORT_CTRL0_PORT_TYPE_SHIFT 0xc
#define REVB_PORT_CTRL0_PORT_TYPE_SIZE 0x2
#define REVB_PORT_CTRL0_PORT_TYPE_MASK (((1 << REVB_PORT_CTRL0_PORT_TYPE_SIZE) - 1) << REVB_PORT_CTRL0_PORT_TYPE_SHIFT)
#define REVB_PORT_CTRL0_PORT_TYPE(x) (((x) & REVB_PORT_CTRL0_PORT_TYPE_MASK) >> REVB_PORT_CTRL0_PORT_TYPE_SHIFT)
#define REVB_PORT_CTRL0_PORT_TYPE_SET(x, v) (((x) & ~REVB_PORT_CTRL0_PORT_TYPE_MASK) | (((v) << REVB_PORT_CTRL0_PORT_TYPE_SHIFT) & REVB_PORT_CTRL0_PORT_TYPE_MASK))
/* PORT_CTRL0_INVERT - When 1 the port is inverted, otherwise it is not inverted. Only possible on 1-bit ports.*/
#define REVB_PORT_CTRL0_INVERT_SHIFT 0xe
#define REVB_PORT_CTRL0_INVERT_SIZE 0x1
#define REVB_PORT_CTRL0_INVERT_MASK (((1 << REVB_PORT_CTRL0_INVERT_SIZE) - 1) << REVB_PORT_CTRL0_INVERT_SHIFT)
#define REVB_PORT_CTRL0_INVERT(x) (((x) & REVB_PORT_CTRL0_INVERT_MASK) >> REVB_PORT_CTRL0_INVERT_SHIFT)
#define REVB_PORT_CTRL0_INVERT_SET(x, v) (((x) & ~REVB_PORT_CTRL0_INVERT_MASK) | (((v) << REVB_PORT_CTRL0_INVERT_SHIFT) & REVB_PORT_CTRL0_INVERT_MASK))
/* PORT_CTRL0_SDELAY - 0 when the input uses the rising edge, 1 when it uses the falling edge of the clock.*/
#define REVB_PORT_CTRL0_SDELAY_SHIFT 0xf
#define REVB_PORT_CTRL0_SDELAY_SIZE 0x1
#define REVB_PORT_CTRL0_SDELAY_MASK (((1 << REVB_PORT_CTRL0_SDELAY_SIZE) - 1) << REVB_PORT_CTRL0_SDELAY_SHIFT)
#define REVB_PORT_CTRL0_SDELAY(x) (((x) & REVB_PORT_CTRL0_SDELAY_MASK) >> REVB_PORT_CTRL0_SDELAY_SHIFT)
#define REVB_PORT_CTRL0_SDELAY_SET(x, v) (((x) & ~REVB_PORT_CTRL0_SDELAY_MASK) | (((v) << REVB_PORT_CTRL0_SDELAY_SHIFT) & REVB_PORT_CTRL0_SDELAY_MASK))
/* PORT_CTRL0_EV_VALID - 1 when the Environment Vector is valid. When invalid, the resourceId is used as the environment vector. The environment vector is set using the ==[[XcoreArchInstructions#SETEV][SETEV]]== instruction.*/
#define REVB_PORT_CTRL0_EV_VALID_SHIFT 0x16
#define REVB_PORT_CTRL0_EV_VALID_SIZE 0x1
#define REVB_PORT_CTRL0_EV_VALID_MASK (((1 << REVB_PORT_CTRL0_EV_VALID_SIZE) - 1) << REVB_PORT_CTRL0_EV_VALID_SHIFT)
#define REVB_PORT_CTRL0_EV_VALID(x) (((x) & REVB_PORT_CTRL0_EV_VALID_MASK) >> REVB_PORT_CTRL0_EV_VALID_SHIFT)
#define REVB_PORT_CTRL0_EV_VALID_SET(x, v) (((x) & ~REVB_PORT_CTRL0_EV_VALID_MASK) | (((v) << REVB_PORT_CTRL0_EV_VALID_SHIFT) & REVB_PORT_CTRL0_EV_VALID_MASK))
/* PORT_CTRL0_T_WAITING - 1 when there is a thread waiting to be unblocked by this port.*/
#define REVB_PORT_CTRL0_T_WAITING_SHIFT 0x17
#define REVB_PORT_CTRL0_T_WAITING_SIZE 0x1
#define REVB_PORT_CTRL0_T_WAITING_MASK (((1 << REVB_PORT_CTRL0_T_WAITING_SIZE) - 1) << REVB_PORT_CTRL0_T_WAITING_SHIFT)
#define REVB_PORT_CTRL0_T_WAITING(x) (((x) & REVB_PORT_CTRL0_T_WAITING_MASK) >> REVB_PORT_CTRL0_T_WAITING_SHIFT)
#define REVB_PORT_CTRL0_T_WAITING_SET(x, v) (((x) & ~REVB_PORT_CTRL0_T_WAITING_MASK) | (((v) << REVB_PORT_CTRL0_T_WAITING_SHIFT) & REVB_PORT_CTRL0_T_WAITING_MASK))
/* PORT_CTRL0_T_NUM - Number of the thread waiting for events or to be unblocked by this port.*/
#define REVB_PORT_CTRL0_T_NUM_SHIFT 0x18
#define REVB_PORT_CTRL0_T_NUM_SIZE 0x8
#define REVB_PORT_CTRL0_T_NUM_MASK (((1 << REVB_PORT_CTRL0_T_NUM_SIZE) - 1) << REVB_PORT_CTRL0_T_NUM_SHIFT)
#define REVB_PORT_CTRL0_T_NUM(x) (((x) & REVB_PORT_CTRL0_T_NUM_MASK) >> REVB_PORT_CTRL0_T_NUM_SHIFT)
#define REVB_PORT_CTRL0_T_NUM_SET(x, v) (((x) & ~REVB_PORT_CTRL0_T_NUM_MASK) | (((v) << REVB_PORT_CTRL0_T_NUM_SHIFT) & REVB_PORT_CTRL0_T_NUM_MASK))
/* PORT_CTRL1_DRIVE - Determines whether the output is driving, open drain or pull down.*/
#define REVB_PORT_CTRL1_DRIVE_SHIFT 0x0
#define REVB_PORT_CTRL1_DRIVE_SIZE 0x8
#define REVB_PORT_CTRL1_DRIVE_MASK (((1 << REVB_PORT_CTRL1_DRIVE_SIZE) - 1) << REVB_PORT_CTRL1_DRIVE_SHIFT)
#define REVB_PORT_CTRL1_DRIVE(x) (((x) & REVB_PORT_CTRL1_DRIVE_MASK) >> REVB_PORT_CTRL1_DRIVE_SHIFT)
#define REVB_PORT_CTRL1_DRIVE_SET(x, v) (((x) & ~REVB_PORT_CTRL1_DRIVE_MASK) | (((v) << REVB_PORT_CTRL1_DRIVE_SHIFT) & REVB_PORT_CTRL1_DRIVE_MASK))
/* PORT_CTRL1_TWIDTH - The transfer width of the port in bits*/
#define REVB_PORT_CTRL1_TWIDTH_SHIFT 0x8
#define REVB_PORT_CTRL1_TWIDTH_SIZE 0x8
#define REVB_PORT_CTRL1_TWIDTH_MASK (((1 << REVB_PORT_CTRL1_TWIDTH_SIZE) - 1) << REVB_PORT_CTRL1_TWIDTH_SHIFT)
#define REVB_PORT_CTRL1_TWIDTH(x) (((x) & REVB_PORT_CTRL1_TWIDTH_MASK) >> REVB_PORT_CTRL1_TWIDTH_SHIFT)
#define REVB_PORT_CTRL1_TWIDTH_SET(x, v) (((x) & ~REVB_PORT_CTRL1_TWIDTH_MASK) | (((v) << REVB_PORT_CTRL1_TWIDTH_SHIFT) & REVB_PORT_CTRL1_TWIDTH_MASK))
/* PORT_CTRL1_SREG_COUNT - The shift register count in port widths.*/
#define REVB_PORT_CTRL1_SREG_COUNT_SHIFT 0x10
#define REVB_PORT_CTRL1_SREG_COUNT_SIZE 0x8
#define REVB_PORT_CTRL1_SREG_COUNT_MASK (((1 << REVB_PORT_CTRL1_SREG_COUNT_SIZE) - 1) << REVB_PORT_CTRL1_SREG_COUNT_SHIFT)
#define REVB_PORT_CTRL1_SREG_COUNT(x) (((x) & REVB_PORT_CTRL1_SREG_COUNT_MASK) >> REVB_PORT_CTRL1_SREG_COUNT_SHIFT)
#define REVB_PORT_CTRL1_SREG_COUNT_SET(x, v) (((x) & ~REVB_PORT_CTRL1_SREG_COUNT_MASK) | (((v) << REVB_PORT_CTRL1_SREG_COUNT_SHIFT) & REVB_PORT_CTRL1_SREG_COUNT_MASK))
/* PORT_CTRL1_TREG_FULL - 1 when the transfer register is full.*/
#define REVB_PORT_CTRL1_TREG_FULL_SHIFT 0x18
#define REVB_PORT_CTRL1_TREG_FULL_SIZE 0x1
#define REVB_PORT_CTRL1_TREG_FULL_MASK (((1 << REVB_PORT_CTRL1_TREG_FULL_SIZE) - 1) << REVB_PORT_CTRL1_TREG_FULL_SHIFT)
#define REVB_PORT_CTRL1_TREG_FULL(x) (((x) & REVB_PORT_CTRL1_TREG_FULL_MASK) >> REVB_PORT_CTRL1_TREG_FULL_SHIFT)
#define REVB_PORT_CTRL1_TREG_FULL_SET(x, v) (((x) & ~REVB_PORT_CTRL1_TREG_FULL_MASK) | (((v) << REVB_PORT_CTRL1_TREG_FULL_SHIFT) & REVB_PORT_CTRL1_TREG_FULL_MASK))
/* PORT_CTRL1_CHANGE_DIR - 0 when the direction is fixed, 1 when it is going to change.*/
#define REVB_PORT_CTRL1_CHANGE_DIR_SHIFT 0x19
#define REVB_PORT_CTRL1_CHANGE_DIR_SIZE 0x1
#define REVB_PORT_CTRL1_CHANGE_DIR_MASK (((1 << REVB_PORT_CTRL1_CHANGE_DIR_SIZE) - 1) << REVB_PORT_CTRL1_CHANGE_DIR_SHIFT)
#define REVB_PORT_CTRL1_CHANGE_DIR(x) (((x) & REVB_PORT_CTRL1_CHANGE_DIR_MASK) >> REVB_PORT_CTRL1_CHANGE_DIR_SHIFT)
#define REVB_PORT_CTRL1_CHANGE_DIR_SET(x, v) (((x) & ~REVB_PORT_CTRL1_CHANGE_DIR_MASK) | (((v) << REVB_PORT_CTRL1_CHANGE_DIR_SHIFT) & REVB_PORT_CTRL1_CHANGE_DIR_MASK))
/* PORT_CTRL1_SYNCR - 1 when a SYNCR instruction is pending completion.*/
#define REVB_PORT_CTRL1_SYNCR_SHIFT 0x1a
#define REVB_PORT_CTRL1_SYNCR_SIZE 0x1
#define REVB_PORT_CTRL1_SYNCR_MASK (((1 << REVB_PORT_CTRL1_SYNCR_SIZE) - 1) << REVB_PORT_CTRL1_SYNCR_SHIFT)
#define REVB_PORT_CTRL1_SYNCR(x) (((x) & REVB_PORT_CTRL1_SYNCR_MASK) >> REVB_PORT_CTRL1_SYNCR_SHIFT)
#define REVB_PORT_CTRL1_SYNCR_SET(x, v) (((x) & ~REVB_PORT_CTRL1_SYNCR_MASK) | (((v) << REVB_PORT_CTRL1_SYNCR_SHIFT) & REVB_PORT_CTRL1_SYNCR_MASK))
/* PORT_CTRL1_INST_COMMITTED - 1 when an instruction has committed to operating on the port.*/
#define REVB_PORT_CTRL1_INST_COMMITTED_SHIFT 0x1b
#define REVB_PORT_CTRL1_INST_COMMITTED_SIZE 0x1
#define REVB_PORT_CTRL1_INST_COMMITTED_MASK (((1 << REVB_PORT_CTRL1_INST_COMMITTED_SIZE) - 1) << REVB_PORT_CTRL1_INST_COMMITTED_SHIFT)
#define REVB_PORT_CTRL1_INST_COMMITTED(x) (((x) & REVB_PORT_CTRL1_INST_COMMITTED_MASK) >> REVB_PORT_CTRL1_INST_COMMITTED_SHIFT)
#define REVB_PORT_CTRL1_INST_COMMITTED_SET(x, v) (((x) & ~REVB_PORT_CTRL1_INST_COMMITTED_MASK) | (((v) << REVB_PORT_CTRL1_INST_COMMITTED_SHIFT) & REVB_PORT_CTRL1_INST_COMMITTED_MASK))
/* PORT_CTRL1_HOLD_DATA - 1 data has been captured for a condition and is being held.*/
#define REVB_PORT_CTRL1_HOLD_DATA_SHIFT 0x1c
#define REVB_PORT_CTRL1_HOLD_DATA_SIZE 0x1
#define REVB_PORT_CTRL1_HOLD_DATA_MASK (((1 << REVB_PORT_CTRL1_HOLD_DATA_SIZE) - 1) << REVB_PORT_CTRL1_HOLD_DATA_SHIFT)
#define REVB_PORT_CTRL1_HOLD_DATA(x) (((x) & REVB_PORT_CTRL1_HOLD_DATA_MASK) >> REVB_PORT_CTRL1_HOLD_DATA_SHIFT)
#define REVB_PORT_CTRL1_HOLD_DATA_SET(x, v) (((x) & ~REVB_PORT_CTRL1_HOLD_DATA_MASK) | (((v) << REVB_PORT_CTRL1_HOLD_DATA_SHIFT) & REVB_PORT_CTRL1_HOLD_DATA_MASK))
/* PORT_CTRL1_WAIT_FOR_TIME - 1 when waiting for the port time to be met.*/
#define REVB_PORT_CTRL1_WAIT_FOR_TIME_SHIFT 0x1d
#define REVB_PORT_CTRL1_WAIT_FOR_TIME_SIZE 0x1
#define REVB_PORT_CTRL1_WAIT_FOR_TIME_MASK (((1 << REVB_PORT_CTRL1_WAIT_FOR_TIME_SIZE) - 1) << REVB_PORT_CTRL1_WAIT_FOR_TIME_SHIFT)
#define REVB_PORT_CTRL1_WAIT_FOR_TIME(x) (((x) & REVB_PORT_CTRL1_WAIT_FOR_TIME_MASK) >> REVB_PORT_CTRL1_WAIT_FOR_TIME_SHIFT)
#define REVB_PORT_CTRL1_WAIT_FOR_TIME_SET(x, v) (((x) & ~REVB_PORT_CTRL1_WAIT_FOR_TIME_MASK) | (((v) << REVB_PORT_CTRL1_WAIT_FOR_TIME_SHIFT) & REVB_PORT_CTRL1_WAIT_FOR_TIME_MASK))
/* PORT_CTRL1_TIMEMET - 1 when a SETPT is used.*/
#define REVB_PORT_CTRL1_TIMEMET_SHIFT 0x1e
#define REVB_PORT_CTRL1_TIMEMET_SIZE 0x1
#define REVB_PORT_CTRL1_TIMEMET_MASK (((1 << REVB_PORT_CTRL1_TIMEMET_SIZE) - 1) << REVB_PORT_CTRL1_TIMEMET_SHIFT)
#define REVB_PORT_CTRL1_TIMEMET(x) (((x) & REVB_PORT_CTRL1_TIMEMET_MASK) >> REVB_PORT_CTRL1_TIMEMET_SHIFT)
#define REVB_PORT_CTRL1_TIMEMET_SET(x, v) (((x) & ~REVB_PORT_CTRL1_TIMEMET_MASK) | (((v) << REVB_PORT_CTRL1_TIMEMET_SHIFT) & REVB_PORT_CTRL1_TIMEMET_MASK))
/* PORT_CTRL1_ENDIN - 1 when an ENDIN is used on a BUFFERS port and the tReg was full.*/
#define REVB_PORT_CTRL1_ENDIN_SHIFT 0x1f
#define REVB_PORT_CTRL1_ENDIN_SIZE 0x1
#define REVB_PORT_CTRL1_ENDIN_MASK (((1 << REVB_PORT_CTRL1_ENDIN_SIZE) - 1) << REVB_PORT_CTRL1_ENDIN_SHIFT)
#define REVB_PORT_CTRL1_ENDIN(x) (((x) & REVB_PORT_CTRL1_ENDIN_MASK) >> REVB_PORT_CTRL1_ENDIN_SHIFT)
#define REVB_PORT_CTRL1_ENDIN_SET(x, v) (((x) & ~REVB_PORT_CTRL1_ENDIN_MASK) | (((v) << REVB_PORT_CTRL1_ENDIN_SHIFT) & REVB_PORT_CTRL1_ENDIN_MASK))
/* PORT_CTRL2_TIME - The port time value.*/
#define REVB_PORT_CTRL2_TIME_SHIFT 0x0
#define REVB_PORT_CTRL2_TIME_SIZE 0x10
#define REVB_PORT_CTRL2_TIME_MASK (((1 << REVB_PORT_CTRL2_TIME_SIZE) - 1) << REVB_PORT_CTRL2_TIME_SHIFT)
#define REVB_PORT_CTRL2_TIME(x) (((x) & REVB_PORT_CTRL2_TIME_MASK) >> REVB_PORT_CTRL2_TIME_SHIFT)
#define REVB_PORT_CTRL2_TIME_SET(x, v) (((x) & ~REVB_PORT_CTRL2_TIME_MASK) | (((v) << REVB_PORT_CTRL2_TIME_SHIFT) & REVB_PORT_CTRL2_TIME_MASK))
/* PORT_CTRL2_PIN_DELAY - The port pin delay.*/
#define REVB_PORT_CTRL2_PIN_DELAY_SHIFT 0x10
#define REVB_PORT_CTRL2_PIN_DELAY_SIZE 0x3
#define REVB_PORT_CTRL2_PIN_DELAY_MASK (((1 << REVB_PORT_CTRL2_PIN_DELAY_SIZE) - 1) << REVB_PORT_CTRL2_PIN_DELAY_SHIFT)
#define REVB_PORT_CTRL2_PIN_DELAY(x) (((x) & REVB_PORT_CTRL2_PIN_DELAY_MASK) >> REVB_PORT_CTRL2_PIN_DELAY_SHIFT)
#define REVB_PORT_CTRL2_PIN_DELAY_SET(x, v) (((x) & ~REVB_PORT_CTRL2_PIN_DELAY_MASK) | (((v) << REVB_PORT_CTRL2_PIN_DELAY_SHIFT) & REVB_PORT_CTRL2_PIN_DELAY_MASK))
/* TIMER_CTRL0_INUSE - Returns 1 when it in use, 0 otherwise.*/
#define REVB_TIMER_CTRL0_INUSE_SHIFT 0x0
#define REVB_TIMER_CTRL0_INUSE_SIZE 0x1
#define REVB_TIMER_CTRL0_INUSE_MASK (((1 << REVB_TIMER_CTRL0_INUSE_SIZE) - 1) << REVB_TIMER_CTRL0_INUSE_SHIFT)
#define REVB_TIMER_CTRL0_INUSE(x) (((x) & REVB_TIMER_CTRL0_INUSE_MASK) >> REVB_TIMER_CTRL0_INUSE_SHIFT)
#define REVB_TIMER_CTRL0_INUSE_SET(x, v) (((x) & ~REVB_TIMER_CTRL0_INUSE_MASK) | (((v) << REVB_TIMER_CTRL0_INUSE_SHIFT) & REVB_TIMER_CTRL0_INUSE_MASK))
/* TIMER_CTRL0_IE_MODE - 0 when this timer will cause events, 1 when it will raise interrupts. It is controlled using the ==[[XcoreArchInstructions#SETC][SETC]]== instruction.*/
#define REVB_TIMER_CTRL0_IE_MODE_SHIFT 0x1
#define REVB_TIMER_CTRL0_IE_MODE_SIZE 0x1
#define REVB_TIMER_CTRL0_IE_MODE_MASK (((1 << REVB_TIMER_CTRL0_IE_MODE_SIZE) - 1) << REVB_TIMER_CTRL0_IE_MODE_SHIFT)
#define REVB_TIMER_CTRL0_IE_MODE(x) (((x) & REVB_TIMER_CTRL0_IE_MODE_MASK) >> REVB_TIMER_CTRL0_IE_MODE_SHIFT)
#define REVB_TIMER_CTRL0_IE_MODE_SET(x, v) (((x) & ~REVB_TIMER_CTRL0_IE_MODE_MASK) | (((v) << REVB_TIMER_CTRL0_IE_MODE_SHIFT) & REVB_TIMER_CTRL0_IE_MODE_MASK))
/* TIMER_CTRL0_IE_ENABLED - 1 when events or interrupts on this timer are active. It is set when an ==[[XcoreArchInstructions#EEU][EEU]]== is executed. It is cleared when a ==[[XcoreArchInstructions#EDU][EDU]]== or ==[[XcoreArchInstructions#CLRE][CLRE]]== is executed. The ==[[XcoreArchInstructions#EET][EET]]== and ==[[XcoreArchInstructions#EEF][EEF]]== will either set or clear the bit depending on the contents of the condition register.*/
#define REVB_TIMER_CTRL0_IE_ENABLED_SHIFT 0x2
#define REVB_TIMER_CTRL0_IE_ENABLED_SIZE 0x1
#define REVB_TIMER_CTRL0_IE_ENABLED_MASK (((1 << REVB_TIMER_CTRL0_IE_ENABLED_SIZE) - 1) << REVB_TIMER_CTRL0_IE_ENABLED_SHIFT)
#define REVB_TIMER_CTRL0_IE_ENABLED(x) (((x) & REVB_TIMER_CTRL0_IE_ENABLED_MASK) >> REVB_TIMER_CTRL0_IE_ENABLED_SHIFT)
#define REVB_TIMER_CTRL0_IE_ENABLED_SET(x, v) (((x) & ~REVB_TIMER_CTRL0_IE_ENABLED_MASK) | (((v) << REVB_TIMER_CTRL0_IE_ENABLED_SHIFT) & REVB_TIMER_CTRL0_IE_ENABLED_MASK))
/* TIMER_CTRL0_READY - 1 when the condition has been met. It is cleared when a ==[[XcoreArchInstructions#SETC][SETC]]==, ==[[XcoreArchInstructions#SETD][SETD]]==, ==[[XcoreArchInstructions#SETV][SETV]]==, ==[[XcoreArchInstructions#SETC][SETC]]== or ==[[XcoreArchInstructions#IN][IN]]== instruction is executed on the timer. 0 when the timer is not in use.*/
#define REVB_TIMER_CTRL0_READY_SHIFT 0x3
#define REVB_TIMER_CTRL0_READY_SIZE 0x1
#define REVB_TIMER_CTRL0_READY_MASK (((1 << REVB_TIMER_CTRL0_READY_SIZE) - 1) << REVB_TIMER_CTRL0_READY_SHIFT)
#define REVB_TIMER_CTRL0_READY(x) (((x) & REVB_TIMER_CTRL0_READY_MASK) >> REVB_TIMER_CTRL0_READY_SHIFT)
#define REVB_TIMER_CTRL0_READY_SET(x, v) (((x) & ~REVB_TIMER_CTRL0_READY_MASK) | (((v) << REVB_TIMER_CTRL0_READY_SHIFT) & REVB_TIMER_CTRL0_READY_MASK))
/* TIMER_CTRL0_COND - Shows the current condition of the timer. The condition is set using the ==[[XcoreArchInstructions#SETC][SETC]]== instruction.*/
#define REVB_TIMER_CTRL0_COND_SHIFT 0x4
#define REVB_TIMER_CTRL0_COND_SIZE 0x1
#define REVB_TIMER_CTRL0_COND_MASK (((1 << REVB_TIMER_CTRL0_COND_SIZE) - 1) << REVB_TIMER_CTRL0_COND_SHIFT)
#define REVB_TIMER_CTRL0_COND(x) (((x) & REVB_TIMER_CTRL0_COND_MASK) >> REVB_TIMER_CTRL0_COND_SHIFT)
#define REVB_TIMER_CTRL0_COND_SET(x, v) (((x) & ~REVB_TIMER_CTRL0_COND_MASK) | (((v) << REVB_TIMER_CTRL0_COND_SHIFT) & REVB_TIMER_CTRL0_COND_MASK))
/* TIMER_CTRL0_EV_VALID - 1 when the Environment Vector is valid. When invalid, the resourceId is used as the environment vector. The environment vector is set using the ==[[XcoreArchInstructions#SETEV][SETEV]]== instruction.*/
#define REVB_TIMER_CTRL0_EV_VALID_SHIFT 0x8
#define REVB_TIMER_CTRL0_EV_VALID_SIZE 0x1
#define REVB_TIMER_CTRL0_EV_VALID_MASK (((1 << REVB_TIMER_CTRL0_EV_VALID_SIZE) - 1) << REVB_TIMER_CTRL0_EV_VALID_SHIFT)
#define REVB_TIMER_CTRL0_EV_VALID(x) (((x) & REVB_TIMER_CTRL0_EV_VALID_MASK) >> REVB_TIMER_CTRL0_EV_VALID_SHIFT)
#define REVB_TIMER_CTRL0_EV_VALID_SET(x, v) (((x) & ~REVB_TIMER_CTRL0_EV_VALID_MASK) | (((v) << REVB_TIMER_CTRL0_EV_VALID_SHIFT) & REVB_TIMER_CTRL0_EV_VALID_MASK))
/* TIMER_CTRL0_T_WAITING - 1 when there is a thread waiting to be unblocked by this timer.*/
#define REVB_TIMER_CTRL0_T_WAITING_SHIFT 0x17
#define REVB_TIMER_CTRL0_T_WAITING_SIZE 0x1
#define REVB_TIMER_CTRL0_T_WAITING_MASK (((1 << REVB_TIMER_CTRL0_T_WAITING_SIZE) - 1) << REVB_TIMER_CTRL0_T_WAITING_SHIFT)
#define REVB_TIMER_CTRL0_T_WAITING(x) (((x) & REVB_TIMER_CTRL0_T_WAITING_MASK) >> REVB_TIMER_CTRL0_T_WAITING_SHIFT)
#define REVB_TIMER_CTRL0_T_WAITING_SET(x, v) (((x) & ~REVB_TIMER_CTRL0_T_WAITING_MASK) | (((v) << REVB_TIMER_CTRL0_T_WAITING_SHIFT) & REVB_TIMER_CTRL0_T_WAITING_MASK))
/* TIMER_CTRL0_T_NUM - Number of the thread waiting for events or to be unblocked by this timer.*/
#define REVB_TIMER_CTRL0_T_NUM_SHIFT 0x18
#define REVB_TIMER_CTRL0_T_NUM_SIZE 0x8
#define REVB_TIMER_CTRL0_T_NUM_MASK (((1 << REVB_TIMER_CTRL0_T_NUM_SIZE) - 1) << REVB_TIMER_CTRL0_T_NUM_SHIFT)
#define REVB_TIMER_CTRL0_T_NUM(x) (((x) & REVB_TIMER_CTRL0_T_NUM_MASK) >> REVB_TIMER_CTRL0_T_NUM_SHIFT)
#define REVB_TIMER_CTRL0_T_NUM_SET(x, v) (((x) & ~REVB_TIMER_CTRL0_T_NUM_MASK) | (((v) << REVB_TIMER_CTRL0_T_NUM_SHIFT) & REVB_TIMER_CTRL0_T_NUM_MASK))
/* SYNC_CTRL0_INUSE - 1 when the synchroniser is in use.*/
#define REVB_SYNC_CTRL0_INUSE_SHIFT 0x0
#define REVB_SYNC_CTRL0_INUSE_SIZE 0x1
#define REVB_SYNC_CTRL0_INUSE_MASK (((1 << REVB_SYNC_CTRL0_INUSE_SIZE) - 1) << REVB_SYNC_CTRL0_INUSE_SHIFT)
#define REVB_SYNC_CTRL0_INUSE(x) (((x) & REVB_SYNC_CTRL0_INUSE_MASK) >> REVB_SYNC_CTRL0_INUSE_SHIFT)
#define REVB_SYNC_CTRL0_INUSE_SET(x, v) (((x) & ~REVB_SYNC_CTRL0_INUSE_MASK) | (((v) << REVB_SYNC_CTRL0_INUSE_SHIFT) & REVB_SYNC_CTRL0_INUSE_MASK))
/* SYNC_CTRL0_MSYNCED - 1 when the master of this synchroniser has msynced on it.*/
#define REVB_SYNC_CTRL0_MSYNCED_SHIFT 0x1
#define REVB_SYNC_CTRL0_MSYNCED_SIZE 0x1
#define REVB_SYNC_CTRL0_MSYNCED_MASK (((1 << REVB_SYNC_CTRL0_MSYNCED_SIZE) - 1) << REVB_SYNC_CTRL0_MSYNCED_SHIFT)
#define REVB_SYNC_CTRL0_MSYNCED(x) (((x) & REVB_SYNC_CTRL0_MSYNCED_MASK) >> REVB_SYNC_CTRL0_MSYNCED_SHIFT)
#define REVB_SYNC_CTRL0_MSYNCED_SET(x, v) (((x) & ~REVB_SYNC_CTRL0_MSYNCED_MASK) | (((v) << REVB_SYNC_CTRL0_MSYNCED_SHIFT) & REVB_SYNC_CTRL0_MSYNCED_MASK))
/* SYNC_CTRL0_JOIN - 1 when the synchroniser will free the threads after synchronisation. 0 otherwise.*/
#define REVB_SYNC_CTRL0_JOIN_SHIFT 0x2
#define REVB_SYNC_CTRL0_JOIN_SIZE 0x1
#define REVB_SYNC_CTRL0_JOIN_MASK (((1 << REVB_SYNC_CTRL0_JOIN_SIZE) - 1) << REVB_SYNC_CTRL0_JOIN_SHIFT)
#define REVB_SYNC_CTRL0_JOIN(x) (((x) & REVB_SYNC_CTRL0_JOIN_MASK) >> REVB_SYNC_CTRL0_JOIN_SHIFT)
#define REVB_SYNC_CTRL0_JOIN_SET(x, v) (((x) & ~REVB_SYNC_CTRL0_JOIN_MASK) | (((v) << REVB_SYNC_CTRL0_JOIN_SHIFT) & REVB_SYNC_CTRL0_JOIN_MASK))
/* SYNC_CTRL0_MASTER - When synchroniser is in use it is the ID of the master thread. 0 when not in use.*/
#define REVB_SYNC_CTRL0_MASTER_SHIFT 0x8
#define REVB_SYNC_CTRL0_MASTER_SIZE 0x8
#define REVB_SYNC_CTRL0_MASTER_MASK (((1 << REVB_SYNC_CTRL0_MASTER_SIZE) - 1) << REVB_SYNC_CTRL0_MASTER_SHIFT)
#define REVB_SYNC_CTRL0_MASTER(x) (((x) & REVB_SYNC_CTRL0_MASTER_MASK) >> REVB_SYNC_CTRL0_MASTER_SHIFT)
#define REVB_SYNC_CTRL0_MASTER_SET(x, v) (((x) & ~REVB_SYNC_CTRL0_MASTER_MASK) | (((v) << REVB_SYNC_CTRL0_MASTER_SHIFT) & REVB_SYNC_CTRL0_MASTER_MASK))
/* SYNC_TBV0_SLAVES - 1 bit for each of the threads. When 1 indicates that the corresponding thread is attached to the synchroniser.*/
#define REVB_SYNC_TBV0_SLAVES_SHIFT 0x0
#define REVB_SYNC_TBV0_SLAVES_SIZE 0x8
#define REVB_SYNC_TBV0_SLAVES_MASK (((1 << REVB_SYNC_TBV0_SLAVES_SIZE) - 1) << REVB_SYNC_TBV0_SLAVES_SHIFT)
#define REVB_SYNC_TBV0_SLAVES(x) (((x) & REVB_SYNC_TBV0_SLAVES_MASK) >> REVB_SYNC_TBV0_SLAVES_SHIFT)
#define REVB_SYNC_TBV0_SLAVES_SET(x, v) (((x) & ~REVB_SYNC_TBV0_SLAVES_MASK) | (((v) << REVB_SYNC_TBV0_SLAVES_SHIFT) & REVB_SYNC_TBV0_SLAVES_MASK))
/* LOCK_CTRL0_INUSE - 1 when the lock is in use.*/
#define REVB_LOCK_CTRL0_INUSE_SHIFT 0x0
#define REVB_LOCK_CTRL0_INUSE_SIZE 0x1
#define REVB_LOCK_CTRL0_INUSE_MASK (((1 << REVB_LOCK_CTRL0_INUSE_SIZE) - 1) << REVB_LOCK_CTRL0_INUSE_SHIFT)
#define REVB_LOCK_CTRL0_INUSE(x) (((x) & REVB_LOCK_CTRL0_INUSE_MASK) >> REVB_LOCK_CTRL0_INUSE_SHIFT)
#define REVB_LOCK_CTRL0_INUSE_SET(x, v) (((x) & ~REVB_LOCK_CTRL0_INUSE_MASK) | (((v) << REVB_LOCK_CTRL0_INUSE_SHIFT) & REVB_LOCK_CTRL0_INUSE_MASK))
/* LOCK_CTRL0_OWNT_V - Indicates that the lock's owner is known.*/
#define REVB_LOCK_CTRL0_OWNT_V_SHIFT 0x1
#define REVB_LOCK_CTRL0_OWNT_V_SIZE 0x1
#define REVB_LOCK_CTRL0_OWNT_V_MASK (((1 << REVB_LOCK_CTRL0_OWNT_V_SIZE) - 1) << REVB_LOCK_CTRL0_OWNT_V_SHIFT)
#define REVB_LOCK_CTRL0_OWNT_V(x) (((x) & REVB_LOCK_CTRL0_OWNT_V_MASK) >> REVB_LOCK_CTRL0_OWNT_V_SHIFT)
#define REVB_LOCK_CTRL0_OWNT_V_SET(x, v) (((x) & ~REVB_LOCK_CTRL0_OWNT_V_MASK) | (((v) << REVB_LOCK_CTRL0_OWNT_V_SHIFT) & REVB_LOCK_CTRL0_OWNT_V_MASK))
/* LOCK_CTRL0_OWNT - When OWNT_V is true then this is the ID of the thread currently holding the lock.*/
#define REVB_LOCK_CTRL0_OWNT_SHIFT 0x8
#define REVB_LOCK_CTRL0_OWNT_SIZE 0x8
#define REVB_LOCK_CTRL0_OWNT_MASK (((1 << REVB_LOCK_CTRL0_OWNT_SIZE) - 1) << REVB_LOCK_CTRL0_OWNT_SHIFT)
#define REVB_LOCK_CTRL0_OWNT(x) (((x) & REVB_LOCK_CTRL0_OWNT_MASK) >> REVB_LOCK_CTRL0_OWNT_SHIFT)
#define REVB_LOCK_CTRL0_OWNT_SET(x, v) (((x) & ~REVB_LOCK_CTRL0_OWNT_MASK) | (((v) << REVB_LOCK_CTRL0_OWNT_SHIFT) & REVB_LOCK_CTRL0_OWNT_MASK))
/* LOCK_TBV0_WAITING - 1 bit for each of the threads. When 1 indicates that the corresponding thread is waiting for the lock.*/
#define REVB_LOCK_TBV0_WAITING_SHIFT 0x0
#define REVB_LOCK_TBV0_WAITING_SIZE 0x8
#define REVB_LOCK_TBV0_WAITING_MASK (((1 << REVB_LOCK_TBV0_WAITING_SIZE) - 1) << REVB_LOCK_TBV0_WAITING_SHIFT)
#define REVB_LOCK_TBV0_WAITING(x) (((x) & REVB_LOCK_TBV0_WAITING_MASK) >> REVB_LOCK_TBV0_WAITING_SHIFT)
#define REVB_LOCK_TBV0_WAITING_SET(x, v) (((x) & ~REVB_LOCK_TBV0_WAITING_MASK) | (((v) << REVB_LOCK_TBV0_WAITING_SHIFT) & REVB_LOCK_TBV0_WAITING_MASK))
/* CHANEND_CTRL0_INUSE - 1 when the channel end is in use.*/
#define REVB_CHANEND_CTRL0_INUSE_SHIFT 0x0
#define REVB_CHANEND_CTRL0_INUSE_SIZE 0x1
#define REVB_CHANEND_CTRL0_INUSE_MASK (((1 << REVB_CHANEND_CTRL0_INUSE_SIZE) - 1) << REVB_CHANEND_CTRL0_INUSE_SHIFT)
#define REVB_CHANEND_CTRL0_INUSE(x) (((x) & REVB_CHANEND_CTRL0_INUSE_MASK) >> REVB_CHANEND_CTRL0_INUSE_SHIFT)
#define REVB_CHANEND_CTRL0_INUSE_SET(x, v) (((x) & ~REVB_CHANEND_CTRL0_INUSE_MASK) | (((v) << REVB_CHANEND_CTRL0_INUSE_SHIFT) & REVB_CHANEND_CTRL0_INUSE_MASK))
/* CHANEND_CTRL0_IE_MODE - 0 when the channel end will cause events, 1 when in use and it will raise interrupts.*/
#define REVB_CHANEND_CTRL0_IE_MODE_SHIFT 0x1
#define REVB_CHANEND_CTRL0_IE_MODE_SIZE 0x1
#define REVB_CHANEND_CTRL0_IE_MODE_MASK (((1 << REVB_CHANEND_CTRL0_IE_MODE_SIZE) - 1) << REVB_CHANEND_CTRL0_IE_MODE_SHIFT)
#define REVB_CHANEND_CTRL0_IE_MODE(x) (((x) & REVB_CHANEND_CTRL0_IE_MODE_MASK) >> REVB_CHANEND_CTRL0_IE_MODE_SHIFT)
#define REVB_CHANEND_CTRL0_IE_MODE_SET(x, v) (((x) & ~REVB_CHANEND_CTRL0_IE_MODE_MASK) | (((v) << REVB_CHANEND_CTRL0_IE_MODE_SHIFT) & REVB_CHANEND_CTRL0_IE_MODE_MASK))
/* CHANEND_CTRL0_IE_ENABLED - 1 when events or interrupts are enabled on the channel end.*/
#define REVB_CHANEND_CTRL0_IE_ENABLED_SHIFT 0x2
#define REVB_CHANEND_CTRL0_IE_ENABLED_SIZE 0x1
#define REVB_CHANEND_CTRL0_IE_ENABLED_MASK (((1 << REVB_CHANEND_CTRL0_IE_ENABLED_SIZE) - 1) << REVB_CHANEND_CTRL0_IE_ENABLED_SHIFT)
#define REVB_CHANEND_CTRL0_IE_ENABLED(x) (((x) & REVB_CHANEND_CTRL0_IE_ENABLED_MASK) >> REVB_CHANEND_CTRL0_IE_ENABLED_SHIFT)
#define REVB_CHANEND_CTRL0_IE_ENABLED_SET(x, v) (((x) & ~REVB_CHANEND_CTRL0_IE_ENABLED_MASK) | (((v) << REVB_CHANEND_CTRL0_IE_ENABLED_SHIFT) & REVB_CHANEND_CTRL0_IE_ENABLED_MASK))
/* CHANEND_CTRL0_IN_READY - 1 when in use and there is sufficient data in the channel end for a token to be input by a thread.*/
#define REVB_CHANEND_CTRL0_IN_READY_SHIFT 0x4
#define REVB_CHANEND_CTRL0_IN_READY_SIZE 0x1
#define REVB_CHANEND_CTRL0_IN_READY_MASK (((1 << REVB_CHANEND_CTRL0_IN_READY_SIZE) - 1) << REVB_CHANEND_CTRL0_IN_READY_SHIFT)
#define REVB_CHANEND_CTRL0_IN_READY(x) (((x) & REVB_CHANEND_CTRL0_IN_READY_MASK) >> REVB_CHANEND_CTRL0_IN_READY_SHIFT)
#define REVB_CHANEND_CTRL0_IN_READY_SET(x, v) (((x) & ~REVB_CHANEND_CTRL0_IN_READY_MASK) | (((v) << REVB_CHANEND_CTRL0_IN_READY_SHIFT) & REVB_CHANEND_CTRL0_IN_READY_MASK))
/* CHANEND_CTRL0_IN_WAITING - 1 when the input thread is waiting either for data or for an event.*/
#define REVB_CHANEND_CTRL0_IN_WAITING_SHIFT 0x5
#define REVB_CHANEND_CTRL0_IN_WAITING_SIZE 0x1
#define REVB_CHANEND_CTRL0_IN_WAITING_MASK (((1 << REVB_CHANEND_CTRL0_IN_WAITING_SIZE) - 1) << REVB_CHANEND_CTRL0_IN_WAITING_SHIFT)
#define REVB_CHANEND_CTRL0_IN_WAITING(x) (((x) & REVB_CHANEND_CTRL0_IN_WAITING_MASK) >> REVB_CHANEND_CTRL0_IN_WAITING_SHIFT)
#define REVB_CHANEND_CTRL0_IN_WAITING_SET(x, v) (((x) & ~REVB_CHANEND_CTRL0_IN_WAITING_MASK) | (((v) << REVB_CHANEND_CTRL0_IN_WAITING_SHIFT) & REVB_CHANEND_CTRL0_IN_WAITING_MASK))
/* CHANEND_CTRL0_OUT_READY - 1 when in use and either not connected or there is sufficient room in the target channel end for a token to be ouptut by a thread. Will be 0 when requesting a link but not yet connected.*/
#define REVB_CHANEND_CTRL0_OUT_READY_SHIFT 0x6
#define REVB_CHANEND_CTRL0_OUT_READY_SIZE 0x1
#define REVB_CHANEND_CTRL0_OUT_READY_MASK (((1 << REVB_CHANEND_CTRL0_OUT_READY_SIZE) - 1) << REVB_CHANEND_CTRL0_OUT_READY_SHIFT)
#define REVB_CHANEND_CTRL0_OUT_READY(x) (((x) & REVB_CHANEND_CTRL0_OUT_READY_MASK) >> REVB_CHANEND_CTRL0_OUT_READY_SHIFT)
#define REVB_CHANEND_CTRL0_OUT_READY_SET(x, v) (((x) & ~REVB_CHANEND_CTRL0_OUT_READY_MASK) | (((v) << REVB_CHANEND_CTRL0_OUT_READY_SHIFT) & REVB_CHANEND_CTRL0_OUT_READY_MASK))
/* CHANEND_CTRL0_OUT_WAITING - 1 when there is a thread waiting to write data to the channel end.*/
#define REVB_CHANEND_CTRL0_OUT_WAITING_SHIFT 0x7
#define REVB_CHANEND_CTRL0_OUT_WAITING_SIZE 0x1
#define REVB_CHANEND_CTRL0_OUT_WAITING_MASK (((1 << REVB_CHANEND_CTRL0_OUT_WAITING_SIZE) - 1) << REVB_CHANEND_CTRL0_OUT_WAITING_SHIFT)
#define REVB_CHANEND_CTRL0_OUT_WAITING(x) (((x) & REVB_CHANEND_CTRL0_OUT_WAITING_MASK) >> REVB_CHANEND_CTRL0_OUT_WAITING_SHIFT)
#define REVB_CHANEND_CTRL0_OUT_WAITING_SET(x, v) (((x) & ~REVB_CHANEND_CTRL0_OUT_WAITING_MASK) | (((v) << REVB_CHANEND_CTRL0_OUT_WAITING_SHIFT) & REVB_CHANEND_CTRL0_OUT_WAITING_MASK))
/* CHANEND_CTRL0_EV_VALID - 1 when the Environment Vector is valid. When invalid, the resourceId is used as the environment vector. The environment vector is set using the ==[[XcoreArchInstructions#SETEV][SETEV]]== instruction.*/
#define REVB_CHANEND_CTRL0_EV_VALID_SHIFT 0x8
#define REVB_CHANEND_CTRL0_EV_VALID_SIZE 0x1
#define REVB_CHANEND_CTRL0_EV_VALID_MASK (((1 << REVB_CHANEND_CTRL0_EV_VALID_SIZE) - 1) << REVB_CHANEND_CTRL0_EV_VALID_SHIFT)
#define REVB_CHANEND_CTRL0_EV_VALID(x) (((x) & REVB_CHANEND_CTRL0_EV_VALID_MASK) >> REVB_CHANEND_CTRL0_EV_VALID_SHIFT)
#define REVB_CHANEND_CTRL0_EV_VALID_SET(x, v) (((x) & ~REVB_CHANEND_CTRL0_EV_VALID_MASK) | (((v) << REVB_CHANEND_CTRL0_EV_VALID_SHIFT) & REVB_CHANEND_CTRL0_EV_VALID_MASK))
/* CHANEND_CTRL0_IN_T_NUM - Number of the input thread waiting for data or an event on this channel end.*/
#define REVB_CHANEND_CTRL0_IN_T_NUM_SHIFT 0x10
#define REVB_CHANEND_CTRL0_IN_T_NUM_SIZE 0x8
#define REVB_CHANEND_CTRL0_IN_T_NUM_MASK (((1 << REVB_CHANEND_CTRL0_IN_T_NUM_SIZE) - 1) << REVB_CHANEND_CTRL0_IN_T_NUM_SHIFT)
#define REVB_CHANEND_CTRL0_IN_T_NUM(x) (((x) & REVB_CHANEND_CTRL0_IN_T_NUM_MASK) >> REVB_CHANEND_CTRL0_IN_T_NUM_SHIFT)
#define REVB_CHANEND_CTRL0_IN_T_NUM_SET(x, v) (((x) & ~REVB_CHANEND_CTRL0_IN_T_NUM_MASK) | (((v) << REVB_CHANEND_CTRL0_IN_T_NUM_SHIFT) & REVB_CHANEND_CTRL0_IN_T_NUM_MASK))
/* CHANEND_CTRL0_OUT_T_NUM - Number of the last thread to attempt to write data to this channel end.*/
#define REVB_CHANEND_CTRL0_OUT_T_NUM_SHIFT 0x18
#define REVB_CHANEND_CTRL0_OUT_T_NUM_SIZE 0x8
#define REVB_CHANEND_CTRL0_OUT_T_NUM_MASK (((1 << REVB_CHANEND_CTRL0_OUT_T_NUM_SIZE) - 1) << REVB_CHANEND_CTRL0_OUT_T_NUM_SHIFT)
#define REVB_CHANEND_CTRL0_OUT_T_NUM(x) (((x) & REVB_CHANEND_CTRL0_OUT_T_NUM_MASK) >> REVB_CHANEND_CTRL0_OUT_T_NUM_SHIFT)
#define REVB_CHANEND_CTRL0_OUT_T_NUM_SET(x, v) (((x) & ~REVB_CHANEND_CTRL0_OUT_T_NUM_MASK) | (((v) << REVB_CHANEND_CTRL0_OUT_T_NUM_SHIFT) & REVB_CHANEND_CTRL0_OUT_T_NUM_MASK))
/* CLKBLK_CTRL0_INUSE - 1 when the clock source is in use.*/
#define REVB_CLKBLK_CTRL0_INUSE_SHIFT 0x0
#define REVB_CLKBLK_CTRL0_INUSE_SIZE 0x1
#define REVB_CLKBLK_CTRL0_INUSE_MASK (((1 << REVB_CLKBLK_CTRL0_INUSE_SIZE) - 1) << REVB_CLKBLK_CTRL0_INUSE_SHIFT)
#define REVB_CLKBLK_CTRL0_INUSE(x) (((x) & REVB_CLKBLK_CTRL0_INUSE_MASK) >> REVB_CLKBLK_CTRL0_INUSE_SHIFT)
#define REVB_CLKBLK_CTRL0_INUSE_SET(x, v) (((x) & ~REVB_CLKBLK_CTRL0_INUSE_MASK) | (((v) << REVB_CLKBLK_CTRL0_INUSE_SHIFT) & REVB_CLKBLK_CTRL0_INUSE_MASK))
/* CLKBLK_CTRL0_STARTED - 1 when the clock source has been started.*/
#define REVB_CLKBLK_CTRL0_STARTED_SHIFT 0x1
#define REVB_CLKBLK_CTRL0_STARTED_SIZE 0x1
#define REVB_CLKBLK_CTRL0_STARTED_MASK (((1 << REVB_CLKBLK_CTRL0_STARTED_SIZE) - 1) << REVB_CLKBLK_CTRL0_STARTED_SHIFT)
#define REVB_CLKBLK_CTRL0_STARTED(x) (((x) & REVB_CLKBLK_CTRL0_STARTED_MASK) >> REVB_CLKBLK_CTRL0_STARTED_SHIFT)
#define REVB_CLKBLK_CTRL0_STARTED_SET(x, v) (((x) & ~REVB_CLKBLK_CTRL0_STARTED_MASK) | (((v) << REVB_CLKBLK_CTRL0_STARTED_SHIFT) & REVB_CLKBLK_CTRL0_STARTED_MASK))
/* CLKBLK_CTRL0_STOPPING - 1 when the clock source is in the process of stopping.*/
#define REVB_CLKBLK_CTRL0_STOPPING_SHIFT 0x2
#define REVB_CLKBLK_CTRL0_STOPPING_SIZE 0x1
#define REVB_CLKBLK_CTRL0_STOPPING_MASK (((1 << REVB_CLKBLK_CTRL0_STOPPING_SIZE) - 1) << REVB_CLKBLK_CTRL0_STOPPING_SHIFT)
#define REVB_CLKBLK_CTRL0_STOPPING(x) (((x) & REVB_CLKBLK_CTRL0_STOPPING_MASK) >> REVB_CLKBLK_CTRL0_STOPPING_SHIFT)
#define REVB_CLKBLK_CTRL0_STOPPING_SET(x, v) (((x) & ~REVB_CLKBLK_CTRL0_STOPPING_MASK) | (((v) << REVB_CLKBLK_CTRL0_STOPPING_SHIFT) & REVB_CLKBLK_CTRL0_STOPPING_MASK))
/* CLKBLK_CTRL0_T_WAITING - 1 when there is a thread waiting for synchronisation with the clock block.*/
#define REVB_CLKBLK_CTRL0_T_WAITING_SHIFT 0x17
#define REVB_CLKBLK_CTRL0_T_WAITING_SIZE 0x1
#define REVB_CLKBLK_CTRL0_T_WAITING_MASK (((1 << REVB_CLKBLK_CTRL0_T_WAITING_SIZE) - 1) << REVB_CLKBLK_CTRL0_T_WAITING_SHIFT)
#define REVB_CLKBLK_CTRL0_T_WAITING(x) (((x) & REVB_CLKBLK_CTRL0_T_WAITING_MASK) >> REVB_CLKBLK_CTRL0_T_WAITING_SHIFT)
#define REVB_CLKBLK_CTRL0_T_WAITING_SET(x, v) (((x) & ~REVB_CLKBLK_CTRL0_T_WAITING_MASK) | (((v) << REVB_CLKBLK_CTRL0_T_WAITING_SHIFT) & REVB_CLKBLK_CTRL0_T_WAITING_MASK))
/* CLKBLK_CTRL0_T_NUM - Number of the thread waiting for the clock block.*/
#define REVB_CLKBLK_CTRL0_T_NUM_SHIFT 0x18
#define REVB_CLKBLK_CTRL0_T_NUM_SIZE 0x8
#define REVB_CLKBLK_CTRL0_T_NUM_MASK (((1 << REVB_CLKBLK_CTRL0_T_NUM_SIZE) - 1) << REVB_CLKBLK_CTRL0_T_NUM_SHIFT)
#define REVB_CLKBLK_CTRL0_T_NUM(x) (((x) & REVB_CLKBLK_CTRL0_T_NUM_MASK) >> REVB_CLKBLK_CTRL0_T_NUM_SHIFT)
#define REVB_CLKBLK_CTRL0_T_NUM_SET(x, v) (((x) & ~REVB_CLKBLK_CTRL0_T_NUM_MASK) | (((v) << REVB_CLKBLK_CTRL0_T_NUM_SHIFT) & REVB_CLKBLK_CTRL0_T_NUM_MASK))
/* CLKBLK_CTRL1_FALL_DELAY - Falling edge delay counter.*/
#define REVB_CLKBLK_CTRL1_FALL_DELAY_SHIFT 0x0
#define REVB_CLKBLK_CTRL1_FALL_DELAY_SIZE 0x9
#define REVB_CLKBLK_CTRL1_FALL_DELAY_MASK (((1 << REVB_CLKBLK_CTRL1_FALL_DELAY_SIZE) - 1) << REVB_CLKBLK_CTRL1_FALL_DELAY_SHIFT)
#define REVB_CLKBLK_CTRL1_FALL_DELAY(x) (((x) & REVB_CLKBLK_CTRL1_FALL_DELAY_MASK) >> REVB_CLKBLK_CTRL1_FALL_DELAY_SHIFT)
#define REVB_CLKBLK_CTRL1_FALL_DELAY_SET(x, v) (((x) & ~REVB_CLKBLK_CTRL1_FALL_DELAY_MASK) | (((v) << REVB_CLKBLK_CTRL1_FALL_DELAY_SHIFT) & REVB_CLKBLK_CTRL1_FALL_DELAY_MASK))
/* CLKBLK_CTRL1_RISE_DELAY - Rising edge delay counter.*/
#define REVB_CLKBLK_CTRL1_RISE_DELAY_SHIFT 0x10
#define REVB_CLKBLK_CTRL1_RISE_DELAY_SIZE 0x9
#define REVB_CLKBLK_CTRL1_RISE_DELAY_MASK (((1 << REVB_CLKBLK_CTRL1_RISE_DELAY_SIZE) - 1) << REVB_CLKBLK_CTRL1_RISE_DELAY_SHIFT)
#define REVB_CLKBLK_CTRL1_RISE_DELAY(x) (((x) & REVB_CLKBLK_CTRL1_RISE_DELAY_MASK) >> REVB_CLKBLK_CTRL1_RISE_DELAY_SHIFT)
#define REVB_CLKBLK_CTRL1_RISE_DELAY_SET(x, v) (((x) & ~REVB_CLKBLK_CTRL1_RISE_DELAY_MASK) | (((v) << REVB_CLKBLK_CTRL1_RISE_DELAY_SHIFT) & REVB_CLKBLK_CTRL1_RISE_DELAY_MASK))
/* COPROC_CTRL0_INUSE - 1 when the coprocessor is in use.*/
#define REVB_COPROC_CTRL0_INUSE_SHIFT 0x0
#define REVB_COPROC_CTRL0_INUSE_SIZE 0x1
#define REVB_COPROC_CTRL0_INUSE_MASK (((1 << REVB_COPROC_CTRL0_INUSE_SIZE) - 1) << REVB_COPROC_CTRL0_INUSE_SHIFT)
#define REVB_COPROC_CTRL0_INUSE(x) (((x) & REVB_COPROC_CTRL0_INUSE_MASK) >> REVB_COPROC_CTRL0_INUSE_SHIFT)
#define REVB_COPROC_CTRL0_INUSE_SET(x, v) (((x) & ~REVB_COPROC_CTRL0_INUSE_MASK) | (((v) << REVB_COPROC_CTRL0_INUSE_SHIFT) & REVB_COPROC_CTRL0_INUSE_MASK))
/* COPROC_CTRL0_OWNT_V - Indicates that the coprocessor's owner is known.*/
#define REVB_COPROC_CTRL0_OWNT_V_SHIFT 0x1
#define REVB_COPROC_CTRL0_OWNT_V_SIZE 0x1
#define REVB_COPROC_CTRL0_OWNT_V_MASK (((1 << REVB_COPROC_CTRL0_OWNT_V_SIZE) - 1) << REVB_COPROC_CTRL0_OWNT_V_SHIFT)
#define REVB_COPROC_CTRL0_OWNT_V(x) (((x) & REVB_COPROC_CTRL0_OWNT_V_MASK) >> REVB_COPROC_CTRL0_OWNT_V_SHIFT)
#define REVB_COPROC_CTRL0_OWNT_V_SET(x, v) (((x) & ~REVB_COPROC_CTRL0_OWNT_V_MASK) | (((v) << REVB_COPROC_CTRL0_OWNT_V_SHIFT) & REVB_COPROC_CTRL0_OWNT_V_MASK))
/* COPROC_CTRL0_OWNT - When OWNT_V is true then this is the ID of the thread currently using the coprocessor.*/
#define REVB_COPROC_CTRL0_OWNT_SHIFT 0x8
#define REVB_COPROC_CTRL0_OWNT_SIZE 0x8
#define REVB_COPROC_CTRL0_OWNT_MASK (((1 << REVB_COPROC_CTRL0_OWNT_SIZE) - 1) << REVB_COPROC_CTRL0_OWNT_SHIFT)
#define REVB_COPROC_CTRL0_OWNT(x) (((x) & REVB_COPROC_CTRL0_OWNT_MASK) >> REVB_COPROC_CTRL0_OWNT_SHIFT)
#define REVB_COPROC_CTRL0_OWNT_SET(x, v) (((x) & ~REVB_COPROC_CTRL0_OWNT_MASK) | (((v) << REVB_COPROC_CTRL0_OWNT_SHIFT) & REVB_COPROC_CTRL0_OWNT_MASK))
/* COPROC_TBV0_WAITING - 1 bit for each of the threads. When 1 indicates that the corresponding thread is waiting for the coprocessor.*/
#define REVB_COPROC_TBV0_WAITING_SHIFT 0x0
#define REVB_COPROC_TBV0_WAITING_SIZE 0x8
#define REVB_COPROC_TBV0_WAITING_MASK (((1 << REVB_COPROC_TBV0_WAITING_SIZE) - 1) << REVB_COPROC_TBV0_WAITING_SHIFT)
#define REVB_COPROC_TBV0_WAITING(x) (((x) & REVB_COPROC_TBV0_WAITING_MASK) >> REVB_COPROC_TBV0_WAITING_SHIFT)
#define REVB_COPROC_TBV0_WAITING_SET(x, v) (((x) & ~REVB_COPROC_TBV0_WAITING_MASK) | (((v) << REVB_COPROC_TBV0_WAITING_SHIFT) & REVB_COPROC_TBV0_WAITING_MASK))
/* RES_ID_TYPE - The type of a resource.*/
#define REVB_RES_ID_TYPE_SHIFT 0x0
#define REVB_RES_ID_TYPE_SIZE 0x4
#define REVB_RES_ID_TYPE_MASK (((1 << REVB_RES_ID_TYPE_SIZE) - 1) << REVB_RES_ID_TYPE_SHIFT)
#define REVB_RES_ID_TYPE(x) (((x) & REVB_RES_ID_TYPE_MASK) >> REVB_RES_ID_TYPE_SHIFT)
#define REVB_RES_ID_TYPE_SET(x, v) (((x) & ~REVB_RES_ID_TYPE_MASK) | (((v) << REVB_RES_ID_TYPE_SHIFT) & REVB_RES_ID_TYPE_MASK))
/* RES_ID_REGID - The register ID for resource ==[[XcoreArchInstructions#GETPS][GETPS]]== / ==[[XcoreArchInstructions#SETPS][SETPS]]== accesses. Must be 0 otherwise.*/
#define REVB_RES_ID_REGID_SHIFT 0x4
#define REVB_RES_ID_REGID_SIZE 0x4
#define REVB_RES_ID_REGID_MASK (((1 << REVB_RES_ID_REGID_SIZE) - 1) << REVB_RES_ID_REGID_SHIFT)
#define REVB_RES_ID_REGID(x) (((x) & REVB_RES_ID_REGID_MASK) >> REVB_RES_ID_REGID_SHIFT)
#define REVB_RES_ID_REGID_SET(x, v) (((x) & ~REVB_RES_ID_REGID_MASK) | (((v) << REVB_RES_ID_REGID_SHIFT) & REVB_RES_ID_REGID_MASK))
/* RES_ID_RESNUM - The resource number of a resource.*/
#define REVB_RES_ID_RESNUM_SHIFT 0x8
#define REVB_RES_ID_RESNUM_SIZE 0x8
#define REVB_RES_ID_RESNUM_MASK (((1 << REVB_RES_ID_RESNUM_SIZE) - 1) << REVB_RES_ID_RESNUM_SHIFT)
#define REVB_RES_ID_RESNUM(x) (((x) & REVB_RES_ID_RESNUM_MASK) >> REVB_RES_ID_RESNUM_SHIFT)
#define REVB_RES_ID_RESNUM_SET(x, v) (((x) & ~REVB_RES_ID_RESNUM_MASK) | (((v) << REVB_RES_ID_RESNUM_SHIFT) & REVB_RES_ID_RESNUM_MASK))
/* RES_ID_PORTWIDTH - The size of a port - zero for all resources which are not ports.*/
#define REVB_RES_ID_PORTWIDTH_SHIFT 0x10
#define REVB_RES_ID_PORTWIDTH_SIZE 0x6
#define REVB_RES_ID_PORTWIDTH_MASK (((1 << REVB_RES_ID_PORTWIDTH_SIZE) - 1) << REVB_RES_ID_PORTWIDTH_SHIFT)
#define REVB_RES_ID_PORTWIDTH(x) (((x) & REVB_RES_ID_PORTWIDTH_MASK) >> REVB_RES_ID_PORTWIDTH_SHIFT)
#define REVB_RES_ID_PORTWIDTH_SET(x, v) (((x) & ~REVB_RES_ID_PORTWIDTH_MASK) | (((v) << REVB_RES_ID_PORTWIDTH_SHIFT) & REVB_RES_ID_PORTWIDTH_MASK))
/* CHAN_ID_CHANNUM - The channel end number.*/
#define REVB_CHAN_ID_CHANNUM_SHIFT 0x8
#define REVB_CHAN_ID_CHANNUM_SIZE 0x8
#define REVB_CHAN_ID_CHANNUM_MASK (((1 << REVB_CHAN_ID_CHANNUM_SIZE) - 1) << REVB_CHAN_ID_CHANNUM_SHIFT)
#define REVB_CHAN_ID_CHANNUM(x) (((x) & REVB_CHAN_ID_CHANNUM_MASK) >> REVB_CHAN_ID_CHANNUM_SHIFT)
#define REVB_CHAN_ID_CHANNUM_SET(x, v) (((x) & ~REVB_CHAN_ID_CHANNUM_MASK) | (((v) << REVB_CHAN_ID_CHANNUM_SHIFT) & REVB_CHAN_ID_CHANNUM_MASK))
/* CHAN_ID_PROCESSOR - The processor to which this resource belongs.*/
#define REVB_CHAN_ID_PROCESSOR_SHIFT 0x10
#define REVB_CHAN_ID_PROCESSOR_SIZE 0x8
#define REVB_CHAN_ID_PROCESSOR_MASK (((1 << REVB_CHAN_ID_PROCESSOR_SIZE) - 1) << REVB_CHAN_ID_PROCESSOR_SHIFT)
#define REVB_CHAN_ID_PROCESSOR(x) (((x) & REVB_CHAN_ID_PROCESSOR_MASK) >> REVB_CHAN_ID_PROCESSOR_SHIFT)
#define REVB_CHAN_ID_PROCESSOR_SET(x, v) (((x) & ~REVB_CHAN_ID_PROCESSOR_MASK) | (((v) << REVB_CHAN_ID_PROCESSOR_SHIFT) & REVB_CHAN_ID_PROCESSOR_MASK))
/* CHAN_ID_NODE - The node in which this resource is found.*/
#define REVB_CHAN_ID_NODE_SHIFT 0x18
#define REVB_CHAN_ID_NODE_SIZE 0x8
#define REVB_CHAN_ID_NODE_MASK (((1 << REVB_CHAN_ID_NODE_SIZE) - 1) << REVB_CHAN_ID_NODE_SHIFT)
#define REVB_CHAN_ID_NODE(x) (((x) & REVB_CHAN_ID_NODE_MASK) >> REVB_CHAN_ID_NODE_SHIFT)
#define REVB_CHAN_ID_NODE_SET(x, v) (((x) & ~REVB_CHAN_ID_NODE_MASK) | (((v) << REVB_CHAN_ID_NODE_SHIFT) & REVB_CHAN_ID_NODE_MASK))
/* HEADER_1BYTE_CHANNUM - The channel end number.*/
#define REVB_HEADER_1BYTE_CHANNUM_SHIFT 0x0
#define REVB_HEADER_1BYTE_CHANNUM_SIZE 0x5
#define REVB_HEADER_1BYTE_CHANNUM_MASK (((1 << REVB_HEADER_1BYTE_CHANNUM_SIZE) - 1) << REVB_HEADER_1BYTE_CHANNUM_SHIFT)
#define REVB_HEADER_1BYTE_CHANNUM(x) (((x) & REVB_HEADER_1BYTE_CHANNUM_MASK) >> REVB_HEADER_1BYTE_CHANNUM_SHIFT)
#define REVB_HEADER_1BYTE_CHANNUM_SET(x, v) (((x) & ~REVB_HEADER_1BYTE_CHANNUM_MASK) | (((v) << REVB_HEADER_1BYTE_CHANNUM_SHIFT) & REVB_HEADER_1BYTE_CHANNUM_MASK))
/* HEADER_1BYTE_PROCESSOR - The processor to which this resource belongs.*/
#define REVB_HEADER_1BYTE_PROCESSOR_SHIFT 0x5
#define REVB_HEADER_1BYTE_PROCESSOR_SIZE 0x2
#define REVB_HEADER_1BYTE_PROCESSOR_MASK (((1 << REVB_HEADER_1BYTE_PROCESSOR_SIZE) - 1) << REVB_HEADER_1BYTE_PROCESSOR_SHIFT)
#define REVB_HEADER_1BYTE_PROCESSOR(x) (((x) & REVB_HEADER_1BYTE_PROCESSOR_MASK) >> REVB_HEADER_1BYTE_PROCESSOR_SHIFT)
#define REVB_HEADER_1BYTE_PROCESSOR_SET(x, v) (((x) & ~REVB_HEADER_1BYTE_PROCESSOR_MASK) | (((v) << REVB_HEADER_1BYTE_PROCESSOR_SHIFT) & REVB_HEADER_1BYTE_PROCESSOR_MASK))
/* HEADER_1BYTE_NODE - The node in which this resource is found.*/
#define REVB_HEADER_1BYTE_NODE_SHIFT 0x7
#define REVB_HEADER_1BYTE_NODE_SIZE 0x1
#define REVB_HEADER_1BYTE_NODE_MASK (((1 << REVB_HEADER_1BYTE_NODE_SIZE) - 1) << REVB_HEADER_1BYTE_NODE_SHIFT)
#define REVB_HEADER_1BYTE_NODE(x) (((x) & REVB_HEADER_1BYTE_NODE_MASK) >> REVB_HEADER_1BYTE_NODE_SHIFT)
#define REVB_HEADER_1BYTE_NODE_SET(x, v) (((x) & ~REVB_HEADER_1BYTE_NODE_MASK) | (((v) << REVB_HEADER_1BYTE_NODE_SHIFT) & REVB_HEADER_1BYTE_NODE_MASK))
/* HEADER_3BYTE_CHANNUM - The channel end number.*/
#define REVB_HEADER_3BYTE_CHANNUM_SHIFT 0x0
#define REVB_HEADER_3BYTE_CHANNUM_SIZE 0x8
#define REVB_HEADER_3BYTE_CHANNUM_MASK (((1 << REVB_HEADER_3BYTE_CHANNUM_SIZE) - 1) << REVB_HEADER_3BYTE_CHANNUM_SHIFT)
#define REVB_HEADER_3BYTE_CHANNUM(x) (((x) & REVB_HEADER_3BYTE_CHANNUM_MASK) >> REVB_HEADER_3BYTE_CHANNUM_SHIFT)
#define REVB_HEADER_3BYTE_CHANNUM_SET(x, v) (((x) & ~REVB_HEADER_3BYTE_CHANNUM_MASK) | (((v) << REVB_HEADER_3BYTE_CHANNUM_SHIFT) & REVB_HEADER_3BYTE_CHANNUM_MASK))
/* HEADER_3BYTE_PROCESSOR - The processor to which this resource belongs.*/
#define REVB_HEADER_3BYTE_PROCESSOR_SHIFT 0x8
#define REVB_HEADER_3BYTE_PROCESSOR_SIZE 0x8
#define REVB_HEADER_3BYTE_PROCESSOR_MASK (((1 << REVB_HEADER_3BYTE_PROCESSOR_SIZE) - 1) << REVB_HEADER_3BYTE_PROCESSOR_SHIFT)
#define REVB_HEADER_3BYTE_PROCESSOR(x) (((x) & REVB_HEADER_3BYTE_PROCESSOR_MASK) >> REVB_HEADER_3BYTE_PROCESSOR_SHIFT)
#define REVB_HEADER_3BYTE_PROCESSOR_SET(x, v) (((x) & ~REVB_HEADER_3BYTE_PROCESSOR_MASK) | (((v) << REVB_HEADER_3BYTE_PROCESSOR_SHIFT) & REVB_HEADER_3BYTE_PROCESSOR_MASK))
/* HEADER_3BYTE_NODE - The node in which this resource is found.*/
#define REVB_HEADER_3BYTE_NODE_SHIFT 0x10
#define REVB_HEADER_3BYTE_NODE_SIZE 0x8
#define REVB_HEADER_3BYTE_NODE_MASK (((1 << REVB_HEADER_3BYTE_NODE_SIZE) - 1) << REVB_HEADER_3BYTE_NODE_SHIFT)
#define REVB_HEADER_3BYTE_NODE(x) (((x) & REVB_HEADER_3BYTE_NODE_MASK) >> REVB_HEADER_3BYTE_NODE_SHIFT)
#define REVB_HEADER_3BYTE_NODE_SET(x, v) (((x) & ~REVB_HEADER_3BYTE_NODE_MASK) | (((v) << REVB_HEADER_3BYTE_NODE_SHIFT) & REVB_HEADER_3BYTE_NODE_MASK))
/* SETCTRL_MODE - Select mode to change.*/
#define REVB_SETCTRL_MODE_SHIFT 0x0
#define REVB_SETCTRL_MODE_SIZE 0x3
#define REVB_SETCTRL_MODE_MASK (((1 << REVB_SETCTRL_MODE_SIZE) - 1) << REVB_SETCTRL_MODE_SHIFT)
#define REVB_SETCTRL_MODE(x) (((x) & REVB_SETCTRL_MODE_MASK) >> REVB_SETCTRL_MODE_SHIFT)
#define REVB_SETCTRL_MODE_SET(x, v) (((x) & ~REVB_SETCTRL_MODE_MASK) | (((v) << REVB_SETCTRL_MODE_SHIFT) & REVB_SETCTRL_MODE_MASK))
/* SETCTRL_VALUE - Value for mode change.*/
#define REVB_SETCTRL_VALUE_SHIFT 0x3
#define REVB_SETCTRL_VALUE_SIZE 0x9
#define REVB_SETCTRL_VALUE_MASK (((1 << REVB_SETCTRL_VALUE_SIZE) - 1) << REVB_SETCTRL_VALUE_SHIFT)
#define REVB_SETCTRL_VALUE(x) (((x) & REVB_SETCTRL_VALUE_MASK) >> REVB_SETCTRL_VALUE_SHIFT)
#define REVB_SETCTRL_VALUE_SET(x, v) (((x) & ~REVB_SETCTRL_VALUE_MASK) | (((v) << REVB_SETCTRL_VALUE_SHIFT) & REVB_SETCTRL_VALUE_MASK))
/* SETCTRL_LMODE - Long mode bits.*/
#define REVB_SETCTRL_LMODE_SHIFT 0xc
#define REVB_SETCTRL_LMODE_SIZE 0x4
#define REVB_SETCTRL_LMODE_MASK (((1 << REVB_SETCTRL_LMODE_SIZE) - 1) << REVB_SETCTRL_LMODE_SHIFT)
#define REVB_SETCTRL_LMODE(x) (((x) & REVB_SETCTRL_LMODE_MASK) >> REVB_SETCTRL_LMODE_SHIFT)
#define REVB_SETCTRL_LMODE_SET(x, v) (((x) & ~REVB_SETCTRL_LMODE_MASK) | (((v) << REVB_SETCTRL_LMODE_SHIFT) & REVB_SETCTRL_LMODE_MASK))
/* DBG_INT_REQ_DBG - Request a debug interrupt on the processor.*/
#define REVB_DBG_INT_REQ_DBG_SHIFT 0x0
#define REVB_DBG_INT_REQ_DBG_SIZE 0x1
#define REVB_DBG_INT_REQ_DBG_MASK (((1 << REVB_DBG_INT_REQ_DBG_SIZE) - 1) << REVB_DBG_INT_REQ_DBG_SHIFT)
#define REVB_DBG_INT_REQ_DBG(x) (((x) & REVB_DBG_INT_REQ_DBG_MASK) >> REVB_DBG_INT_REQ_DBG_SHIFT)
#define REVB_DBG_INT_REQ_DBG_SET(x, v) (((x) & ~REVB_DBG_INT_REQ_DBG_MASK) | (((v) << REVB_DBG_INT_REQ_DBG_SHIFT) & REVB_DBG_INT_REQ_DBG_MASK))
/* DBG_INT_IN_DBG - 1 when the processor is in debug mode.*/
#define REVB_DBG_INT_IN_DBG_SHIFT 0x1
#define REVB_DBG_INT_IN_DBG_SIZE 0x1
#define REVB_DBG_INT_IN_DBG_MASK (((1 << REVB_DBG_INT_IN_DBG_SIZE) - 1) << REVB_DBG_INT_IN_DBG_SHIFT)
#define REVB_DBG_INT_IN_DBG(x) (((x) & REVB_DBG_INT_IN_DBG_MASK) >> REVB_DBG_INT_IN_DBG_SHIFT)
#define REVB_DBG_INT_IN_DBG_SET(x, v) (((x) & ~REVB_DBG_INT_IN_DBG_MASK) | (((v) << REVB_DBG_INT_IN_DBG_SHIFT) & REVB_DBG_INT_IN_DBG_MASK))
/* DBG_CTRL_PSWITCH_RO - When 1 the PSwitch is restricted to RO access to all CRW registers.*/
#define REVB_DBG_CTRL_PSWITCH_RO_SHIFT 0x0
#define REVB_DBG_CTRL_PSWITCH_RO_SIZE 0x1
#define REVB_DBG_CTRL_PSWITCH_RO_MASK (((1 << REVB_DBG_CTRL_PSWITCH_RO_SIZE) - 1) << REVB_DBG_CTRL_PSWITCH_RO_SHIFT)
#define REVB_DBG_CTRL_PSWITCH_RO(x) (((x) & REVB_DBG_CTRL_PSWITCH_RO_MASK) >> REVB_DBG_CTRL_PSWITCH_RO_SHIFT)
#define REVB_DBG_CTRL_PSWITCH_RO_SET(x, v) (((x) & ~REVB_DBG_CTRL_PSWITCH_RO_MASK) | (((v) << REVB_DBG_CTRL_PSWITCH_RO_SHIFT) & REVB_DBG_CTRL_PSWITCH_RO_MASK))
/* DEVICE_ID0_VERSION - XCore version.*/
#define REVB_DEVICE_ID0_VERSION_SHIFT 0x0
#define REVB_DEVICE_ID0_VERSION_SIZE 0x8
#define REVB_DEVICE_ID0_VERSION_MASK (((1 << REVB_DEVICE_ID0_VERSION_SIZE) - 1) << REVB_DEVICE_ID0_VERSION_SHIFT)
#define REVB_DEVICE_ID0_VERSION(x) (((x) & REVB_DEVICE_ID0_VERSION_MASK) >> REVB_DEVICE_ID0_VERSION_SHIFT)
#define REVB_DEVICE_ID0_VERSION_SET(x, v) (((x) & ~REVB_DEVICE_ID0_VERSION_MASK) | (((v) << REVB_DEVICE_ID0_VERSION_SHIFT) & REVB_DEVICE_ID0_VERSION_MASK))
/* DEVICE_ID0_REVISION - XCore revision.*/
#define REVB_DEVICE_ID0_REVISION_SHIFT 0x8
#define REVB_DEVICE_ID0_REVISION_SIZE 0x8
#define REVB_DEVICE_ID0_REVISION_MASK (((1 << REVB_DEVICE_ID0_REVISION_SIZE) - 1) << REVB_DEVICE_ID0_REVISION_SHIFT)
#define REVB_DEVICE_ID0_REVISION(x) (((x) & REVB_DEVICE_ID0_REVISION_MASK) >> REVB_DEVICE_ID0_REVISION_SHIFT)
#define REVB_DEVICE_ID0_REVISION_SET(x, v) (((x) & ~REVB_DEVICE_ID0_REVISION_MASK) | (((v) << REVB_DEVICE_ID0_REVISION_SHIFT) & REVB_DEVICE_ID0_REVISION_MASK))
/* DEVICE_ID0_NODE - Number of the node in which this XCore is located.*/
#define REVB_DEVICE_ID0_NODE_SHIFT 0x10
#define REVB_DEVICE_ID0_NODE_SIZE 0x8
#define REVB_DEVICE_ID0_NODE_MASK (((1 << REVB_DEVICE_ID0_NODE_SIZE) - 1) << REVB_DEVICE_ID0_NODE_SHIFT)
#define REVB_DEVICE_ID0_NODE(x) (((x) & REVB_DEVICE_ID0_NODE_MASK) >> REVB_DEVICE_ID0_NODE_SHIFT)
#define REVB_DEVICE_ID0_NODE_SET(x, v) (((x) & ~REVB_DEVICE_ID0_NODE_MASK) | (((v) << REVB_DEVICE_ID0_NODE_SHIFT) & REVB_DEVICE_ID0_NODE_MASK))
/* DEVICE_ID0_PID - Processor ID of this XCore.*/
#define REVB_DEVICE_ID0_PID_SHIFT 0x18
#define REVB_DEVICE_ID0_PID_SIZE 0x8
#define REVB_DEVICE_ID0_PID_MASK (((1 << REVB_DEVICE_ID0_PID_SIZE) - 1) << REVB_DEVICE_ID0_PID_SHIFT)
#define REVB_DEVICE_ID0_PID(x) (((x) & REVB_DEVICE_ID0_PID_MASK) >> REVB_DEVICE_ID0_PID_SHIFT)
#define REVB_DEVICE_ID0_PID_SET(x, v) (((x) & ~REVB_DEVICE_ID0_PID_MASK) | (((v) << REVB_DEVICE_ID0_PID_SHIFT) & REVB_DEVICE_ID0_PID_MASK))
/* DEVICE_ID1_NUM_THREADS - Number of threads.*/
#define REVB_DEVICE_ID1_NUM_THREADS_SHIFT 0x0
#define REVB_DEVICE_ID1_NUM_THREADS_SIZE 0x8
#define REVB_DEVICE_ID1_NUM_THREADS_MASK (((1 << REVB_DEVICE_ID1_NUM_THREADS_SIZE) - 1) << REVB_DEVICE_ID1_NUM_THREADS_SHIFT)
#define REVB_DEVICE_ID1_NUM_THREADS(x) (((x) & REVB_DEVICE_ID1_NUM_THREADS_MASK) >> REVB_DEVICE_ID1_NUM_THREADS_SHIFT)
#define REVB_DEVICE_ID1_NUM_THREADS_SET(x, v) (((x) & ~REVB_DEVICE_ID1_NUM_THREADS_MASK) | (((v) << REVB_DEVICE_ID1_NUM_THREADS_SHIFT) & REVB_DEVICE_ID1_NUM_THREADS_MASK))
/* DEVICE_ID1_NUM_SYNCS - Number of synchronisers.*/
#define REVB_DEVICE_ID1_NUM_SYNCS_SHIFT 0x8
#define REVB_DEVICE_ID1_NUM_SYNCS_SIZE 0x8
#define REVB_DEVICE_ID1_NUM_SYNCS_MASK (((1 << REVB_DEVICE_ID1_NUM_SYNCS_SIZE) - 1) << REVB_DEVICE_ID1_NUM_SYNCS_SHIFT)
#define REVB_DEVICE_ID1_NUM_SYNCS(x) (((x) & REVB_DEVICE_ID1_NUM_SYNCS_MASK) >> REVB_DEVICE_ID1_NUM_SYNCS_SHIFT)
#define REVB_DEVICE_ID1_NUM_SYNCS_SET(x, v) (((x) & ~REVB_DEVICE_ID1_NUM_SYNCS_MASK) | (((v) << REVB_DEVICE_ID1_NUM_SYNCS_SHIFT) & REVB_DEVICE_ID1_NUM_SYNCS_MASK))
/* DEVICE_ID1_NUM_LOCKS - Number of the locks.*/
#define REVB_DEVICE_ID1_NUM_LOCKS_SHIFT 0x10
#define REVB_DEVICE_ID1_NUM_LOCKS_SIZE 0x8
#define REVB_DEVICE_ID1_NUM_LOCKS_MASK (((1 << REVB_DEVICE_ID1_NUM_LOCKS_SIZE) - 1) << REVB_DEVICE_ID1_NUM_LOCKS_SHIFT)
#define REVB_DEVICE_ID1_NUM_LOCKS(x) (((x) & REVB_DEVICE_ID1_NUM_LOCKS_MASK) >> REVB_DEVICE_ID1_NUM_LOCKS_SHIFT)
#define REVB_DEVICE_ID1_NUM_LOCKS_SET(x, v) (((x) & ~REVB_DEVICE_ID1_NUM_LOCKS_MASK) | (((v) << REVB_DEVICE_ID1_NUM_LOCKS_SHIFT) & REVB_DEVICE_ID1_NUM_LOCKS_MASK))
/* DEVICE_ID1_NUM_CHANENDS - Number of channel ends.*/
#define REVB_DEVICE_ID1_NUM_CHANENDS_SHIFT 0x18
#define REVB_DEVICE_ID1_NUM_CHANENDS_SIZE 0x8
#define REVB_DEVICE_ID1_NUM_CHANENDS_MASK (((1 << REVB_DEVICE_ID1_NUM_CHANENDS_SIZE) - 1) << REVB_DEVICE_ID1_NUM_CHANENDS_SHIFT)
#define REVB_DEVICE_ID1_NUM_CHANENDS(x) (((x) & REVB_DEVICE_ID1_NUM_CHANENDS_MASK) >> REVB_DEVICE_ID1_NUM_CHANENDS_SHIFT)
#define REVB_DEVICE_ID1_NUM_CHANENDS_SET(x, v) (((x) & ~REVB_DEVICE_ID1_NUM_CHANENDS_MASK) | (((v) << REVB_DEVICE_ID1_NUM_CHANENDS_SHIFT) & REVB_DEVICE_ID1_NUM_CHANENDS_MASK))
/* DEVICE_ID2_NUM_TIMERS - Number of timers.*/
#define REVB_DEVICE_ID2_NUM_TIMERS_SHIFT 0x0
#define REVB_DEVICE_ID2_NUM_TIMERS_SIZE 0x8
#define REVB_DEVICE_ID2_NUM_TIMERS_MASK (((1 << REVB_DEVICE_ID2_NUM_TIMERS_SIZE) - 1) << REVB_DEVICE_ID2_NUM_TIMERS_SHIFT)
#define REVB_DEVICE_ID2_NUM_TIMERS(x) (((x) & REVB_DEVICE_ID2_NUM_TIMERS_MASK) >> REVB_DEVICE_ID2_NUM_TIMERS_SHIFT)
#define REVB_DEVICE_ID2_NUM_TIMERS_SET(x, v) (((x) & ~REVB_DEVICE_ID2_NUM_TIMERS_MASK) | (((v) << REVB_DEVICE_ID2_NUM_TIMERS_SHIFT) & REVB_DEVICE_ID2_NUM_TIMERS_MASK))
/* DEVICE_ID2_NUM_CLKBLKS - Number of clock blocks.*/
#define REVB_DEVICE_ID2_NUM_CLKBLKS_SHIFT 0x8
#define REVB_DEVICE_ID2_NUM_CLKBLKS_SIZE 0x8
#define REVB_DEVICE_ID2_NUM_CLKBLKS_MASK (((1 << REVB_DEVICE_ID2_NUM_CLKBLKS_SIZE) - 1) << REVB_DEVICE_ID2_NUM_CLKBLKS_SHIFT)
#define REVB_DEVICE_ID2_NUM_CLKBLKS(x) (((x) & REVB_DEVICE_ID2_NUM_CLKBLKS_MASK) >> REVB_DEVICE_ID2_NUM_CLKBLKS_SHIFT)
#define REVB_DEVICE_ID2_NUM_CLKBLKS_SET(x, v) (((x) & ~REVB_DEVICE_ID2_NUM_CLKBLKS_MASK) | (((v) << REVB_DEVICE_ID2_NUM_CLKBLKS_SHIFT) & REVB_DEVICE_ID2_NUM_CLKBLKS_MASK))
/* JUNK - 1 when the current packet is considered junk and will be thrown away.*/
#define REVB_JUNK_SHIFT 0x2
#define REVB_JUNK_SIZE 0x1
#define REVB_JUNK_MASK (((1 << REVB_JUNK_SIZE) - 1) << REVB_JUNK_SHIFT)
#define REVB_JUNK(x) (((x) & REVB_JUNK_MASK) >> REVB_JUNK_SHIFT)
#define REVB_JUNK_SET(x, v) (((x) & ~REVB_JUNK_MASK) | (((v) << REVB_JUNK_SHIFT) & REVB_JUNK_MASK))
/* NETWORK - Network ID for the PLink.*/
#define REVB_NETWORK_SHIFT 0x4
#define REVB_NETWORK_SIZE 0x2
#define REVB_NETWORK_MASK (((1 << REVB_NETWORK_SIZE) - 1) << REVB_NETWORK_SHIFT)
#define REVB_NETWORK(x) (((x) & REVB_NETWORK_MASK) >> REVB_NETWORK_SHIFT)
#define REVB_NETWORK_SET(x, v) (((x) & ~REVB_NETWORK_MASK) | (((v) << REVB_NETWORK_SHIFT) & REVB_NETWORK_MASK))
/* SRC_TARGET_ID - Based on SRC_TARGET_TYPE value, it represents channelEnd ID or Idle status.*/
#define REVB_SRC_TARGET_ID_SHIFT 0x10
#define REVB_SRC_TARGET_ID_SIZE 0x8
#define REVB_SRC_TARGET_ID_MASK (((1 << REVB_SRC_TARGET_ID_SIZE) - 1) << REVB_SRC_TARGET_ID_SHIFT)
#define REVB_SRC_TARGET_ID(x) (((x) & REVB_SRC_TARGET_ID_MASK) >> REVB_SRC_TARGET_ID_SHIFT)
#define REVB_SRC_TARGET_ID_SET(x, v) (((x) & ~REVB_SRC_TARGET_ID_MASK) | (((v) << REVB_SRC_TARGET_ID_SHIFT) & REVB_SRC_TARGET_ID_MASK))
/* SRC_TARGET_TYPE - 00 - ChannelEnd, 01 - ERROR, 10 - PSCTL, 11 - Idle.*/
#define REVB_SRC_TARGET_TYPE_SHIFT 0x18
#define REVB_SRC_TARGET_TYPE_SIZE 0x2
#define REVB_SRC_TARGET_TYPE_MASK (((1 << REVB_SRC_TARGET_TYPE_SIZE) - 1) << REVB_SRC_TARGET_TYPE_SHIFT)
#define REVB_SRC_TARGET_TYPE(x) (((x) & REVB_SRC_TARGET_TYPE_MASK) >> REVB_SRC_TARGET_TYPE_SHIFT)
#define REVB_SRC_TARGET_TYPE_SET(x, v) (((x) & ~REVB_SRC_TARGET_TYPE_MASK) | (((v) << REVB_SRC_TARGET_TYPE_SHIFT) & REVB_SRC_TARGET_TYPE_MASK))
/* SS_DEVICE_ID0_VERSION - SSwitch version.*/
#define REVB_SS_DEVICE_ID0_VERSION_SHIFT 0x0
#define REVB_SS_DEVICE_ID0_VERSION_SIZE 0x8
#define REVB_SS_DEVICE_ID0_VERSION_MASK (((1 << REVB_SS_DEVICE_ID0_VERSION_SIZE) - 1) << REVB_SS_DEVICE_ID0_VERSION_SHIFT)
#define REVB_SS_DEVICE_ID0_VERSION(x) (((x) & REVB_SS_DEVICE_ID0_VERSION_MASK) >> REVB_SS_DEVICE_ID0_VERSION_SHIFT)
#define REVB_SS_DEVICE_ID0_VERSION_SET(x, v) (((x) & ~REVB_SS_DEVICE_ID0_VERSION_MASK) | (((v) << REVB_SS_DEVICE_ID0_VERSION_SHIFT) & REVB_SS_DEVICE_ID0_VERSION_MASK))
/* SS_DEVICE_ID0_REVISION - SSwitch revision.*/
#define REVB_SS_DEVICE_ID0_REVISION_SHIFT 0x8
#define REVB_SS_DEVICE_ID0_REVISION_SIZE 0x8
#define REVB_SS_DEVICE_ID0_REVISION_MASK (((1 << REVB_SS_DEVICE_ID0_REVISION_SIZE) - 1) << REVB_SS_DEVICE_ID0_REVISION_SHIFT)
#define REVB_SS_DEVICE_ID0_REVISION(x) (((x) & REVB_SS_DEVICE_ID0_REVISION_MASK) >> REVB_SS_DEVICE_ID0_REVISION_SHIFT)
#define REVB_SS_DEVICE_ID0_REVISION_SET(x, v) (((x) & ~REVB_SS_DEVICE_ID0_REVISION_MASK) | (((v) << REVB_SS_DEVICE_ID0_REVISION_SHIFT) & REVB_SS_DEVICE_ID0_REVISION_MASK))
/* SS_DEVICE_ID0_BOOT_CTRL - Sampled values of BootCtl pins on Power On Reset.*/
#define REVB_SS_DEVICE_ID0_BOOT_CTRL_SHIFT 0x10
#define REVB_SS_DEVICE_ID0_BOOT_CTRL_SIZE 0x8
#define REVB_SS_DEVICE_ID0_BOOT_CTRL_MASK (((1 << REVB_SS_DEVICE_ID0_BOOT_CTRL_SIZE) - 1) << REVB_SS_DEVICE_ID0_BOOT_CTRL_SHIFT)
#define REVB_SS_DEVICE_ID0_BOOT_CTRL(x) (((x) & REVB_SS_DEVICE_ID0_BOOT_CTRL_MASK) >> REVB_SS_DEVICE_ID0_BOOT_CTRL_SHIFT)
#define REVB_SS_DEVICE_ID0_BOOT_CTRL_SET(x, v) (((x) & ~REVB_SS_DEVICE_ID0_BOOT_CTRL_MASK) | (((v) << REVB_SS_DEVICE_ID0_BOOT_CTRL_SHIFT) & REVB_SS_DEVICE_ID0_BOOT_CTRL_MASK))
/* SS_DEVICE_ID1_NUM_PLINKS_PER_PROC - Number of processors on the device.*/
#define REVB_SS_DEVICE_ID1_NUM_PLINKS_PER_PROC_SHIFT 0x0
#define REVB_SS_DEVICE_ID1_NUM_PLINKS_PER_PROC_SIZE 0x8
#define REVB_SS_DEVICE_ID1_NUM_PLINKS_PER_PROC_MASK (((1 << REVB_SS_DEVICE_ID1_NUM_PLINKS_PER_PROC_SIZE) - 1) << REVB_SS_DEVICE_ID1_NUM_PLINKS_PER_PROC_SHIFT)
#define REVB_SS_DEVICE_ID1_NUM_PLINKS_PER_PROC(x) (((x) & REVB_SS_DEVICE_ID1_NUM_PLINKS_PER_PROC_MASK) >> REVB_SS_DEVICE_ID1_NUM_PLINKS_PER_PROC_SHIFT)
#define REVB_SS_DEVICE_ID1_NUM_PLINKS_PER_PROC_SET(x, v) (((x) & ~REVB_SS_DEVICE_ID1_NUM_PLINKS_PER_PROC_MASK) | (((v) << REVB_SS_DEVICE_ID1_NUM_PLINKS_PER_PROC_SHIFT) & REVB_SS_DEVICE_ID1_NUM_PLINKS_PER_PROC_MASK))
/* SS_DEVICE_ID1_NUM_PROCESSORS - Number of processors on the SSwitch.*/
#define REVB_SS_DEVICE_ID1_NUM_PROCESSORS_SHIFT 0x8
#define REVB_SS_DEVICE_ID1_NUM_PROCESSORS_SIZE 0x8
#define REVB_SS_DEVICE_ID1_NUM_PROCESSORS_MASK (((1 << REVB_SS_DEVICE_ID1_NUM_PROCESSORS_SIZE) - 1) << REVB_SS_DEVICE_ID1_NUM_PROCESSORS_SHIFT)
#define REVB_SS_DEVICE_ID1_NUM_PROCESSORS(x) (((x) & REVB_SS_DEVICE_ID1_NUM_PROCESSORS_MASK) >> REVB_SS_DEVICE_ID1_NUM_PROCESSORS_SHIFT)
#define REVB_SS_DEVICE_ID1_NUM_PROCESSORS_SET(x, v) (((x) & ~REVB_SS_DEVICE_ID1_NUM_PROCESSORS_MASK) | (((v) << REVB_SS_DEVICE_ID1_NUM_PROCESSORS_SHIFT) & REVB_SS_DEVICE_ID1_NUM_PROCESSORS_MASK))
/* SS_DEVICE_ID1_NUM_SLINKS - Number of SLinks on the SSwitch.*/
#define REVB_SS_DEVICE_ID1_NUM_SLINKS_SHIFT 0x10
#define REVB_SS_DEVICE_ID1_NUM_SLINKS_SIZE 0x8
#define REVB_SS_DEVICE_ID1_NUM_SLINKS_MASK (((1 << REVB_SS_DEVICE_ID1_NUM_SLINKS_SIZE) - 1) << REVB_SS_DEVICE_ID1_NUM_SLINKS_SHIFT)
#define REVB_SS_DEVICE_ID1_NUM_SLINKS(x) (((x) & REVB_SS_DEVICE_ID1_NUM_SLINKS_MASK) >> REVB_SS_DEVICE_ID1_NUM_SLINKS_SHIFT)
#define REVB_SS_DEVICE_ID1_NUM_SLINKS_SET(x, v) (((x) & ~REVB_SS_DEVICE_ID1_NUM_SLINKS_MASK) | (((v) << REVB_SS_DEVICE_ID1_NUM_SLINKS_SHIFT) & REVB_SS_DEVICE_ID1_NUM_SLINKS_MASK))
/* SS_NODE_CONFIG_HEADERS - 0 = 2-byte headers, 1 = 1-byte headers (reset as 0).*/
#define REVB_SS_NODE_CONFIG_HEADERS_SHIFT 0x0
#define REVB_SS_NODE_CONFIG_HEADERS_SIZE 0x1
#define REVB_SS_NODE_CONFIG_HEADERS_MASK (((1 << REVB_SS_NODE_CONFIG_HEADERS_SIZE) - 1) << REVB_SS_NODE_CONFIG_HEADERS_SHIFT)
#define REVB_SS_NODE_CONFIG_HEADERS(x) (((x) & REVB_SS_NODE_CONFIG_HEADERS_MASK) >> REVB_SS_NODE_CONFIG_HEADERS_SHIFT)
#define REVB_SS_NODE_CONFIG_HEADERS_SET(x, v) (((x) & ~REVB_SS_NODE_CONFIG_HEADERS_MASK) | (((v) << REVB_SS_NODE_CONFIG_HEADERS_SHIFT) & REVB_SS_NODE_CONFIG_HEADERS_MASK))
/* SS_NODE_CONFIG_CONFIG_STATUS - 0 = Switch configuration in progress. 1 = Switch configurtion done. Duration Switch configuration, all the packets to PSCTL/SSCTL will be routed back on the same incomming link.*/
#define REVB_SS_NODE_CONFIG_CONFIG_STATUS_SHIFT 0x1
#define REVB_SS_NODE_CONFIG_CONFIG_STATUS_SIZE 0x1
#define REVB_SS_NODE_CONFIG_CONFIG_STATUS_MASK (((1 << REVB_SS_NODE_CONFIG_CONFIG_STATUS_SIZE) - 1) << REVB_SS_NODE_CONFIG_CONFIG_STATUS_SHIFT)
#define REVB_SS_NODE_CONFIG_CONFIG_STATUS(x) (((x) & REVB_SS_NODE_CONFIG_CONFIG_STATUS_MASK) >> REVB_SS_NODE_CONFIG_CONFIG_STATUS_SHIFT)
#define REVB_SS_NODE_CONFIG_CONFIG_STATUS_SET(x, v) (((x) & ~REVB_SS_NODE_CONFIG_CONFIG_STATUS_MASK) | (((v) << REVB_SS_NODE_CONFIG_CONFIG_STATUS_SHIFT) & REVB_SS_NODE_CONFIG_CONFIG_STATUS_MASK))
/* SS_NODE_ID_ID - The unique ID of this node.*/
#define REVB_SS_NODE_ID_ID_SHIFT 0x0
#define REVB_SS_NODE_ID_ID_SIZE 0x8
#define REVB_SS_NODE_ID_ID_MASK (((1 << REVB_SS_NODE_ID_ID_SIZE) - 1) << REVB_SS_NODE_ID_ID_SHIFT)
#define REVB_SS_NODE_ID_ID(x) (((x) & REVB_SS_NODE_ID_ID_MASK) >> REVB_SS_NODE_ID_ID_SHIFT)
#define REVB_SS_NODE_ID_ID_SET(x, v) (((x) & ~REVB_SS_NODE_ID_ID_MASK) | (((v) << REVB_SS_NODE_ID_ID_SHIFT) & REVB_SS_NODE_ID_ID_MASK))
/* SS_PLL_CTL_INPUT_DIVISOR - Oscilator input divider value range from 1 (8'h0) to 32 (8'h0F). N value.*/
#define REVB_SS_PLL_CTL_INPUT_DIVISOR_SHIFT 0x0
#define REVB_SS_PLL_CTL_INPUT_DIVISOR_SIZE 0x5
#define REVB_SS_PLL_CTL_INPUT_DIVISOR_MASK (((1 << REVB_SS_PLL_CTL_INPUT_DIVISOR_SIZE) - 1) << REVB_SS_PLL_CTL_INPUT_DIVISOR_SHIFT)
#define REVB_SS_PLL_CTL_INPUT_DIVISOR(x) (((x) & REVB_SS_PLL_CTL_INPUT_DIVISOR_MASK) >> REVB_SS_PLL_CTL_INPUT_DIVISOR_SHIFT)
#define REVB_SS_PLL_CTL_INPUT_DIVISOR_SET(x, v) (((x) & ~REVB_SS_PLL_CTL_INPUT_DIVISOR_MASK) | (((v) << REVB_SS_PLL_CTL_INPUT_DIVISOR_SHIFT) & REVB_SS_PLL_CTL_INPUT_DIVISOR_MASK))
/* SS_PLL_CTL_FEEDBACK_MUL - Feedback multiplication ratio, range from 1 (8'h0) to 255 (8'hFE). M value.*/
#define REVB_SS_PLL_CTL_FEEDBACK_MUL_SHIFT 0x8
#define REVB_SS_PLL_CTL_FEEDBACK_MUL_SIZE 0x8
#define REVB_SS_PLL_CTL_FEEDBACK_MUL_MASK (((1 << REVB_SS_PLL_CTL_FEEDBACK_MUL_SIZE) - 1) << REVB_SS_PLL_CTL_FEEDBACK_MUL_SHIFT)
#define REVB_SS_PLL_CTL_FEEDBACK_MUL(x) (((x) & REVB_SS_PLL_CTL_FEEDBACK_MUL_MASK) >> REVB_SS_PLL_CTL_FEEDBACK_MUL_SHIFT)
#define REVB_SS_PLL_CTL_FEEDBACK_MUL_SET(x, v) (((x) & ~REVB_SS_PLL_CTL_FEEDBACK_MUL_MASK) | (((v) << REVB_SS_PLL_CTL_FEEDBACK_MUL_SHIFT) & REVB_SS_PLL_CTL_FEEDBACK_MUL_MASK))
/* SS_PLL_CTL_POST_DIVISOR - Output divider value range from 1 (8'h0) to 250 (8'hF9). P value.*/
#define REVB_SS_PLL_CTL_POST_DIVISOR_SHIFT 0x10
#define REVB_SS_PLL_CTL_POST_DIVISOR_SIZE 0x8
#define REVB_SS_PLL_CTL_POST_DIVISOR_MASK (((1 << REVB_SS_PLL_CTL_POST_DIVISOR_SIZE) - 1) << REVB_SS_PLL_CTL_POST_DIVISOR_SHIFT)
#define REVB_SS_PLL_CTL_POST_DIVISOR(x) (((x) & REVB_SS_PLL_CTL_POST_DIVISOR_MASK) >> REVB_SS_PLL_CTL_POST_DIVISOR_SHIFT)
#define REVB_SS_PLL_CTL_POST_DIVISOR_SET(x, v) (((x) & ~REVB_SS_PLL_CTL_POST_DIVISOR_MASK) | (((v) << REVB_SS_PLL_CTL_POST_DIVISOR_SHIFT) & REVB_SS_PLL_CTL_POST_DIVISOR_MASK))
/* SS_PLL_CTL_VCO_RANGE - VCO operating range, 0 (250MHz <= frequency <= 500MHz), 1 (500MHz <= frequency <= 1GHz).*/
#define REVB_SS_PLL_CTL_VCO_RANGE_SHIFT 0x18
#define REVB_SS_PLL_CTL_VCO_RANGE_SIZE 0x1
#define REVB_SS_PLL_CTL_VCO_RANGE_MASK (((1 << REVB_SS_PLL_CTL_VCO_RANGE_SIZE) - 1) << REVB_SS_PLL_CTL_VCO_RANGE_SHIFT)
#define REVB_SS_PLL_CTL_VCO_RANGE(x) (((x) & REVB_SS_PLL_CTL_VCO_RANGE_MASK) >> REVB_SS_PLL_CTL_VCO_RANGE_SHIFT)
#define REVB_SS_PLL_CTL_VCO_RANGE_SET(x, v) (((x) & ~REVB_SS_PLL_CTL_VCO_RANGE_MASK) | (((v) << REVB_SS_PLL_CTL_VCO_RANGE_SHIFT) & REVB_SS_PLL_CTL_VCO_RANGE_MASK))
/* SS_CLK_DIVIDER_CLK_DIV - SSwitch clock generation, see the following table of actual division factor*/
#define REVB_SS_CLK_DIVIDER_CLK_DIV_SHIFT 0x0
#define REVB_SS_CLK_DIVIDER_CLK_DIV_SIZE 0x8
#define REVB_SS_CLK_DIVIDER_CLK_DIV_MASK (((1 << REVB_SS_CLK_DIVIDER_CLK_DIV_SIZE) - 1) << REVB_SS_CLK_DIVIDER_CLK_DIV_SHIFT)
#define REVB_SS_CLK_DIVIDER_CLK_DIV(x) (((x) & REVB_SS_CLK_DIVIDER_CLK_DIV_MASK) >> REVB_SS_CLK_DIVIDER_CLK_DIV_SHIFT)
#define REVB_SS_CLK_DIVIDER_CLK_DIV_SET(x, v) (((x) & ~REVB_SS_CLK_DIVIDER_CLK_DIV_MASK) | (((v) << REVB_SS_CLK_DIVIDER_CLK_DIV_SHIFT) & REVB_SS_CLK_DIVIDER_CLK_DIV_MASK))
/* SS_SSWITCH_REF_CLK_DIV - Software ref. clock divider*/
#define REVB_SS_SSWITCH_REF_CLK_DIV_SHIFT 0x0
#define REVB_SS_SSWITCH_REF_CLK_DIV_SIZE 0x8
#define REVB_SS_SSWITCH_REF_CLK_DIV_MASK (((1 << REVB_SS_SSWITCH_REF_CLK_DIV_SIZE) - 1) << REVB_SS_SSWITCH_REF_CLK_DIV_SHIFT)
#define REVB_SS_SSWITCH_REF_CLK_DIV(x) (((x) & REVB_SS_SSWITCH_REF_CLK_DIV_MASK) >> REVB_SS_SSWITCH_REF_CLK_DIV_SHIFT)
#define REVB_SS_SSWITCH_REF_CLK_DIV_SET(x, v) (((x) & ~REVB_SS_SSWITCH_REF_CLK_DIV_MASK) | (((v) << REVB_SS_SSWITCH_REF_CLK_DIV_SHIFT) & REVB_SS_SSWITCH_REF_CLK_DIV_MASK))
/* GLOBAL_DEBUG_ENABLE_INDEBUG - Set 1 to enable inDebug bit to drive GlobalDebug.*/
#define REVB_GLOBAL_DEBUG_ENABLE_INDEBUG_SHIFT 0x0
#define REVB_GLOBAL_DEBUG_ENABLE_INDEBUG_SIZE 0x1
#define REVB_GLOBAL_DEBUG_ENABLE_INDEBUG_MASK (((1 << REVB_GLOBAL_DEBUG_ENABLE_INDEBUG_SIZE) - 1) << REVB_GLOBAL_DEBUG_ENABLE_INDEBUG_SHIFT)
#define REVB_GLOBAL_DEBUG_ENABLE_INDEBUG(x) (((x) & REVB_GLOBAL_DEBUG_ENABLE_INDEBUG_MASK) >> REVB_GLOBAL_DEBUG_ENABLE_INDEBUG_SHIFT)
#define REVB_GLOBAL_DEBUG_ENABLE_INDEBUG_SET(x, v) (((x) & ~REVB_GLOBAL_DEBUG_ENABLE_INDEBUG_MASK) | (((v) << REVB_GLOBAL_DEBUG_ENABLE_INDEBUG_SHIFT) & REVB_GLOBAL_DEBUG_ENABLE_INDEBUG_MASK))
/* GLOBAL_DEBUG_ENABLE_GLOBAL_DEBUG_REQ - Set 1 to enable GlobalDebug to generate debug request to XCore.*/
#define REVB_GLOBAL_DEBUG_ENABLE_GLOBAL_DEBUG_REQ_SHIFT 0x1
#define REVB_GLOBAL_DEBUG_ENABLE_GLOBAL_DEBUG_REQ_SIZE 0x1
#define REVB_GLOBAL_DEBUG_ENABLE_GLOBAL_DEBUG_REQ_MASK (((1 << REVB_GLOBAL_DEBUG_ENABLE_GLOBAL_DEBUG_REQ_SIZE) - 1) << REVB_GLOBAL_DEBUG_ENABLE_GLOBAL_DEBUG_REQ_SHIFT)
#define REVB_GLOBAL_DEBUG_ENABLE_GLOBAL_DEBUG_REQ(x) (((x) & REVB_GLOBAL_DEBUG_ENABLE_GLOBAL_DEBUG_REQ_MASK) >> REVB_GLOBAL_DEBUG_ENABLE_GLOBAL_DEBUG_REQ_SHIFT)
#define REVB_GLOBAL_DEBUG_ENABLE_GLOBAL_DEBUG_REQ_SET(x, v) (((x) & ~REVB_GLOBAL_DEBUG_ENABLE_GLOBAL_DEBUG_REQ_MASK) | (((v) << REVB_GLOBAL_DEBUG_ENABLE_GLOBAL_DEBUG_REQ_SHIFT) & REVB_GLOBAL_DEBUG_ENABLE_GLOBAL_DEBUG_REQ_MASK))
/* GLOBAL_DEBUG_SOURCE_XCORE0_INDEBUG - If set, XCore0 is the source of last GlobalDebug event.*/
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE0_INDEBUG_SHIFT 0x0
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE0_INDEBUG_SIZE 0x1
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE0_INDEBUG_MASK (((1 << REVB_GLOBAL_DEBUG_SOURCE_XCORE0_INDEBUG_SIZE) - 1) << REVB_GLOBAL_DEBUG_SOURCE_XCORE0_INDEBUG_SHIFT)
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE0_INDEBUG(x) (((x) & REVB_GLOBAL_DEBUG_SOURCE_XCORE0_INDEBUG_MASK) >> REVB_GLOBAL_DEBUG_SOURCE_XCORE0_INDEBUG_SHIFT)
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE0_INDEBUG_SET(x, v) (((x) & ~REVB_GLOBAL_DEBUG_SOURCE_XCORE0_INDEBUG_MASK) | (((v) << REVB_GLOBAL_DEBUG_SOURCE_XCORE0_INDEBUG_SHIFT) & REVB_GLOBAL_DEBUG_SOURCE_XCORE0_INDEBUG_MASK))
/* GLOBAL_DEBUG_SOURCE_XCORE1_INDEBUG - If set, XCore1 is the source of last GlobalDebug event.*/
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE1_INDEBUG_SHIFT 0x1
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE1_INDEBUG_SIZE 0x1
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE1_INDEBUG_MASK (((1 << REVB_GLOBAL_DEBUG_SOURCE_XCORE1_INDEBUG_SIZE) - 1) << REVB_GLOBAL_DEBUG_SOURCE_XCORE1_INDEBUG_SHIFT)
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE1_INDEBUG(x) (((x) & REVB_GLOBAL_DEBUG_SOURCE_XCORE1_INDEBUG_MASK) >> REVB_GLOBAL_DEBUG_SOURCE_XCORE1_INDEBUG_SHIFT)
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE1_INDEBUG_SET(x, v) (((x) & ~REVB_GLOBAL_DEBUG_SOURCE_XCORE1_INDEBUG_MASK) | (((v) << REVB_GLOBAL_DEBUG_SOURCE_XCORE1_INDEBUG_SHIFT) & REVB_GLOBAL_DEBUG_SOURCE_XCORE1_INDEBUG_MASK))
/* GLOBAL_DEBUG_SOURCE_XCORE2_INDEBUG - If set, XCore2 is the source of last GlobalDebug event.*/
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE2_INDEBUG_SHIFT 0x2
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE2_INDEBUG_SIZE 0x1
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE2_INDEBUG_MASK (((1 << REVB_GLOBAL_DEBUG_SOURCE_XCORE2_INDEBUG_SIZE) - 1) << REVB_GLOBAL_DEBUG_SOURCE_XCORE2_INDEBUG_SHIFT)
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE2_INDEBUG(x) (((x) & REVB_GLOBAL_DEBUG_SOURCE_XCORE2_INDEBUG_MASK) >> REVB_GLOBAL_DEBUG_SOURCE_XCORE2_INDEBUG_SHIFT)
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE2_INDEBUG_SET(x, v) (((x) & ~REVB_GLOBAL_DEBUG_SOURCE_XCORE2_INDEBUG_MASK) | (((v) << REVB_GLOBAL_DEBUG_SOURCE_XCORE2_INDEBUG_SHIFT) & REVB_GLOBAL_DEBUG_SOURCE_XCORE2_INDEBUG_MASK))
/* GLOBAL_DEBUG_SOURCE_XCORE3_INDEBUG - If set, XCore3 is the source of last GlobalDebug event.*/
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE3_INDEBUG_SHIFT 0x3
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE3_INDEBUG_SIZE 0x1
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE3_INDEBUG_MASK (((1 << REVB_GLOBAL_DEBUG_SOURCE_XCORE3_INDEBUG_SIZE) - 1) << REVB_GLOBAL_DEBUG_SOURCE_XCORE3_INDEBUG_SHIFT)
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE3_INDEBUG(x) (((x) & REVB_GLOBAL_DEBUG_SOURCE_XCORE3_INDEBUG_MASK) >> REVB_GLOBAL_DEBUG_SOURCE_XCORE3_INDEBUG_SHIFT)
#define REVB_GLOBAL_DEBUG_SOURCE_XCORE3_INDEBUG_SET(x, v) (((x) & ~REVB_GLOBAL_DEBUG_SOURCE_XCORE3_INDEBUG_MASK) | (((v) << REVB_GLOBAL_DEBUG_SOURCE_XCORE3_INDEBUG_SHIFT) & REVB_GLOBAL_DEBUG_SOURCE_XCORE3_INDEBUG_MASK))
/* GLOBAL_DEBUG_SOURCE_EXTERNAL_PAD_INDEBUG - If set, external pin, is the source of last GlobalDebug event.*/
#define REVB_GLOBAL_DEBUG_SOURCE_EXTERNAL_PAD_INDEBUG_SHIFT 0x4
#define REVB_GLOBAL_DEBUG_SOURCE_EXTERNAL_PAD_INDEBUG_SIZE 0x1
#define REVB_GLOBAL_DEBUG_SOURCE_EXTERNAL_PAD_INDEBUG_MASK (((1 << REVB_GLOBAL_DEBUG_SOURCE_EXTERNAL_PAD_INDEBUG_SIZE) - 1) << REVB_GLOBAL_DEBUG_SOURCE_EXTERNAL_PAD_INDEBUG_SHIFT)
#define REVB_GLOBAL_DEBUG_SOURCE_EXTERNAL_PAD_INDEBUG(x) (((x) & REVB_GLOBAL_DEBUG_SOURCE_EXTERNAL_PAD_INDEBUG_MASK) >> REVB_GLOBAL_DEBUG_SOURCE_EXTERNAL_PAD_INDEBUG_SHIFT)
#define REVB_GLOBAL_DEBUG_SOURCE_EXTERNAL_PAD_INDEBUG_SET(x, v) (((x) & ~REVB_GLOBAL_DEBUG_SOURCE_EXTERNAL_PAD_INDEBUG_MASK) | (((v) << REVB_GLOBAL_DEBUG_SOURCE_EXTERNAL_PAD_INDEBUG_SHIFT) & REVB_GLOBAL_DEBUG_SOURCE_EXTERNAL_PAD_INDEBUG_MASK))
/* LINK_SRC_INUSE - 1 when the source side of the link is in use.*/
#define REVB_LINK_SRC_INUSE_SHIFT 0x0
#define REVB_LINK_SRC_INUSE_SIZE 0x1
#define REVB_LINK_SRC_INUSE_MASK (((1 << REVB_LINK_SRC_INUSE_SIZE) - 1) << REVB_LINK_SRC_INUSE_SHIFT)
#define REVB_LINK_SRC_INUSE(x) (((x) & REVB_LINK_SRC_INUSE_MASK) >> REVB_LINK_SRC_INUSE_SHIFT)
#define REVB_LINK_SRC_INUSE_SET(x, v) (((x) & ~REVB_LINK_SRC_INUSE_MASK) | (((v) << REVB_LINK_SRC_INUSE_SHIFT) & REVB_LINK_SRC_INUSE_MASK))
/* LINK_DST_INUSE - 1 when the dest side of the link is in use.*/
#define REVB_LINK_DST_INUSE_SHIFT 0x1
#define REVB_LINK_DST_INUSE_SIZE 0x1
#define REVB_LINK_DST_INUSE_MASK (((1 << REVB_LINK_DST_INUSE_SIZE) - 1) << REVB_LINK_DST_INUSE_SHIFT)
#define REVB_LINK_DST_INUSE(x) (((x) & REVB_LINK_DST_INUSE_MASK) >> REVB_LINK_DST_INUSE_SHIFT)
#define REVB_LINK_DST_INUSE_SET(x, v) (((x) & ~REVB_LINK_DST_INUSE_MASK) | (((v) << REVB_LINK_DST_INUSE_SHIFT) & REVB_LINK_DST_INUSE_MASK))
/* LINK_JUNK - 1 when the current packet is considered junk and will be thrown away.*/
#define REVB_LINK_JUNK_SHIFT 0x2
#define REVB_LINK_JUNK_SIZE 0x1
#define REVB_LINK_JUNK_MASK (((1 << REVB_LINK_JUNK_SIZE) - 1) << REVB_LINK_JUNK_SHIFT)
#define REVB_LINK_JUNK(x) (((x) & REVB_LINK_JUNK_MASK) >> REVB_LINK_JUNK_SHIFT)
#define REVB_LINK_JUNK_SET(x, v) (((x) & ~REVB_LINK_JUNK_MASK) | (((v) << REVB_LINK_JUNK_SHIFT) & REVB_LINK_JUNK_MASK))
/* LINK_NETWORK - Determines the network to which this link belongs, reset as 0.*/
#define REVB_LINK_NETWORK_SHIFT 0x4
#define REVB_LINK_NETWORK_SIZE 0x2
#define REVB_LINK_NETWORK_MASK (((1 << REVB_LINK_NETWORK_SIZE) - 1) << REVB_LINK_NETWORK_SHIFT)
#define REVB_LINK_NETWORK(x) (((x) & REVB_LINK_NETWORK_MASK) >> REVB_LINK_NETWORK_SHIFT)
#define REVB_LINK_NETWORK_SET(x, v) (((x) & ~REVB_LINK_NETWORK_MASK) | (((v) << REVB_LINK_NETWORK_SHIFT) & REVB_LINK_NETWORK_MASK))
/* LINK_LOOKUP_BIT - Lookup table value that will map to this link.*/
#define REVB_LINK_LOOKUP_BIT_SHIFT 0x8
#define REVB_LINK_LOOKUP_BIT_SIZE 0x3
#define REVB_LINK_LOOKUP_BIT_MASK (((1 << REVB_LINK_LOOKUP_BIT_SIZE) - 1) << REVB_LINK_LOOKUP_BIT_SHIFT)
#define REVB_LINK_LOOKUP_BIT(x) (((x) & REVB_LINK_LOOKUP_BIT_MASK) >> REVB_LINK_LOOKUP_BIT_SHIFT)
#define REVB_LINK_LOOKUP_BIT_SET(x, v) (((x) & ~REVB_LINK_LOOKUP_BIT_MASK) | (((v) << REVB_LINK_LOOKUP_BIT_SHIFT) & REVB_LINK_LOOKUP_BIT_MASK))
/* LINK_SRC_TARGET_ID - When the link is in use, this is the destination link number to which all packets are sent.*/
#define REVB_LINK_SRC_TARGET_ID_SHIFT 0x10
#define REVB_LINK_SRC_TARGET_ID_SIZE 0x8
#define REVB_LINK_SRC_TARGET_ID_MASK (((1 << REVB_LINK_SRC_TARGET_ID_SIZE) - 1) << REVB_LINK_SRC_TARGET_ID_SHIFT)
#define REVB_LINK_SRC_TARGET_ID(x) (((x) & REVB_LINK_SRC_TARGET_ID_MASK) >> REVB_LINK_SRC_TARGET_ID_SHIFT)
#define REVB_LINK_SRC_TARGET_ID_SET(x, v) (((x) & ~REVB_LINK_SRC_TARGET_ID_MASK) | (((v) << REVB_LINK_SRC_TARGET_ID_SHIFT) & REVB_LINK_SRC_TARGET_ID_MASK))
/* LINK_SRC_TARGET_TYPE - Identify the SRC_TARGET type 0 - SLink, 1 - PLink, 2 - SSCTL, 3 - Undefine.*/
#define REVB_LINK_SRC_TARGET_TYPE_SHIFT 0x18
#define REVB_LINK_SRC_TARGET_TYPE_SIZE 0x2
#define REVB_LINK_SRC_TARGET_TYPE_MASK (((1 << REVB_LINK_SRC_TARGET_TYPE_SIZE) - 1) << REVB_LINK_SRC_TARGET_TYPE_SHIFT)
#define REVB_LINK_SRC_TARGET_TYPE(x) (((x) & REVB_LINK_SRC_TARGET_TYPE_MASK) >> REVB_LINK_SRC_TARGET_TYPE_SHIFT)
#define REVB_LINK_SRC_TARGET_TYPE_SET(x, v) (((x) & ~REVB_LINK_SRC_TARGET_TYPE_MASK) | (((v) << REVB_LINK_SRC_TARGET_TYPE_SHIFT) & REVB_LINK_SRC_TARGET_TYPE_MASK))
/* XLINK_INTER_TOKEN_DELAY - Specify min. number of idle system clocks between two continuous transmit tokens.*/
#define REVB_XLINK_INTER_TOKEN_DELAY_SHIFT 0x0
#define REVB_XLINK_INTER_TOKEN_DELAY_SIZE 0x4
#define REVB_XLINK_INTER_TOKEN_DELAY_MASK (((1 << REVB_XLINK_INTER_TOKEN_DELAY_SIZE) - 1) << REVB_XLINK_INTER_TOKEN_DELAY_SHIFT)
#define REVB_XLINK_INTER_TOKEN_DELAY(x) (((x) & REVB_XLINK_INTER_TOKEN_DELAY_MASK) >> REVB_XLINK_INTER_TOKEN_DELAY_SHIFT)
#define REVB_XLINK_INTER_TOKEN_DELAY_SET(x, v) (((x) & ~REVB_XLINK_INTER_TOKEN_DELAY_MASK) | (((v) << REVB_XLINK_INTER_TOKEN_DELAY_SHIFT) & REVB_XLINK_INTER_TOKEN_DELAY_MASK))
/* XLINK_INTRA_TOKEN_DELAY - Specify min. number of idle system clocks between two continuous bits witin a transmit token.*/
#define REVB_XLINK_INTRA_TOKEN_DELAY_SHIFT 0x8
#define REVB_XLINK_INTRA_TOKEN_DELAY_SIZE 0x4
#define REVB_XLINK_INTRA_TOKEN_DELAY_MASK (((1 << REVB_XLINK_INTRA_TOKEN_DELAY_SIZE) - 1) << REVB_XLINK_INTRA_TOKEN_DELAY_SHIFT)
#define REVB_XLINK_INTRA_TOKEN_DELAY(x) (((x) & REVB_XLINK_INTRA_TOKEN_DELAY_MASK) >> REVB_XLINK_INTRA_TOKEN_DELAY_SHIFT)
#define REVB_XLINK_INTRA_TOKEN_DELAY_SET(x, v) (((x) & ~REVB_XLINK_INTRA_TOKEN_DELAY_MASK) | (((v) << REVB_XLINK_INTRA_TOKEN_DELAY_SHIFT) & REVB_XLINK_INTRA_TOKEN_DELAY_MASK))
/* XLINK_RX_ERROR - Indicates bit error(s) in received data. This bit is cleared when XLINK_RST is issued.*/
#define REVB_XLINK_RX_ERROR_SHIFT 0x10
#define REVB_XLINK_RX_ERROR_SIZE 0x1
#define REVB_XLINK_RX_ERROR_MASK (((1 << REVB_XLINK_RX_ERROR_SIZE) - 1) << REVB_XLINK_RX_ERROR_SHIFT)
#define REVB_XLINK_RX_ERROR(x) (((x) & REVB_XLINK_RX_ERROR_MASK) >> REVB_XLINK_RX_ERROR_SHIFT)
#define REVB_XLINK_RX_ERROR_SET(x, v) (((x) & ~REVB_XLINK_RX_ERROR_MASK) | (((v) << REVB_XLINK_RX_ERROR_SHIFT) & REVB_XLINK_RX_ERROR_MASK))
/* XLINK_XLINK_RST - Write to this bit with '1' will reset the XLink, writing zero to this bit will have no functional effect. This bit always read back zero.*/
#define REVB_XLINK_XLINK_RST_SHIFT 0x18
#define REVB_XLINK_XLINK_RST_SIZE 0x1
#define REVB_XLINK_XLINK_RST_MASK (((1 << REVB_XLINK_XLINK_RST_SIZE) - 1) << REVB_XLINK_XLINK_RST_SHIFT)
#define REVB_XLINK_XLINK_RST(x) (((x) & REVB_XLINK_XLINK_RST_MASK) >> REVB_XLINK_XLINK_RST_SHIFT)
#define REVB_XLINK_XLINK_RST_SET(x, v) (((x) & ~REVB_XLINK_XLINK_RST_MASK) | (((v) << REVB_XLINK_XLINK_RST_SHIFT) & REVB_XLINK_XLINK_RST_MASK))
/* XLINK_MODE - 0 = 2-bits XLink(s), 1 = 5-bits XLink(s) (reset as 0).*/
#define REVB_XLINK_MODE_SHIFT 0x1e
#define REVB_XLINK_MODE_SIZE 0x1
#define REVB_XLINK_MODE_MASK (((1 << REVB_XLINK_MODE_SIZE) - 1) << REVB_XLINK_MODE_SHIFT)
#define REVB_XLINK_MODE(x) (((x) & REVB_XLINK_MODE_MASK) >> REVB_XLINK_MODE_SHIFT)
#define REVB_XLINK_MODE_SET(x, v) (((x) & ~REVB_XLINK_MODE_MASK) | (((v) << REVB_XLINK_MODE_SHIFT) & REVB_XLINK_MODE_MASK))
/* XLINK_ENABLE - Write to this bit with '1' will enable the XLink, writing '0' will disable it. This bit controls the pin muxing.*/
#define REVB_XLINK_ENABLE_SHIFT 0x1f
#define REVB_XLINK_ENABLE_SIZE 0x1
#define REVB_XLINK_ENABLE_MASK (((1 << REVB_XLINK_ENABLE_SIZE) - 1) << REVB_XLINK_ENABLE_SHIFT)
#define REVB_XLINK_ENABLE(x) (((x) & REVB_XLINK_ENABLE_MASK) >> REVB_XLINK_ENABLE_SHIFT)
#define REVB_XLINK_ENABLE_SET(x, v) (((x) & ~REVB_XLINK_ENABLE_MASK) | (((v) << REVB_XLINK_ENABLE_SHIFT) & REVB_XLINK_ENABLE_MASK))
/* RESERVED0_2 - */
#define REVB_RESERVED0_2_SHIFT 0x0
#define REVB_RESERVED0_2_SIZE 0x2
#define REVB_RESERVED0_2_MASK (((1 << REVB_RESERVED0_2_SIZE) - 1) << REVB_RESERVED0_2_SHIFT)
#define REVB_RESERVED0_2(x) (((x) & REVB_RESERVED0_2_MASK) >> REVB_RESERVED0_2_SHIFT)
#define REVB_RESERVED0_2_SET(x, v) (((x) & ~REVB_RESERVED0_2_MASK) | (((v) << REVB_RESERVED0_2_SHIFT) & REVB_RESERVED0_2_MASK))
/* RESERVED0_7 - */
#define REVB_RESERVED0_7_SHIFT 0x0
#define REVB_RESERVED0_7_SIZE 0x7
#define REVB_RESERVED0_7_MASK (((1 << REVB_RESERVED0_7_SIZE) - 1) << REVB_RESERVED0_7_SHIFT)
#define REVB_RESERVED0_7(x) (((x) & REVB_RESERVED0_7_MASK) >> REVB_RESERVED0_7_SHIFT)
#define REVB_RESERVED0_7_SET(x, v) (((x) & ~REVB_RESERVED0_7_MASK) | (((v) << REVB_RESERVED0_7_SHIFT) & REVB_RESERVED0_7_MASK))
/* RESERVED0_16 - */
#define REVB_RESERVED0_16_SHIFT 0x0
#define REVB_RESERVED0_16_SIZE 0x10
#define REVB_RESERVED0_16_MASK (((1 << REVB_RESERVED0_16_SIZE) - 1) << REVB_RESERVED0_16_SHIFT)
#define REVB_RESERVED0_16(x) (((x) & REVB_RESERVED0_16_MASK) >> REVB_RESERVED0_16_SHIFT)
#define REVB_RESERVED0_16_SET(x, v) (((x) & ~REVB_RESERVED0_16_MASK) | (((v) << REVB_RESERVED0_16_SHIFT) & REVB_RESERVED0_16_MASK))
/* RESERVED0_32 - */
#define REVB_RESERVED0_32_SHIFT 0x0
#define REVB_RESERVED0_32_SIZE 0x20
#define REVB_RESERVED0_32_MASK (((1 << REVB_RESERVED0_32_SIZE) - 1) << REVB_RESERVED0_32_SHIFT)
#define REVB_RESERVED0_32(x) (((x) & REVB_RESERVED0_32_MASK) >> REVB_RESERVED0_32_SHIFT)
#define REVB_RESERVED0_32_SET(x, v) (((x) & ~REVB_RESERVED0_32_MASK) | (((v) << REVB_RESERVED0_32_SHIFT) & REVB_RESERVED0_32_MASK))
/* RESERVED1_31 - */
#define REVB_RESERVED1_31_SHIFT 0x1
#define REVB_RESERVED1_31_SIZE 0x1f
#define REVB_RESERVED1_31_MASK (((1 << REVB_RESERVED1_31_SIZE) - 1) << REVB_RESERVED1_31_SHIFT)
#define REVB_RESERVED1_31(x) (((x) & REVB_RESERVED1_31_MASK) >> REVB_RESERVED1_31_SHIFT)
#define REVB_RESERVED1_31_SET(x, v) (((x) & ~REVB_RESERVED1_31_MASK) | (((v) << REVB_RESERVED1_31_SHIFT) & REVB_RESERVED1_31_MASK))
/* RESERVED2_2 - */
#define REVB_RESERVED2_2_SHIFT 0x2
#define REVB_RESERVED2_2_SIZE 0x2
#define REVB_RESERVED2_2_MASK (((1 << REVB_RESERVED2_2_SIZE) - 1) << REVB_RESERVED2_2_SHIFT)
#define REVB_RESERVED2_2(x) (((x) & REVB_RESERVED2_2_MASK) >> REVB_RESERVED2_2_SHIFT)
#define REVB_RESERVED2_2_SET(x, v) (((x) & ~REVB_RESERVED2_2_MASK) | (((v) << REVB_RESERVED2_2_SHIFT) & REVB_RESERVED2_2_MASK))
/* RESERVED2_6 - */
#define REVB_RESERVED2_6_SHIFT 0x2
#define REVB_RESERVED2_6_SIZE 0x6
#define REVB_RESERVED2_6_MASK (((1 << REVB_RESERVED2_6_SIZE) - 1) << REVB_RESERVED2_6_SHIFT)
#define REVB_RESERVED2_6(x) (((x) & REVB_RESERVED2_6_MASK) >> REVB_RESERVED2_6_SHIFT)
#define REVB_RESERVED2_6_SET(x, v) (((x) & ~REVB_RESERVED2_6_MASK) | (((v) << REVB_RESERVED2_6_SHIFT) & REVB_RESERVED2_6_MASK))
/* RESERVED2_14 - */
#define REVB_RESERVED2_14_SHIFT 0x2
#define REVB_RESERVED2_14_SIZE 0xe
#define REVB_RESERVED2_14_MASK (((1 << REVB_RESERVED2_14_SIZE) - 1) << REVB_RESERVED2_14_SHIFT)
#define REVB_RESERVED2_14(x) (((x) & REVB_RESERVED2_14_MASK) >> REVB_RESERVED2_14_SHIFT)
#define REVB_RESERVED2_14_SET(x, v) (((x) & ~REVB_RESERVED2_14_MASK) | (((v) << REVB_RESERVED2_14_SHIFT) & REVB_RESERVED2_14_MASK))
/* RESERVED2_21 - */
#define REVB_RESERVED2_21_SHIFT 0x2
#define REVB_RESERVED2_21_SIZE 0x15
#define REVB_RESERVED2_21_MASK (((1 << REVB_RESERVED2_21_SIZE) - 1) << REVB_RESERVED2_21_SHIFT)
#define REVB_RESERVED2_21(x) (((x) & REVB_RESERVED2_21_MASK) >> REVB_RESERVED2_21_SHIFT)
#define REVB_RESERVED2_21_SET(x, v) (((x) & ~REVB_RESERVED2_21_MASK) | (((v) << REVB_RESERVED2_21_SHIFT) & REVB_RESERVED2_21_MASK))
/* RESERVED2_30 - */
#define REVB_RESERVED2_30_SHIFT 0x2
#define REVB_RESERVED2_30_SIZE 0x1e
#define REVB_RESERVED2_30_MASK (((1 << REVB_RESERVED2_30_SIZE) - 1) << REVB_RESERVED2_30_SHIFT)
#define REVB_RESERVED2_30(x) (((x) & REVB_RESERVED2_30_MASK) >> REVB_RESERVED2_30_SHIFT)
#define REVB_RESERVED2_30_SET(x, v) (((x) & ~REVB_RESERVED2_30_MASK) | (((v) << REVB_RESERVED2_30_SHIFT) & REVB_RESERVED2_30_MASK))
/* RESERVED3_1 - */
#define REVB_RESERVED3_1_SHIFT 0x3
#define REVB_RESERVED3_1_SIZE 0x1
#define REVB_RESERVED3_1_MASK (((1 << REVB_RESERVED3_1_SIZE) - 1) << REVB_RESERVED3_1_SHIFT)
#define REVB_RESERVED3_1(x) (((x) & REVB_RESERVED3_1_MASK) >> REVB_RESERVED3_1_SHIFT)
#define REVB_RESERVED3_1_SET(x, v) (((x) & ~REVB_RESERVED3_1_MASK) | (((v) << REVB_RESERVED3_1_SHIFT) & REVB_RESERVED3_1_MASK))
/* RESERVED3_5 - */
#define REVB_RESERVED3_5_SHIFT 0x3
#define REVB_RESERVED3_5_SIZE 0x5
#define REVB_RESERVED3_5_MASK (((1 << REVB_RESERVED3_5_SIZE) - 1) << REVB_RESERVED3_5_SHIFT)
#define REVB_RESERVED3_5(x) (((x) & REVB_RESERVED3_5_MASK) >> REVB_RESERVED3_5_SHIFT)
#define REVB_RESERVED3_5_SET(x, v) (((x) & ~REVB_RESERVED3_5_MASK) | (((v) << REVB_RESERVED3_5_SHIFT) & REVB_RESERVED3_5_MASK))
/* RESERVED3_13 - */
#define REVB_RESERVED3_13_SHIFT 0x3
#define REVB_RESERVED3_13_SIZE 0xd
#define REVB_RESERVED3_13_MASK (((1 << REVB_RESERVED3_13_SIZE) - 1) << REVB_RESERVED3_13_SHIFT)
#define REVB_RESERVED3_13(x) (((x) & REVB_RESERVED3_13_MASK) >> REVB_RESERVED3_13_SHIFT)
#define REVB_RESERVED3_13_SET(x, v) (((x) & ~REVB_RESERVED3_13_MASK) | (((v) << REVB_RESERVED3_13_SHIFT) & REVB_RESERVED3_13_MASK))
/* RESERVED3_20 - */
#define REVB_RESERVED3_20_SHIFT 0x3
#define REVB_RESERVED3_20_SIZE 0x14
#define REVB_RESERVED3_20_MASK (((1 << REVB_RESERVED3_20_SIZE) - 1) << REVB_RESERVED3_20_SHIFT)
#define REVB_RESERVED3_20(x) (((x) & REVB_RESERVED3_20_MASK) >> REVB_RESERVED3_20_SHIFT)
#define REVB_RESERVED3_20_SET(x, v) (((x) & ~REVB_RESERVED3_20_MASK) | (((v) << REVB_RESERVED3_20_SHIFT) & REVB_RESERVED3_20_MASK))
/* RESERVED3_29 - */
#define REVB_RESERVED3_29_SHIFT 0x3
#define REVB_RESERVED3_29_SIZE 0x1d
#define REVB_RESERVED3_29_MASK (((1 << REVB_RESERVED3_29_SIZE) - 1) << REVB_RESERVED3_29_SHIFT)
#define REVB_RESERVED3_29(x) (((x) & REVB_RESERVED3_29_MASK) >> REVB_RESERVED3_29_SHIFT)
#define REVB_RESERVED3_29_SET(x, v) (((x) & ~REVB_RESERVED3_29_MASK) | (((v) << REVB_RESERVED3_29_SHIFT) & REVB_RESERVED3_29_MASK))
/* RESERVED4_4 - */
#define REVB_RESERVED4_4_SHIFT 0x4
#define REVB_RESERVED4_4_SIZE 0x4
#define REVB_RESERVED4_4_MASK (((1 << REVB_RESERVED4_4_SIZE) - 1) << REVB_RESERVED4_4_SHIFT)
#define REVB_RESERVED4_4(x) (((x) & REVB_RESERVED4_4_MASK) >> REVB_RESERVED4_4_SHIFT)
#define REVB_RESERVED4_4_SET(x, v) (((x) & ~REVB_RESERVED4_4_MASK) | (((v) << REVB_RESERVED4_4_SHIFT) & REVB_RESERVED4_4_MASK))
/* RESERVED4_28 - */
#define REVB_RESERVED4_28_SHIFT 0x4
#define REVB_RESERVED4_28_SIZE 0x1c
#define REVB_RESERVED4_28_MASK (((1 << REVB_RESERVED4_28_SIZE) - 1) << REVB_RESERVED4_28_SHIFT)
#define REVB_RESERVED4_28(x) (((x) & REVB_RESERVED4_28_MASK) >> REVB_RESERVED4_28_SHIFT)
#define REVB_RESERVED4_28_SET(x, v) (((x) & ~REVB_RESERVED4_28_MASK) | (((v) << REVB_RESERVED4_28_SHIFT) & REVB_RESERVED4_28_MASK))
/* RESERVED5_1 - */
#define REVB_RESERVED5_1_SHIFT 0x5
#define REVB_RESERVED5_1_SIZE 0x1
#define REVB_RESERVED5_1_MASK (((1 << REVB_RESERVED5_1_SIZE) - 1) << REVB_RESERVED5_1_SHIFT)
#define REVB_RESERVED5_1(x) (((x) & REVB_RESERVED5_1_MASK) >> REVB_RESERVED5_1_SHIFT)
#define REVB_RESERVED5_1_SET(x, v) (((x) & ~REVB_RESERVED5_1_MASK) | (((v) << REVB_RESERVED5_1_SHIFT) & REVB_RESERVED5_1_MASK))
/* RESERVED5_3 - */
#define REVB_RESERVED5_3_SHIFT 0x5
#define REVB_RESERVED5_3_SIZE 0x3
#define REVB_RESERVED5_3_MASK (((1 << REVB_RESERVED5_3_SIZE) - 1) << REVB_RESERVED5_3_SHIFT)
#define REVB_RESERVED5_3(x) (((x) & REVB_RESERVED5_3_MASK) >> REVB_RESERVED5_3_SHIFT)
#define REVB_RESERVED5_3_SET(x, v) (((x) & ~REVB_RESERVED5_3_MASK) | (((v) << REVB_RESERVED5_3_SHIFT) & REVB_RESERVED5_3_MASK))
/* RESERVED5_18 - */
#define REVB_RESERVED5_18_SHIFT 0x5
#define REVB_RESERVED5_18_SIZE 0x12
#define REVB_RESERVED5_18_MASK (((1 << REVB_RESERVED5_18_SIZE) - 1) << REVB_RESERVED5_18_SHIFT)
#define REVB_RESERVED5_18(x) (((x) & REVB_RESERVED5_18_MASK) >> REVB_RESERVED5_18_SHIFT)
#define REVB_RESERVED5_18_SET(x, v) (((x) & ~REVB_RESERVED5_18_MASK) | (((v) << REVB_RESERVED5_18_SHIFT) & REVB_RESERVED5_18_MASK))
/* RESERVED5_27 - */
#define REVB_RESERVED5_27_SHIFT 0x5
#define REVB_RESERVED5_27_SIZE 0x1b
#define REVB_RESERVED5_27_MASK (((1 << REVB_RESERVED5_27_SIZE) - 1) << REVB_RESERVED5_27_SHIFT)
#define REVB_RESERVED5_27(x) (((x) & REVB_RESERVED5_27_MASK) >> REVB_RESERVED5_27_SHIFT)
#define REVB_RESERVED5_27_SET(x, v) (((x) & ~REVB_RESERVED5_27_MASK) | (((v) << REVB_RESERVED5_27_SHIFT) & REVB_RESERVED5_27_MASK))
/* RESERVED6_2 - */
#define REVB_RESERVED6_2_SHIFT 0x6
#define REVB_RESERVED6_2_SIZE 0x2
#define REVB_RESERVED6_2_MASK (((1 << REVB_RESERVED6_2_SIZE) - 1) << REVB_RESERVED6_2_SHIFT)
#define REVB_RESERVED6_2(x) (((x) & REVB_RESERVED6_2_MASK) >> REVB_RESERVED6_2_SHIFT)
#define REVB_RESERVED6_2_SET(x, v) (((x) & ~REVB_RESERVED6_2_MASK) | (((v) << REVB_RESERVED6_2_SHIFT) & REVB_RESERVED6_2_MASK))
/* RESERVED6_10 - */
#define REVB_RESERVED6_10_SHIFT 0x6
#define REVB_RESERVED6_10_SIZE 0xa
#define REVB_RESERVED6_10_MASK (((1 << REVB_RESERVED6_10_SIZE) - 1) << REVB_RESERVED6_10_SHIFT)
#define REVB_RESERVED6_10(x) (((x) & REVB_RESERVED6_10_MASK) >> REVB_RESERVED6_10_SHIFT)
#define REVB_RESERVED6_10_SET(x, v) (((x) & ~REVB_RESERVED6_10_MASK) | (((v) << REVB_RESERVED6_10_SHIFT) & REVB_RESERVED6_10_MASK))
/* RESERVED6_26 - */
#define REVB_RESERVED6_26_SHIFT 0x6
#define REVB_RESERVED6_26_SIZE 0x1a
#define REVB_RESERVED6_26_MASK (((1 << REVB_RESERVED6_26_SIZE) - 1) << REVB_RESERVED6_26_SHIFT)
#define REVB_RESERVED6_26(x) (((x) & REVB_RESERVED6_26_MASK) >> REVB_RESERVED6_26_SHIFT)
#define REVB_RESERVED6_26_SET(x, v) (((x) & ~REVB_RESERVED6_26_MASK) | (((v) << REVB_RESERVED6_26_SHIFT) & REVB_RESERVED6_26_MASK))
/* RESERVED7_9 - */
#define REVB_RESERVED7_9_SHIFT 0x7
#define REVB_RESERVED7_9_SIZE 0x9
#define REVB_RESERVED7_9_MASK (((1 << REVB_RESERVED7_9_SIZE) - 1) << REVB_RESERVED7_9_SHIFT)
#define REVB_RESERVED7_9(x) (((x) & REVB_RESERVED7_9_MASK) >> REVB_RESERVED7_9_SHIFT)
#define REVB_RESERVED7_9_SET(x, v) (((x) & ~REVB_RESERVED7_9_MASK) | (((v) << REVB_RESERVED7_9_SHIFT) & REVB_RESERVED7_9_MASK))
/* RESERVED7_25 - */
#define REVB_RESERVED7_25_SHIFT 0x7
#define REVB_RESERVED7_25_SIZE 0x19
#define REVB_RESERVED7_25_MASK (((1 << REVB_RESERVED7_25_SIZE) - 1) << REVB_RESERVED7_25_SHIFT)
#define REVB_RESERVED7_25(x) (((x) & REVB_RESERVED7_25_MASK) >> REVB_RESERVED7_25_SHIFT)
#define REVB_RESERVED7_25_SET(x, v) (((x) & ~REVB_RESERVED7_25_MASK) | (((v) << REVB_RESERVED7_25_SHIFT) & REVB_RESERVED7_25_MASK))
/* RESERVED8_8 - */
#define REVB_RESERVED8_8_SHIFT 0x8
#define REVB_RESERVED8_8_SIZE 0x8
#define REVB_RESERVED8_8_MASK (((1 << REVB_RESERVED8_8_SIZE) - 1) << REVB_RESERVED8_8_SHIFT)
#define REVB_RESERVED8_8(x) (((x) & REVB_RESERVED8_8_MASK) >> REVB_RESERVED8_8_SHIFT)
#define REVB_RESERVED8_8_SET(x, v) (((x) & ~REVB_RESERVED8_8_MASK) | (((v) << REVB_RESERVED8_8_SHIFT) & REVB_RESERVED8_8_MASK))
/* RESERVED8_24 - */
#define REVB_RESERVED8_24_SHIFT 0x8
#define REVB_RESERVED8_24_SIZE 0x18
#define REVB_RESERVED8_24_MASK (((1 << REVB_RESERVED8_24_SIZE) - 1) << REVB_RESERVED8_24_SHIFT)
#define REVB_RESERVED8_24(x) (((x) & REVB_RESERVED8_24_MASK) >> REVB_RESERVED8_24_SHIFT)
#define REVB_RESERVED8_24_SET(x, v) (((x) & ~REVB_RESERVED8_24_MASK) | (((v) << REVB_RESERVED8_24_SHIFT) & REVB_RESERVED8_24_MASK))
/* RESERVED9_7 - */
#define REVB_RESERVED9_7_SHIFT 0x9
#define REVB_RESERVED9_7_SIZE 0x7
#define REVB_RESERVED9_7_MASK (((1 << REVB_RESERVED9_7_SIZE) - 1) << REVB_RESERVED9_7_SHIFT)
#define REVB_RESERVED9_7(x) (((x) & REVB_RESERVED9_7_MASK) >> REVB_RESERVED9_7_SHIFT)
#define REVB_RESERVED9_7_SET(x, v) (((x) & ~REVB_RESERVED9_7_MASK) | (((v) << REVB_RESERVED9_7_SHIFT) & REVB_RESERVED9_7_MASK))
/* RESERVED9_14 - */
#define REVB_RESERVED9_14_SHIFT 0x9
#define REVB_RESERVED9_14_SIZE 0xe
#define REVB_RESERVED9_14_MASK (((1 << REVB_RESERVED9_14_SIZE) - 1) << REVB_RESERVED9_14_SHIFT)
#define REVB_RESERVED9_14(x) (((x) & REVB_RESERVED9_14_MASK) >> REVB_RESERVED9_14_SHIFT)
#define REVB_RESERVED9_14_SET(x, v) (((x) & ~REVB_RESERVED9_14_MASK) | (((v) << REVB_RESERVED9_14_SHIFT) & REVB_RESERVED9_14_MASK))
/* RESERVED10_6 - */
#define REVB_RESERVED10_6_SHIFT 0xa
#define REVB_RESERVED10_6_SIZE 0x6
#define REVB_RESERVED10_6_MASK (((1 << REVB_RESERVED10_6_SIZE) - 1) << REVB_RESERVED10_6_SHIFT)
#define REVB_RESERVED10_6(x) (((x) & REVB_RESERVED10_6_MASK) >> REVB_RESERVED10_6_SHIFT)
#define REVB_RESERVED10_6_SET(x, v) (((x) & ~REVB_RESERVED10_6_MASK) | (((v) << REVB_RESERVED10_6_SHIFT) & REVB_RESERVED10_6_MASK))
/* RESERVED11_5 - */
#define REVB_RESERVED11_5_SHIFT 0xb
#define REVB_RESERVED11_5_SIZE 0x5
#define REVB_RESERVED11_5_MASK (((1 << REVB_RESERVED11_5_SIZE) - 1) << REVB_RESERVED11_5_SHIFT)
#define REVB_RESERVED11_5(x) (((x) & REVB_RESERVED11_5_MASK) >> REVB_RESERVED11_5_SHIFT)
#define REVB_RESERVED11_5_SET(x, v) (((x) & ~REVB_RESERVED11_5_MASK) | (((v) << REVB_RESERVED11_5_SHIFT) & REVB_RESERVED11_5_MASK))
/* RESERVED11_21 - */
#define REVB_RESERVED11_21_SHIFT 0xb
#define REVB_RESERVED11_21_SIZE 0x15
#define REVB_RESERVED11_21_MASK (((1 << REVB_RESERVED11_21_SIZE) - 1) << REVB_RESERVED11_21_SHIFT)
#define REVB_RESERVED11_21(x) (((x) & REVB_RESERVED11_21_MASK) >> REVB_RESERVED11_21_SHIFT)
#define REVB_RESERVED11_21_SET(x, v) (((x) & ~REVB_RESERVED11_21_MASK) | (((v) << REVB_RESERVED11_21_SHIFT) & REVB_RESERVED11_21_MASK))
/* RESERVED12_4 - */
#define REVB_RESERVED12_4_SHIFT 0xc
#define REVB_RESERVED12_4_SIZE 0x4
#define REVB_RESERVED12_4_MASK (((1 << REVB_RESERVED12_4_SIZE) - 1) << REVB_RESERVED12_4_SHIFT)
#define REVB_RESERVED12_4(x) (((x) & REVB_RESERVED12_4_MASK) >> REVB_RESERVED12_4_SHIFT)
#define REVB_RESERVED12_4_SET(x, v) (((x) & ~REVB_RESERVED12_4_MASK) | (((v) << REVB_RESERVED12_4_SHIFT) & REVB_RESERVED12_4_MASK))
/* RESERVED13_3 - */
#define REVB_RESERVED13_3_SHIFT 0xd
#define REVB_RESERVED13_3_SIZE 0x3
#define REVB_RESERVED13_3_MASK (((1 << REVB_RESERVED13_3_SIZE) - 1) << REVB_RESERVED13_3_SHIFT)
#define REVB_RESERVED13_3(x) (((x) & REVB_RESERVED13_3_MASK) >> REVB_RESERVED13_3_SHIFT)
#define REVB_RESERVED13_3_SET(x, v) (((x) & ~REVB_RESERVED13_3_MASK) | (((v) << REVB_RESERVED13_3_SHIFT) & REVB_RESERVED13_3_MASK))
/* RESERVED16_4 - */
#define REVB_RESERVED16_4_SHIFT 0x10
#define REVB_RESERVED16_4_SIZE 0x4
#define REVB_RESERVED16_4_MASK (((1 << REVB_RESERVED16_4_SIZE) - 1) << REVB_RESERVED16_4_SHIFT)
#define REVB_RESERVED16_4(x) (((x) & REVB_RESERVED16_4_MASK) >> REVB_RESERVED16_4_SHIFT)
#define REVB_RESERVED16_4_SET(x, v) (((x) & ~REVB_RESERVED16_4_MASK) | (((v) << REVB_RESERVED16_4_SHIFT) & REVB_RESERVED16_4_MASK))
/* RESERVED16_6 - */
#define REVB_RESERVED16_6_SHIFT 0x10
#define REVB_RESERVED16_6_SIZE 0x6
#define REVB_RESERVED16_6_MASK (((1 << REVB_RESERVED16_6_SIZE) - 1) << REVB_RESERVED16_6_SHIFT)
#define REVB_RESERVED16_6(x) (((x) & REVB_RESERVED16_6_MASK) >> REVB_RESERVED16_6_SHIFT)
#define REVB_RESERVED16_6_SET(x, v) (((x) & ~REVB_RESERVED16_6_MASK) | (((v) << REVB_RESERVED16_6_SHIFT) & REVB_RESERVED16_6_MASK))
/* RESERVED16_7 - */
#define REVB_RESERVED16_7_SHIFT 0x10
#define REVB_RESERVED16_7_SIZE 0x7
#define REVB_RESERVED16_7_MASK (((1 << REVB_RESERVED16_7_SIZE) - 1) << REVB_RESERVED16_7_SHIFT)
#define REVB_RESERVED16_7(x) (((x) & REVB_RESERVED16_7_MASK) >> REVB_RESERVED16_7_SHIFT)
#define REVB_RESERVED16_7_SET(x, v) (((x) & ~REVB_RESERVED16_7_MASK) | (((v) << REVB_RESERVED16_7_SHIFT) & REVB_RESERVED16_7_MASK))
/* RESERVED16_16 - */
#define REVB_RESERVED16_16_SHIFT 0x10
#define REVB_RESERVED16_16_SIZE 0x10
#define REVB_RESERVED16_16_MASK (((1 << REVB_RESERVED16_16_SIZE) - 1) << REVB_RESERVED16_16_SHIFT)
#define REVB_RESERVED16_16(x) (((x) & REVB_RESERVED16_16_MASK) >> REVB_RESERVED16_16_SHIFT)
#define REVB_RESERVED16_16_SET(x, v) (((x) & ~REVB_RESERVED16_16_MASK) | (((v) << REVB_RESERVED16_16_SHIFT) & REVB_RESERVED16_16_MASK))
/* RESERVED17_7 - */
#define REVB_RESERVED17_7_SHIFT 0x11
#define REVB_RESERVED17_7_SIZE 0x7
#define REVB_RESERVED17_7_MASK (((1 << REVB_RESERVED17_7_SIZE) - 1) << REVB_RESERVED17_7_SHIFT)
#define REVB_RESERVED17_7(x) (((x) & REVB_RESERVED17_7_MASK) >> REVB_RESERVED17_7_SHIFT)
#define REVB_RESERVED17_7_SET(x, v) (((x) & ~REVB_RESERVED17_7_MASK) | (((v) << REVB_RESERVED17_7_SHIFT) & REVB_RESERVED17_7_MASK))
/* RESERVED18_2 - */
#define REVB_RESERVED18_2_SHIFT 0x12
#define REVB_RESERVED18_2_SIZE 0x2
#define REVB_RESERVED18_2_MASK (((1 << REVB_RESERVED18_2_SIZE) - 1) << REVB_RESERVED18_2_SHIFT)
#define REVB_RESERVED18_2(x) (((x) & REVB_RESERVED18_2_MASK) >> REVB_RESERVED18_2_SHIFT)
#define REVB_RESERVED18_2_SET(x, v) (((x) & ~REVB_RESERVED18_2_MASK) | (((v) << REVB_RESERVED18_2_SHIFT) & REVB_RESERVED18_2_MASK))
/* RESERVED18_14 - */
#define REVB_RESERVED18_14_SHIFT 0x12
#define REVB_RESERVED18_14_SIZE 0xe
#define REVB_RESERVED18_14_MASK (((1 << REVB_RESERVED18_14_SIZE) - 1) << REVB_RESERVED18_14_SHIFT)
#define REVB_RESERVED18_14(x) (((x) & REVB_RESERVED18_14_MASK) >> REVB_RESERVED18_14_SHIFT)
#define REVB_RESERVED18_14_SET(x, v) (((x) & ~REVB_RESERVED18_14_MASK) | (((v) << REVB_RESERVED18_14_SHIFT) & REVB_RESERVED18_14_MASK))
/* RESERVED19_13 - */
#define REVB_RESERVED19_13_SHIFT 0x13
#define REVB_RESERVED19_13_SIZE 0xd
#define REVB_RESERVED19_13_MASK (((1 << REVB_RESERVED19_13_SIZE) - 1) << REVB_RESERVED19_13_SHIFT)
#define REVB_RESERVED19_13(x) (((x) & REVB_RESERVED19_13_MASK) >> REVB_RESERVED19_13_SHIFT)
#define REVB_RESERVED19_13_SET(x, v) (((x) & ~REVB_RESERVED19_13_MASK) | (((v) << REVB_RESERVED19_13_SHIFT) & REVB_RESERVED19_13_MASK))
/* RESERVED21_3 - */
#define REVB_RESERVED21_3_SHIFT 0x15
#define REVB_RESERVED21_3_SIZE 0x3
#define REVB_RESERVED21_3_MASK (((1 << REVB_RESERVED21_3_SIZE) - 1) << REVB_RESERVED21_3_SHIFT)
#define REVB_RESERVED21_3(x) (((x) & REVB_RESERVED21_3_MASK) >> REVB_RESERVED21_3_SHIFT)
#define REVB_RESERVED21_3_SET(x, v) (((x) & ~REVB_RESERVED21_3_MASK) | (((v) << REVB_RESERVED21_3_SHIFT) & REVB_RESERVED21_3_MASK))
/* RESERVED22_10 - */
#define REVB_RESERVED22_10_SHIFT 0x16
#define REVB_RESERVED22_10_SIZE 0xa
#define REVB_RESERVED22_10_MASK (((1 << REVB_RESERVED22_10_SIZE) - 1) << REVB_RESERVED22_10_SHIFT)
#define REVB_RESERVED22_10(x) (((x) & REVB_RESERVED22_10_MASK) >> REVB_RESERVED22_10_SHIFT)
#define REVB_RESERVED22_10_SET(x, v) (((x) & ~REVB_RESERVED22_10_MASK) | (((v) << REVB_RESERVED22_10_SHIFT) & REVB_RESERVED22_10_MASK))
/* RESERVED23_1 - */
#define REVB_RESERVED23_1_SHIFT 0x17
#define REVB_RESERVED23_1_SIZE 0x1
#define REVB_RESERVED23_1_MASK (((1 << REVB_RESERVED23_1_SIZE) - 1) << REVB_RESERVED23_1_SHIFT)
#define REVB_RESERVED23_1(x) (((x) & REVB_RESERVED23_1_MASK) >> REVB_RESERVED23_1_SHIFT)
#define REVB_RESERVED23_1_SET(x, v) (((x) & ~REVB_RESERVED23_1_MASK) | (((v) << REVB_RESERVED23_1_SHIFT) & REVB_RESERVED23_1_MASK))
/* RESERVED24_8 - */
#define REVB_RESERVED24_8_SHIFT 0x18
#define REVB_RESERVED24_8_SIZE 0x8
#define REVB_RESERVED24_8_MASK (((1 << REVB_RESERVED24_8_SIZE) - 1) << REVB_RESERVED24_8_SHIFT)
#define REVB_RESERVED24_8(x) (((x) & REVB_RESERVED24_8_MASK) >> REVB_RESERVED24_8_SHIFT)
#define REVB_RESERVED24_8_SET(x, v) (((x) & ~REVB_RESERVED24_8_MASK) | (((v) << REVB_RESERVED24_8_SHIFT) & REVB_RESERVED24_8_MASK))
/* RESERVED25_5 - */
#define REVB_RESERVED25_5_SHIFT 0x19
#define REVB_RESERVED25_5_SIZE 0x5
#define REVB_RESERVED25_5_MASK (((1 << REVB_RESERVED25_5_SIZE) - 1) << REVB_RESERVED25_5_SHIFT)
#define REVB_RESERVED25_5(x) (((x) & REVB_RESERVED25_5_MASK) >> REVB_RESERVED25_5_SHIFT)
#define REVB_RESERVED25_5_SET(x, v) (((x) & ~REVB_RESERVED25_5_MASK) | (((v) << REVB_RESERVED25_5_SHIFT) & REVB_RESERVED25_5_MASK))
/* RESERVED25_6 - */
#define REVB_RESERVED25_6_SHIFT 0x19
#define REVB_RESERVED25_6_SIZE 0x6
#define REVB_RESERVED25_6_MASK (((1 << REVB_RESERVED25_6_SIZE) - 1) << REVB_RESERVED25_6_SHIFT)
#define REVB_RESERVED25_6(x) (((x) & REVB_RESERVED25_6_MASK) >> REVB_RESERVED25_6_SHIFT)
#define REVB_RESERVED25_6_SET(x, v) (((x) & ~REVB_RESERVED25_6_MASK) | (((v) << REVB_RESERVED25_6_SHIFT) & REVB_RESERVED25_6_MASK))
/* RESERVED25_7 - */
#define REVB_RESERVED25_7_SHIFT 0x19
#define REVB_RESERVED25_7_SIZE 0x7
#define REVB_RESERVED25_7_MASK (((1 << REVB_RESERVED25_7_SIZE) - 1) << REVB_RESERVED25_7_SHIFT)
#define REVB_RESERVED25_7(x) (((x) & REVB_RESERVED25_7_MASK) >> REVB_RESERVED25_7_SHIFT)
#define REVB_RESERVED25_7_SET(x, v) (((x) & ~REVB_RESERVED25_7_MASK) | (((v) << REVB_RESERVED25_7_SHIFT) & REVB_RESERVED25_7_MASK))
/* RESERVED26_6 - */
#define REVB_RESERVED26_6_SHIFT 0x1a
#define REVB_RESERVED26_6_SIZE 0x6
#define REVB_RESERVED26_6_MASK (((1 << REVB_RESERVED26_6_SIZE) - 1) << REVB_RESERVED26_6_SHIFT)
#define REVB_RESERVED26_6(x) (((x) & REVB_RESERVED26_6_MASK) >> REVB_RESERVED26_6_SHIFT)
#define REVB_RESERVED26_6_SET(x, v) (((x) & ~REVB_RESERVED26_6_MASK) | (((v) << REVB_RESERVED26_6_SHIFT) & REVB_RESERVED26_6_MASK))
/* RESERVED27_1 - */
#define REVB_RESERVED27_1_SHIFT 0x1b
#define REVB_RESERVED27_1_SIZE 0x1
#define REVB_RESERVED27_1_MASK (((1 << REVB_RESERVED27_1_SIZE) - 1) << REVB_RESERVED27_1_SHIFT)
#define REVB_RESERVED27_1(x) (((x) & REVB_RESERVED27_1_MASK) >> REVB_RESERVED27_1_SHIFT)
#define REVB_RESERVED27_1_SET(x, v) (((x) & ~REVB_RESERVED27_1_MASK) | (((v) << REVB_RESERVED27_1_SHIFT) & REVB_RESERVED27_1_MASK))
/* RESERVED27_4 - */
#define REVB_RESERVED27_4_SHIFT 0x1b
#define REVB_RESERVED27_4_SIZE 0x4
#define REVB_RESERVED27_4_MASK (((1 << REVB_RESERVED27_4_SIZE) - 1) << REVB_RESERVED27_4_SHIFT)
#define REVB_RESERVED27_4(x) (((x) & REVB_RESERVED27_4_MASK) >> REVB_RESERVED27_4_SHIFT)
#define REVB_RESERVED27_4_SET(x, v) (((x) & ~REVB_RESERVED27_4_MASK) | (((v) << REVB_RESERVED27_4_SHIFT) & REVB_RESERVED27_4_MASK))
/* RESERVED29_3 - */
#define REVB_RESERVED29_3_SHIFT 0x1d
#define REVB_RESERVED29_3_SIZE 0x3
#define REVB_RESERVED29_3_MASK (((1 << REVB_RESERVED29_3_SIZE) - 1) << REVB_RESERVED29_3_SHIFT)
#define REVB_RESERVED29_3(x) (((x) & REVB_RESERVED29_3_MASK) >> REVB_RESERVED29_3_SHIFT)
#define REVB_RESERVED29_3_SET(x, v) (((x) & ~REVB_RESERVED29_3_MASK) | (((v) << REVB_RESERVED29_3_SHIFT) & REVB_RESERVED29_3_MASK))
/* RESERVED30_1 - */
#define REVB_RESERVED30_1_SHIFT 0x1e
#define REVB_RESERVED30_1_SIZE 0x1
#define REVB_RESERVED30_1_MASK (((1 << REVB_RESERVED30_1_SIZE) - 1) << REVB_RESERVED30_1_SHIFT)
#define REVB_RESERVED30_1(x) (((x) & REVB_RESERVED30_1_MASK) >> REVB_RESERVED30_1_SHIFT)
#define REVB_RESERVED30_1_SET(x, v) (((x) & ~REVB_RESERVED30_1_MASK) | (((v) << REVB_RESERVED30_1_SHIFT) & REVB_RESERVED30_1_MASK))
/* RESERVED30_2 - */
#define REVB_RESERVED30_2_SHIFT 0x1e
#define REVB_RESERVED30_2_SIZE 0x2
#define REVB_RESERVED30_2_MASK (((1 << REVB_RESERVED30_2_SIZE) - 1) << REVB_RESERVED30_2_SHIFT)
#define REVB_RESERVED30_2(x) (((x) & REVB_RESERVED30_2_MASK) >> REVB_RESERVED30_2_SHIFT)
#define REVB_RESERVED30_2_SET(x, v) (((x) & ~REVB_RESERVED30_2_MASK) | (((v) << REVB_RESERVED30_2_SHIFT) & REVB_RESERVED30_2_MASK))
/* RESERVED31_1 - */
#define REVB_RESERVED31_1_SHIFT 0x1f
#define REVB_RESERVED31_1_SIZE 0x1
#define REVB_RESERVED31_1_MASK (((1 << REVB_RESERVED31_1_SIZE) - 1) << REVB_RESERVED31_1_SHIFT)
#define REVB_RESERVED31_1(x) (((x) & REVB_RESERVED31_1_MASK) >> REVB_RESERVED31_1_SHIFT)
#define REVB_RESERVED31_1_SET(x, v) (((x) & ~REVB_RESERVED31_1_MASK) | (((v) << REVB_RESERVED31_1_SHIFT) & REVB_RESERVED31_1_MASK))
#define REVB_CORE_ARCH_STRING XS1
#define REVB_CORE_ARCH_REVISION_STRING REVB
#define REVB_XS1 0x0
#define REVB_REVB 0x0
#define REVB_XS1_REVB 0x0
#define REVB_DEVICE_ID0_VERSION_VALUE 0x0
#define REVB_DEVICE_ID0_REVISION_VALUE 0x2
#define REVB_NUM_NETWORKS 0x4
#define REVB_CHANEND_BUFFER_SIZE 0x8
#define REVB_PORT_TIMER_BITS 0x10
#define REVB_NUM_BITS_PER_WORD 0x20
#define REVB_NUM_BYTES_PER_WORD 0x4
#define REVB_NUM_BYTES_PER_WORD_LOG2 0x2
#define REVB_CREG_SHARED_BASE_NUM 0x40
/* CLOCKING_MHZ - */
#define REVB_PROCESSOR_MHZ 0x190
#define REVB_INTERCONNECT_MHZ 0x190
#define REVB_REFERENCE_MHZ 0x64
/* RESOURCE_TYPES - Resource types*/
#define REVB_RES_TYPE_PORT 0x0
#define REVB_RES_TYPE_TIMER 0x1
#define REVB_RES_TYPE_CHANEND 0x2
#define REVB_RES_TYPE_SYNC 0x3
#define REVB_RES_TYPE_THREAD 0x4
#define REVB_RES_TYPE_LOCK 0x5
#define REVB_RES_TYPE_CLKBLK 0x6
#define REVB_RES_TYPE_COPROC 0x7
#define REVB_RES_TYPE_PS 0xb
#define REVB_RES_TYPE_CONFIG 0xc
#define REVB_RES_TYPE_INSTRUCTION 0xd
#define REVB_NUM_RES_TYPES 0x8
#define REVB_CLK_REF 0x1
#define REVB_CLK_XCORE 0x101
/* ClockBlocks - */
#define REVB_CLKBLK_0 0x6
#define REVB_CLKBLK_1 0x106
#define REVB_CLKBLK_2 0x206
#define REVB_CLKBLK_3 0x306
#define REVB_CLKBLK_4 0x406
#define REVB_CLKBLK_5 0x506
/* EXCEPTION_TYPES - \newpage\section{Exceptions} \label{chapter:exceptions} Exceptions change
        the normal flow of control on an XS1-G4; they may be caused by
        interrupts, errors arising during instruction execution and by
        system calls. On
        an exception, the processor will save the $pc$ and $sr$ in $spc$ and $ssr$,
        disable events and interrupts, and start executing
        an exception handler. The program counter that is saved normally points to the instruction that raised the exception. Two registers are also set. The
        exception-data ($ed$) and
        exception-type ($et$) will be set to reflect the cause of the
        exception. The exception handler can choose how to deal with the
        exception.
        
        In this chapter the different types of exception are listed,
        together with their representation, their meaning, and the
        instructions that may cause them.




      
      */
#define REVB_ET_LINK_ERROR 0x1
#define REVB_ET_ILLEGAL_PC 0x2
#define REVB_ET_ILLEGAL_INSTRUCTION 0x3
#define REVB_ET_ILLEGAL_RESOURCE 0x4
#define REVB_ET_LOAD_STORE 0x5
#define REVB_ET_ILLEGAL_PS 0x6
#define REVB_ET_ARITHMETIC 0x7
#define REVB_ET_ECALL 0x8
#define REVB_ET_RESOURCE_DEP 0x9
#define REVB_ET_KCALL 0xf
#define REVB_ET_NONE 0x0
#define REVB_RES_ID_INVALID 0x0
#define REVB_KEP_ALIGNMENT 0x80
#define REVB_KCALL_ALIGNMENT 0x40
#define REVB_TRAP_KCALL_OFFSET 0x40
/* ABI - Definition of the registers for the ABI.*/
#define REVB_ARG0_REG r0
#define REVB_ARG0_REG_NUM 0x0
#define REVB_ARG1_REG r1
#define REVB_ARG1_REG_NUM 0x1
#define REVB_ARG2_REG r2
#define REVB_ARG2_REG_NUM 0x2
#define REVB_ARG3_REG r3
#define REVB_ARG3_REG_NUM 0x3
#define REVB_RET0_REG r0
#define REVB_RET0_REG_NUM 0x0
#define REVB_RET1_REG r1
#define REVB_RET1_REG_NUM 0x0
#define REVB_RET2_REG r2
#define REVB_RET2_REG_NUM 0x0
#define REVB_RET3_REG r3
#define REVB_RET3_REG_NUM 0x0
#define REVB_r11_REG_NUM 0xb
#define REVB_CP_REG_NUM 0xc
#define REVB_DP_REG_NUM 0xd
#define REVB_SP_REG_NUM 0xe
#define REVB_LR_REG_NUM 0xf
/* T_REG_VALUES - Thread state register numbers for debug.*/
#define REVB_DBG_T_REG_CP_NUM 0xc
#define REVB_DBG_T_REG_DP_NUM 0xd
#define REVB_DBG_T_REG_SP_NUM 0xe
#define REVB_DBG_T_REG_LR_NUM 0xf
#define REVB_DBG_T_REG_PC_NUM 0x10
#define REVB_DBG_T_REG_SR_NUM 0x11
#define REVB_DBG_T_REG_SPC_NUM 0x12
#define REVB_DBG_T_REG_SSR_NUM 0x13
#define REVB_DBG_T_REG_ET_NUM 0x14
#define REVB_DBG_T_REG_ED_NUM 0x15
#define REVB_DBG_T_REG_SED_NUM 0x16
#define REVB_DBG_T_REG_KEP_NUM 0x17
#define REVB_DBG_T_REG_KSP_NUM 0x18
#define REVB_DBG_T_REG_ID_NUM 0x19
/* STACK_OFFSET - Stack offsets for ld,st instructions.*/
#define REVB_STACK_OFFSET_SPC 0x1
#define REVB_STACK_OFFSET_SSR 0x2
#define REVB_STACK_OFFSET_SED 0x3
#define REVB_STACK_OFFSET_ET 0x4
#define REVB_NUM_LOCKS 0x4
#define REVB_NUM_SYNCS 0x7
#define REVB_NUM_TIMERS 0xa
#define REVB_NUM_THREADS 0x8
#define REVB_NUM_CHANENDS 0x20
#define REVB_NUM_CLKBLKS 0x6
#define REVB_NUM_REGISTERS_PER_THREAD 0x10
/* DBG_DEFINES - Debug related defines.*/
#define REVB_DBG_BUFFER_WORDS 0x20
/* DBG_CAUSE - Types of debug causes, with their value*/
#define REVB_DBG_CAUSE_NONE 0x0
#define REVB_DBG_CAUSE_HOST 0x1
#define REVB_DBG_CAUSE_DCALL 0x2
#define REVB_DBG_CAUSE_IBREAK 0x3
#define REVB_DBG_CAUSE_DWATCH 0x4
#define REVB_DBG_CAUSE_RWATCH 0x5
/* DEBUG_COMMANDS - Debug commands.*/
#define REVB_DBG_CMD_ACK 0x0
#define REVB_DBG_CMD_NACK 0x1
#define REVB_DBG_CMD_READ 0x2
#define REVB_DBG_CMD_WRITE 0x3
#define REVB_DBG_CMD_GETPS 0x4
#define REVB_DBG_CMD_SETPS 0x5
#define REVB_DBG_CMD_GETSTATE 0x6
#define REVB_DBG_CMD_SETSTATE 0x7
#define REVB_DBG_CMD_CALL 0x8
#define REVB_DBG_CMD_RFDBG 0x9
#define REVB_DBG_CMD_READ4PI 0xa
#define REVB_DBG_CMD_WRITE4PI 0xb
/* DB_SCRATCH_USAGE - Debug scratch register usage.*/
#define REVB_PS_DBG_HANDLER PS_DBG_SCRATCH_0
#define REVB_PS_DBG_COMMAND PS_DBG_SCRATCH_1
#define REVB_PS_DBG_ARG0_REG PS_DBG_SCRATCH_2
#define REVB_PS_DBG_ARG1_REG PS_DBG_SCRATCH_3
#define REVB_PS_DBG_ARG2_REG PS_DBG_SCRATCH_4
#define REVB_PS_DBG_ARG3_REG PS_DBG_SCRATCH_5
#define REVB_PS_DBG_ARG4_REG PS_DBG_SCRATCH_6
#define REVB_PS_DBG_ARG5_REG PS_DBG_SCRATCH_7
#define REVB_DBG_DEVICE_ID0_REGNUM 0x0
#define REVB_DBG_DEVICE_ID1_REGNUM 0x1
#define REVB_DBG_DEVICE_ID2_REGNUM 0x2
#define REVB_DBG_DEVICE_ID3_REGNUM 0x3
#define REVB_DBG_CTRL_REGNUM 0x4
#define REVB_DBG_INT_REGNUM 0x5
#define REVB_DBG_HANDLER_REGNUM 0x20
#define REVB_DBG_COMMAND_REGNUM 0x21
#define REVB_DBG_ARG0_REG_REGNUM 0x22
#define REVB_DBG_ARG1_REG_REGNUM 0x23
#define REVB_DBG_ARG2_REG_REGNUM 0x24
#define REVB_DBG_ARG3_REG_REGNUM 0x25
#define REVB_DBG_ARG4_REG_REGNUM 0x26
#define REVB_DBG_ARG5_REG_REGNUM 0x27
#define REVB_DBG_T0_PC_REGNUM 0x40
#define REVB_DBG_T1_PC_REGNUM 0x41
#define REVB_DBG_T2_PC_REGNUM 0x42
#define REVB_DBG_T3_PC_REGNUM 0x43
#define REVB_DBG_T4_PC_REGNUM 0x44
#define REVB_DBG_T5_PC_REGNUM 0x45
#define REVB_DBG_T6_PC_REGNUM 0x46
#define REVB_DBG_T7_PC_REGNUM 0x47
#define REVB_DBG_T0_SR_REGNUM 0x60
#define REVB_DBG_T1_SR_REGNUM 0x61
#define REVB_DBG_T2_SR_REGNUM 0x62
#define REVB_DBG_T3_SR_REGNUM 0x63
#define REVB_DBG_T4_SR_REGNUM 0x64
#define REVB_DBG_T5_SR_REGNUM 0x65
#define REVB_DBG_T6_SR_REGNUM 0x66
#define REVB_DBG_T7_SR_REGNUM 0x67
/* DBG_BREAKPOINTS - Debug breakpoints and watchpoints*/
#define REVB_NUM_DBG_IBREAK 0x4
#define REVB_NUM_DBG_RWATCH 0x4
#define REVB_NUM_DBG_DWATCH 0x4
/* RAM - RAM definitions.*/
#define REVB_RAM_BASE 0x10000
#define REVB_RAM_SIZE 0x10000
#define REVB_RAM_ADDR_WIDTH 0xe
/* ROM - ROM definitions.*/
#define REVB_ROM_BASE 0xffffc000
#define REVB_ROM_SIZE 0x2000
#define REVB_ROM_ADDR_WIDTH 0xb
#define REVB_DEBUG_VECTOR 0xffffd800
/* BOOT_MODES - Boot modes.*/
#define REVB_BOOT_MODE_RAM 0x0
#define REVB_BOOT_MODE_CHANNELS 0x1
#define REVB_BOOT_MODE_SPI_MASTER 0x2
#define REVB_BOOT_MODE_JTAG 0x3
#define REVB_NUM_BOOT_MODES 0x4
/* USER_CONTROL_TOKENS - User control tokens.*/
#define REVB_CT_START_TRANSACTION 0x0
#define REVB_CT_END 0x1
#define REVB_CT_PAUSE 0x2
#define REVB_CT_ACK 0x3
#define REVB_CT_NACK 0x4
#define REVB_CT_READN 0x10
#define REVB_CT_READ1 0x11
#define REVB_CT_READ2 0x12
#define REVB_CT_READ4 0x13
#define REVB_CT_READ8 0x14
#define REVB_CT_WRITEN 0x15
#define REVB_CT_WRITE1 0x16
#define REVB_CT_WRITE2 0x17
#define REVB_CT_WRITE4 0x18
#define REVB_CT_WRITE8 0x19
#define REVB_CT_CALL 0x1a
/* PRIVELEGED_CONTROL_TOKENS - Provileged control tokens.*/
#define REVB_CT_WRITEC 0xc0
#define REVB_CT_READC 0xc1
#define REVB_CT_PSCTRL 0xc2
#define REVB_CT_SSCTRL 0xc3
/* HARDWARE_CONTROL_TOKENS - Hardware control tokens.*/
#define REVB_CT_CREDIT8 0xe0
#define REVB_CT_CREDIT64 0xe1
#define REVB_CT_LRESET 0xe2
#define REVB_CT_CREDIT_RESET 0xe3
#define REVB_CT_RTNZ 0xe4
/* RESOURCE_CREGS - Resource control registers.*/
#define REVB_RES_PS_CTRL0 0x0
#define REVB_RES_PS_CTRL1 0x1
#define REVB_RES_PS_CTRL2 0x2
#define REVB_RES_PS_VECTOR 0x3
#define REVB_RES_PS_EV 0x4
#define REVB_RES_PS_DATA 0x5
#define REVB_RES_PS_CLKSRC 0x6
#define REVB_RES_PS_RDYSRC 0x7
#define REVB_RES_PS_TBV0 0x8
/* SETCTRL_MODES - */
#define REVB_SETCTRL_MODE_INUSE 0x0
#define REVB_SETCTRL_MODE_COND 0x1
#define REVB_SETCTRL_MODE_IE_MODE 0x2
#define REVB_SETCTRL_MODE_DRIVE 0x3
#define REVB_SETCTRL_MODE_LONG 0x7
/* SETCTRL_LMODE - */
#define REVB_SETCTRL_LMODE_RUN 0x0
#define REVB_SETCTRL_LMODE_MS 0x1
#define REVB_SETCTRL_LMODE_BUF 0x2
#define REVB_SETCTRL_LMODE_RDY 0x3
#define REVB_SETCTRL_LMODE_SDELAY 0x4
#define REVB_SETCTRL_LMODE_PORT 0x5
#define REVB_SETCTRL_LMODE_INV 0x6
#define REVB_SETCTRL_LMODE_PIN_DELAY 0x7
#define REVB_SETCTRL_LMODE_FALL_DELAY 0x8
#define REVB_SETCTRL_LMODE_RISE_DELAY 0x9
/* CONDITIONS - Port conditions*/
#define REVB_SETCTRL_VALUE_COND_NONE 0x0
#define REVB_SETCTRL_VALUE_COND_FULL 0x0
#define REVB_SETCTRL_VALUE_COND_AFTER 0x1
#define REVB_SETCTRL_VALUE_COND_EQ 0x2
#define REVB_SETCTRL_VALUE_COND_NEQ 0x3
#define REVB_SETCTRL_VALUE_COND_GREATER 0x4
#define REVB_SETCTRL_VALUE_COND_LESS 0x5
/* SETCTRL_MODE - */
#define REVB_SETCTRL_VALUE_INUSE_OFF 0x0
#define REVB_SETCTRL_VALUE_INUSE_ON 0x1
#define REVB_SETCTRL_VALUE_IE_MODE_EVENT 0x0
#define REVB_SETCTRL_VALUE_IE_MODE_INTERRUPT 0x1
#define REVB_SETCTRL_VALUE_DRIVE_DRIVE 0x0
#define REVB_SETCTRL_VALUE_DRIVE_PULL_DOWN 0x1
#define REVB_SETCTRL_VALUE_DRIVE_PULL_UP 0x2
#define REVB_SETCTRL_VALUE_RUN_STOPR 0x0
#define REVB_SETCTRL_VALUE_RUN_STARTR 0x1
#define REVB_SETCTRL_VALUE_RUN_CLRBUF 0x2
#define REVB_SETCTRL_VALUE_MS_MASTER 0x0
#define REVB_SETCTRL_VALUE_MS_SLAVE 0x1
#define REVB_SETCTRL_VALUE_BUF_NOBUFFERS 0x0
#define REVB_SETCTRL_VALUE_BUF_BUFFERS 0x1
#define REVB_SETCTRL_VALUE_SDELAY_NOSDELAY 0x0
#define REVB_SETCTRL_VALUE_SDELAY_SDELAY 0x1
#define REVB_SETCTRL_VALUE_RDY_NOREADY 0x0
#define REVB_SETCTRL_VALUE_RDY_STROBED 0x1
#define REVB_SETCTRL_VALUE_RDY_HANDSHAKE 0x2
#define REVB_SETCTRL_VALUE_PORT_DATAPORT 0x0
#define REVB_SETCTRL_VALUE_PORT_CLOCKPORT 0x1
#define REVB_SETCTRL_VALUE_PORT_READYPORT 0x2
#define REVB_SETCTRL_VALUE_INV_NOINVERT 0x0
#define REVB_SETCTRL_VALUE_INV_INVERT 0x1
/* CTRL_MODE - */
#define REVB_CTRL_INUSE_OFF 0x0
#define REVB_CTRL_INUSE_ON 0x8
#define REVB_CTRL_COND_NONE 0x1
#define REVB_CTRL_COND_FULL 0x1
#define REVB_CTRL_COND_AFTER 0x9
#define REVB_CTRL_COND_EQ 0x11
#define REVB_CTRL_COND_NEQ 0x19
#define REVB_CTRL_COND_GREATER 0x21
#define REVB_CTRL_COND_LESS 0x29
#define REVB_CTRL_IE_MODE_EVENT 0x2
#define REVB_CTRL_IE_MODE_INTERRUPT 0xa
#define REVB_CTRL_DRIVE_DRIVE 0x3
#define REVB_CTRL_DRIVE_PULL_DOWN 0xb
#define REVB_CTRL_DRIVE_PULL_UP 0x13
#define REVB_CTRL_RUN_STOPR 0x7
#define REVB_CTRL_RUN_STARTR 0xf
#define REVB_CTRL_RUN_CLRBUF 0x17
#define REVB_CTRL_MS_MASTER 0x1007
#define REVB_CTRL_MS_SLAVE 0x100f
#define REVB_CTRL_BUF_NOBUFFERS 0x2007
#define REVB_CTRL_BUF_BUFFERS 0x200f
#define REVB_CTRL_RDY_NOREADY 0x3007
#define REVB_CTRL_RDY_STROBED 0x300f
#define REVB_CTRL_RDY_HANDSHAKE 0x3017
#define REVB_CTRL_SDELAY_NOSDELAY 0x4007
#define REVB_CTRL_SDELAY_SDELAY 0x400f
#define REVB_CTRL_PORT_DATAPORT 0x5007
#define REVB_CTRL_PORT_CLOCKPORT 0x500f
#define REVB_CTRL_PORT_READYPORT 0x5017
#define REVB_CTRL_INV_NOINVERT 0x6007
#define REVB_CTRL_INV_INVERT 0x600f
#define REVB_NUM_PLINKS_PER_XCORE 0x4
#define REVB_NUM_XCORES 0x4
#define REVB_NUM_PROC 0x4
#define REVB_XCORE_LEVEL_SCAN_CHAINS 0x99
#define REVB_NUM_XCORE_TILES 0x4
#define REVB_PLINKS_PER_PSWITCH 0x4
#define REVB_NUM_SLINKS 0x10
#define REVB_NUM_GPIO_1BIT_PORTS 0x10
#define REVB_MAX_NUM_RES_PER_TYPE 0x20
#define REVB_NUM_HIDRIVE_IO_PINS 0x8
#define REVB_NUM_LODRIVE_IO_PINS 0x20
/* gpio ports*/
#define REVB_PORT_32_00 0x200000
#define REVB_PORT_16_00 0x100000
#define REVB_PORT_16_01 0x100100
#define REVB_PORT_8_00 0x80000
#define REVB_PORT_8_01 0x80100
#define REVB_PORT_8_02 0x80200
#define REVB_PORT_8_03 0x80300
#define REVB_PORT_4_00 0x40000
#define REVB_PORT_4_01 0x40100
#define REVB_PORT_4_02 0x40200
#define REVB_PORT_4_03 0x40300
#define REVB_PORT_4_04 0x40400
#define REVB_PORT_4_05 0x40500
#define REVB_PORT_1_00 0x10000
#define REVB_PORT_1_01 0x10100
#define REVB_PORT_1_02 0x10200
#define REVB_PORT_1_03 0x10300
#define REVB_PORT_1_04 0x10400
#define REVB_PORT_1_05 0x10500
#define REVB_PORT_1_06 0x10600
#define REVB_PORT_1_07 0x10700
#define REVB_PORT_1_08 0x10800
#define REVB_PORT_1_09 0x10900
#define REVB_PORT_1_0A 0x10a00
#define REVB_PORT_1_0B 0x10b00
#define REVB_PORT_1_0C 0x10c00
#define REVB_PORT_1_0D 0x10d00
#define REVB_PORT_1_0E 0x10e00
#define REVB_PORT_1_0F 0x10f00
#define REVB_NUM_1BIT_GPIO_PORTS 0x10
#define REVB_NUM_4BIT_GPIO_PORTS 0x6
#define REVB_NUM_8BIT_GPIO_PORTS 0x4
#define REVB_NUM_16BIT_GPIO_PORTS 0x2
#define REVB_NUM_32BIT_GPIO_PORTS 0x1
/* periph ports*/
#define REVB_PORT_32_01 0x200100
#define REVB_PORT_16_02 0x100200
#define REVB_PORT_16_03 0x100300
#define REVB_NUM_16BIT_PERIPH_PORTS 0x2
#define REVB_NUM_32BIT_PERIPH_PORTS 0x1
/* Totals*/
#define REVB_NUM_1BIT_PORTS 0x10
#define REVB_NUM_4BIT_PORTS 0x6
#define REVB_NUM_8BIT_PORTS 0x4
#define REVB_NUM_16BIT_PORTS 0x4
#define REVB_NUM_32BIT_PORTS 0x2
#define REVB_SWITCH_VALID_PORTS REVB_PORT_32_00 : \
                      case REVB_PORT_16_00 : \
                      case REVB_PORT_16_01 : \
                      case REVB_PORT_8_00 : \
                      case REVB_PORT_8_01 : \
                      case REVB_PORT_8_02 : \
                      case REVB_PORT_8_03 : \
                      case REVB_PORT_4_00 : \
                      case REVB_PORT_4_01 : \
                      case REVB_PORT_4_02 : \
                      case REVB_PORT_4_03 : \
                      case REVB_PORT_4_04 : \
                      case REVB_PORT_4_05 : \
                      case REVB_PORT_1_00 : \
                      case REVB_PORT_1_01 : \
                      case REVB_PORT_1_02 : \
                      case REVB_PORT_1_03 : \
                      case REVB_PORT_1_04 : \
                      case REVB_PORT_1_05 : \
                      case REVB_PORT_1_06 : \
                      case REVB_PORT_1_07 : \
                      case REVB_PORT_1_08 : \
                      case REVB_PORT_1_09 : \
                      case REVB_PORT_1_0A : \
                      case REVB_PORT_1_0B : \
                      case REVB_PORT_1_0C : \
                      case REVB_PORT_1_0D : \
                      case REVB_PORT_1_0E : \
                      case REVB_PORT_1_0F : \
                      case REVB_PORT_32_01 : \
                      case REVB_PORT_16_02 : \
                      case REVB_PORT_16_03
#define REVB_MAX_PAD_PRIORITIES  0x4
#define REVB_NUM_GPIO_PINS 0x40
#define REVB_NUM_PERIPH_PINS 0x40
#define REVB_ISA_TIMESTAMP Mon May 11 11:17:05 2009
#define REVB_XCORE_TIMESTAMP Mon May 11 11:17:05 2009
#endif /* _REVB_AUTODEFINES_H_ */
